{
  "id": "6ffcc0ac9f3eacd8073343cd08cdf4c1",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.6",
  "solcLongVersion": "0.7.6+commit.7338295f",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/liquidation/BalancerV2Swap.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\";\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\";\nimport \"../interfaces/ISwapper.sol\";\n\n\ncontract BalancerV2Swap is ISwapper {\n    struct BalancerPool {\n        bytes32 poolId;\n        address priceOracle;\n        bool token0isAsset;\n    }\n\n    bytes4 constant public ASSETS_POOLS_SELECTOR = bytes4(keccak256(\"assetsPools(address)\"));\n\n    IVault public immutable vault;\n\n    constructor (address _balancerVault) {\n        vault = IVault(_balancerVault);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amount,\n        address _siloOracle,\n        address _siloAsset\n    ) external override returns (uint256 amountOut) {\n        bytes32 poolId = resolvePoolId(_siloOracle, _siloAsset);\n        return _swapAmountIn(_tokenIn, _tokenOut, _amount, poolId);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        address _siloOracle,\n        address _siloAsset\n    ) external override returns (uint256 amountIn) {\n        bytes32 poolId = resolvePoolId(_siloOracle, _siloAsset);\n        return _swapAmountOut(_tokenIn, _tokenOut, _amountOut, poolId);\n    }\n\n    /// @inheritdoc ISwapper\n    function spenderToApprove() external view override returns (address) {\n        return address(vault);\n    }\n\n    function resolvePoolId(address _oracle, address _asset) public view returns (bytes32 poolId) {\n        bytes memory callData = abi.encodeWithSelector(ASSETS_POOLS_SELECTOR, _asset);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = _oracle.staticcall(callData);\n        require(success, \"pool for asset not set\");\n\n        BalancerPool memory pool = abi.decode(data, (BalancerPool));\n        return pool.poolId;\n    }\n\n    function _swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\n            _poolId, IVault.SwapKind.GIVEN_IN, IAsset(_tokenIn), IAsset(_tokenOut), _amountIn, \"\"\n        );\n\n        IVault.FundManagement memory funds = IVault.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return vault.swap(singleSwap, funds, 1, block.timestamp);\n    }\n\n    function _swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IVault.SingleSwap memory singleSwap = IVault.SingleSwap(\n            _poolId, IVault.SwapKind.GIVEN_OUT, IAsset(_tokenIn), IAsset(_tokenOut), _amountOut, \"\"\n        );\n\n        IVault.FundManagement memory funds = IVault.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return vault.swap(singleSwap, funds, type(uint256).max, block.timestamp);\n    }\n}\n"
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\";\nimport \"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\";\n\nimport \"./IAsset.sol\";\nimport \"./IAuthorizer.sol\";\nimport \"./IFlashLoanRecipient.sol\";\nimport \"./IProtocolFeesCollector.sol\";\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n"
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"
      },
      "contracts/interfaces/ISwapper.sol": {
        "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.0 <0.9.0;\n\ninterface ISwapper {\n    /// @dev swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\n    /// @return amountOut amount of _tokenOut received\n    function swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        address _siloOracle,\n        address _siloAsset\n    ) external returns (uint256 amountOut);\n\n    /// @dev swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\n    /// @return amountIn amount of _tokenIn spend\n    function swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        address _siloOracle,\n        address _siloAsset\n    ) external returns (uint256 amountIn);\n\n    /// @return address that needs to have approval to spend tokens to execute a swap\n    function spenderToApprove() external view returns (address);\n}\n"
      },
      "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
      },
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n"
      },
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the TemporarilyPausable helper.\n */\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n"
      },
      "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../openzeppelin/IERC20.sol\";\n\n/**\n * @dev Interface for WETH9.\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\n */\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n"
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// Inspired by Aave Protocol's IFlashLoanReceiver.\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\";\n\nimport \"./IVault.sol\";\nimport \"./IAuthorizer.sol\";\n\ninterface IProtocolFeesCollector {\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external;\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\n\n    function getSwapFeePercentage() external view returns (uint256);\n\n    function getFlashLoanFeePercentage() external view returns (uint256);\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\n\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    function vault() external view returns (IVault);\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol": {
        "ISignaturesValidator": {
          "abi": [
            {
              "inputs": [],
              "name": "getDomainSeparator",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "getNextNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getDomainSeparator()": "ed24911d",
              "getNextNonce(address)": "90193b7c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureValidator helper, used to support meta-transactions.\",\"kind\":\"dev\",\"methods\":{\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":\"ISignaturesValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995\",\"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol": {
        "ITemporarilyPausable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                }
              ],
              "name": "PausedStateChanged",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "getPausedState",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "pauseWindowEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bufferPeriodEndTime",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getPausedState()": "1c0de051"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the TemporarilyPausable helper.\",\"events\":{\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"}},\"kind\":\"dev\",\"methods\":{\"getPausedState()\":{\"details\":\"Returns the current paused state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":\"ITemporarilyPausable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b\",\"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol": {
        "IWETH": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "deposit()": "d0e30db0",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "withdraw(uint256)": "2e1a7d4d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for WETH9. See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c55887c89f152f00e5d65389061de28fada0e73eb5f41ebd16a3b8e65846cb1a\",\"dweb:/ipfs/QmNbVtaA44BGvKnKiCT4bEtjZu1ZD5ZJ6XrgBDh5qVEGcP\"]},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol": {
        "IAsset": {
          "abi": [],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":\"IAsset\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1\",\"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol": {
        "IAuthorizer": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "actionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                }
              ],
              "name": "canPerform",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "canPerform(bytes32,address,address)": "9be2a884"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0\",\"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol": {
        "IFlashLoanRecipient": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "feeAmounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ],
              "name": "receiveFlashLoan",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "receiveFlashLoan(address[],uint256[],uint256[],bytes)": "f04f2707"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":\"IFlashLoanRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://35a6ee6cb389f2675c1b64f9813862d3503524ee05067ba88172c9298d4f5e3c\",\"dweb:/ipfs/QmZGPUaoKfRigdo2U9U3695j9wX97GRSzgiK8c6zhVjjFY\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol": {
        "IProtocolFeesCollector": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newFlashLoanFeePercentage",
                  "type": "uint256"
                }
              ],
              "name": "FlashLoanFeePercentageChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newSwapFeePercentage",
                  "type": "uint256"
                }
              ],
              "name": "SwapFeePercentageChanged",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "getAuthorizer",
              "outputs": [
                {
                  "internalType": "contract IAuthorizer",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                }
              ],
              "name": "getCollectedFeeAmounts",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "feeAmounts",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getFlashLoanFeePercentage",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getSwapFeePercentage",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newFlashLoanFeePercentage",
                  "type": "uint256"
                }
              ],
              "name": "setFlashLoanFeePercentage",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newSwapFeePercentage",
                  "type": "uint256"
                }
              ],
              "name": "setSwapFeePercentage",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "vault",
              "outputs": [
                {
                  "internalType": "contract IVault",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "name": "withdrawCollectedFees",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getAuthorizer()": "aaabadc5",
              "getCollectedFeeAmounts(address[])": "e42abf35",
              "getFlashLoanFeePercentage()": "d877845c",
              "getSwapFeePercentage()": "55c67628",
              "setFlashLoanFeePercentage(uint256)": "6b6b9f69",
              "setSwapFeePercentage(uint256)": "38e9922e",
              "vault()": "fbfa77cf",
              "withdrawCollectedFees(address[],uint256[],address)": "6daefab6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":\"IProtocolFeesCollector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995\",\"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8\"]},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b\",\"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv\"]},\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c55887c89f152f00e5d65389061de28fada0e73eb5f41ebd16a3b8e65846cb1a\",\"dweb:/ipfs/QmNbVtaA44BGvKnKiCT4bEtjZu1ZD5ZJ6XrgBDh5qVEGcP\"]},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1\",\"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0\",\"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://35a6ee6cb389f2675c1b64f9813862d3503524ee05067ba88172c9298d4f5e3c\",\"dweb:/ipfs/QmZGPUaoKfRigdo2U9U3695j9wX97GRSzgiK8c6zhVjjFY\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b8a27ce7efd29cb653529a2e2c6a828f5bd973b286dc166d12a8f81426bca68a\",\"dweb:/ipfs/QmPFuddzXwjK58qDG4z1n9S9Yff865yCToAStRbdfWMo1D\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e428d19d1bd18504c5c8a797b0a80515072f4d7fc278df73b9fec0ab8efe155d\",\"dweb:/ipfs/QmYeJPPQKAckBVvuhU9XXiZR4aSrVNu3WcfTmSsXJJYey3\"]}},\"version\":1}"
        }
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol": {
        "IVault": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "contract IAuthorizer",
                  "name": "newAuthorizer",
                  "type": "address"
                }
              ],
              "name": "AuthorizerChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ExternalBalanceTransfer",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "contract IFlashLoanRecipient",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                }
              ],
              "name": "FlashLoan",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "delta",
                  "type": "int256"
                }
              ],
              "name": "InternalBalanceChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                }
              ],
              "name": "PausedStateChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "liquidityProvider",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "indexed": false,
                  "internalType": "int256[]",
                  "name": "deltas",
                  "type": "int256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "protocolFeeAmounts",
                  "type": "uint256[]"
                }
              ],
              "name": "PoolBalanceChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "assetManager",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "cashDelta",
                  "type": "int256"
                },
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "managedDelta",
                  "type": "int256"
                }
              ],
              "name": "PoolBalanceManaged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "enum IVault.PoolSpecialization",
                  "name": "specialization",
                  "type": "uint8"
                }
              ],
              "name": "PoolRegistered",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "relayer",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "RelayerApprovalChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "contract IERC20",
                  "name": "tokenOut",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                }
              ],
              "name": "Swap",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                }
              ],
              "name": "TokensDeregistered",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "indexed": false,
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "indexed": false,
                  "internalType": "address[]",
                  "name": "assetManagers",
                  "type": "address[]"
                }
              ],
              "name": "TokensRegistered",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "WETH",
              "outputs": [
                {
                  "internalType": "contract IWETH",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum IVault.SwapKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "poolId",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetInIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetOutIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "userData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IVault.BatchSwapStep[]",
                  "name": "swaps",
                  "type": "tuple[]"
                },
                {
                  "internalType": "contract IAsset[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "fromInternalBalance",
                      "type": "bool"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "toInternalBalance",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.FundManagement",
                  "name": "funds",
                  "type": "tuple"
                },
                {
                  "internalType": "int256[]",
                  "name": "limits",
                  "type": "int256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "name": "batchSwap",
              "outputs": [
                {
                  "internalType": "int256[]",
                  "name": "",
                  "type": "int256[]"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                }
              ],
              "name": "deregisterTokens",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "contract IAsset[]",
                      "name": "assets",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "minAmountsOut",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "userData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bool",
                      "name": "toInternalBalance",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.ExitPoolRequest",
                  "name": "request",
                  "type": "tuple"
                }
              ],
              "name": "exitPool",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "contract IFlashLoanRecipient",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "userData",
                  "type": "bytes"
                }
              ],
              "name": "flashLoan",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getAuthorizer",
              "outputs": [
                {
                  "internalType": "contract IAuthorizer",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getDomainSeparator",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                }
              ],
              "name": "getInternalBalance",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "getNextNonce",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getPausedState",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "pauseWindowEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bufferPeriodEndTime",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                }
              ],
              "name": "getPool",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "enum IVault.PoolSpecialization",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                }
              ],
              "name": "getPoolTokenInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "cash",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "managed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastChangeBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "assetManager",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                }
              ],
              "name": "getPoolTokens",
              "outputs": [
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "balances",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "lastChangeBlock",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getProtocolFeesCollector",
              "outputs": [
                {
                  "internalType": "contract IProtocolFeesCollector",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "relayer",
                  "type": "address"
                }
              ],
              "name": "hasApprovedRelayer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "contract IAsset[]",
                      "name": "assets",
                      "type": "address[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "maxAmountsIn",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "userData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bool",
                      "name": "fromInternalBalance",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.JoinPoolRequest",
                  "name": "request",
                  "type": "tuple"
                }
              ],
              "name": "joinPool",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "enum IVault.PoolBalanceOpKind",
                      "name": "kind",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "poolId",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "contract IERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IVault.PoolBalanceOp[]",
                  "name": "ops",
                  "type": "tuple[]"
                }
              ],
              "name": "managePoolBalance",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "enum IVault.UserBalanceOpKind",
                      "name": "kind",
                      "type": "uint8"
                    },
                    {
                      "internalType": "contract IAsset",
                      "name": "asset",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct IVault.UserBalanceOp[]",
                  "name": "ops",
                  "type": "tuple[]"
                }
              ],
              "name": "manageUserBalance",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum IVault.SwapKind",
                  "name": "kind",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "poolId",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetInIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetOutIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "userData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IVault.BatchSwapStep[]",
                  "name": "swaps",
                  "type": "tuple[]"
                },
                {
                  "internalType": "contract IAsset[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "fromInternalBalance",
                      "type": "bool"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "toInternalBalance",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.FundManagement",
                  "name": "funds",
                  "type": "tuple"
                }
              ],
              "name": "queryBatchSwap",
              "outputs": [
                {
                  "internalType": "int256[]",
                  "name": "assetDeltas",
                  "type": "int256[]"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum IVault.PoolSpecialization",
                  "name": "specialization",
                  "type": "uint8"
                }
              ],
              "name": "registerPool",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract IERC20[]",
                  "name": "tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "assetManagers",
                  "type": "address[]"
                }
              ],
              "name": "registerTokens",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "contract IAuthorizer",
                  "name": "newAuthorizer",
                  "type": "address"
                }
              ],
              "name": "setAuthorizer",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                }
              ],
              "name": "setPaused",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "relayer",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "setRelayerApproval",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "poolId",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "enum IVault.SwapKind",
                      "name": "kind",
                      "type": "uint8"
                    },
                    {
                      "internalType": "contract IAsset",
                      "name": "assetIn",
                      "type": "address"
                    },
                    {
                      "internalType": "contract IAsset",
                      "name": "assetOut",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "userData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IVault.SingleSwap",
                  "name": "singleSwap",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "sender",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "fromInternalBalance",
                      "type": "bool"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "toInternalBalance",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct IVault.FundManagement",
                  "name": "funds",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "limit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "name": "swap",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "WETH()": "ad5c4648",
              "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
              "deregisterTokens(bytes32,address[])": "7d3aeb96",
              "exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "8bdb3913",
              "flashLoan(address,address[],uint256[],bytes)": "5c38449e",
              "getAuthorizer()": "aaabadc5",
              "getDomainSeparator()": "ed24911d",
              "getInternalBalance(address,address[])": "0f5a6efa",
              "getNextNonce(address)": "90193b7c",
              "getPausedState()": "1c0de051",
              "getPool(bytes32)": "f6c00927",
              "getPoolTokenInfo(bytes32,address)": "b05f8e48",
              "getPoolTokens(bytes32)": "f94d4668",
              "getProtocolFeesCollector()": "d2946c2b",
              "hasApprovedRelayer(address,address)": "fec90d72",
              "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "b95cac28",
              "managePoolBalance((uint8,bytes32,address,uint256)[])": "e6c46092",
              "manageUserBalance((uint8,address,uint256,address,address)[])": "0e8e3e84",
              "queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": "f84d066e",
              "registerPool(uint8)": "09b2760f",
              "registerTokens(bytes32,address[],address[])": "66a9c7d2",
              "setAuthorizer(address)": "058a628f",
              "setPaused(bool)": "16c38b3c",
              "setRelayerApproval(address,address,bool)": "fa6e671d",
              "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.\",\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995\",\"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8\"]},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b\",\"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv\"]},\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c55887c89f152f00e5d65389061de28fada0e73eb5f41ebd16a3b8e65846cb1a\",\"dweb:/ipfs/QmNbVtaA44BGvKnKiCT4bEtjZu1ZD5ZJ6XrgBDh5qVEGcP\"]},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1\",\"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0\",\"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://35a6ee6cb389f2675c1b64f9813862d3503524ee05067ba88172c9298d4f5e3c\",\"dweb:/ipfs/QmZGPUaoKfRigdo2U9U3695j9wX97GRSzgiK8c6zhVjjFY\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b8a27ce7efd29cb653529a2e2c6a828f5bd973b286dc166d12a8f81426bca68a\",\"dweb:/ipfs/QmPFuddzXwjK58qDG4z1n9S9Yff865yCToAStRbdfWMo1D\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e428d19d1bd18504c5c8a797b0a80515072f4d7fc278df73b9fec0ab8efe155d\",\"dweb:/ipfs/QmYeJPPQKAckBVvuhU9XXiZR4aSrVNu3WcfTmSsXJJYey3\"]}},\"version\":1}"
        }
      },
      "contracts/interfaces/ISwapper.sol": {
        "ISwapper": {
          "abi": [
            {
              "inputs": [],
              "name": "spenderToApprove",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_tokenOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_siloOracle",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_siloAsset",
                  "type": "address"
                }
              ],
              "name": "swapAmountIn",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_tokenOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_siloOracle",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_siloAsset",
                  "type": "address"
                }
              ],
              "name": "swapAmountOut",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "spenderToApprove()": "db36eb2e",
              "swapAmountIn(address,address,uint256,address,address)": "9cffaf6f",
              "swapAmountOut(address,address,uint256,address,address)": "168c66b4"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"spenderToApprove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_siloOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"}],\"name\":\"swapAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_siloOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"}],\"name\":\"swapAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"spenderToApprove()\":{\"returns\":{\"_0\":\"address that needs to have approval to spend tokens to execute a swap\"}},\"swapAmountIn(address,address,uint256,address,address)\":{\"details\":\"swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\",\"returns\":{\"amountOut\":\"amount of _tokenOut received\"}},\"swapAmountOut(address,address,uint256,address,address)\":{\"details\":\"swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\",\"returns\":{\"amountIn\":\"amount of _tokenIn spend\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapper.sol\":\"ISwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISwapper.sol\":{\"keccak256\":\"0x7cf66bb1054b9fbdca5786b38d6ceca281bd291b1b6553fa07c1e4c8f76a1eb4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://14a07c1cd56b5ed81e612ea67594c672e55ac3b8d354409dd35594907300ff00\",\"dweb:/ipfs/QmPC2opJud5obp2WLJrZuoHvii1mGYavTbthL2WDseP1VM\"]}},\"version\":1}"
        }
      },
      "contracts/liquidation/BalancerV2Swap.sol": {
        "BalancerV2Swap": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_balancerVault",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "ASSETS_POOLS_SELECTOR",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_oracle",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_asset",
                  "type": "address"
                }
              ],
              "name": "resolvePoolId",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "poolId",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "spenderToApprove",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_tokenOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_siloOracle",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_siloAsset",
                  "type": "address"
                }
              ],
              "name": "swapAmountIn",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_tokenOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_siloOracle",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_siloAsset",
                  "type": "address"
                }
              ],
              "name": "swapAmountOut",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "vault",
              "outputs": [
                {
                  "internalType": "contract IVault",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:805:11",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "70:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "80:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "95:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "89:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "89:13:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "80:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "138:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "111:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "111:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "111:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_address_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "48:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "56:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "64:5:11",
                            "type": ""
                          }
                        ],
                        "src": "7:143:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "233:207:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "279:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "288:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "291:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "281:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "281:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "281:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "254:7:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "263:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "250:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "250:23:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "275:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "246:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "246:32:11"
                              },
                              "nodeType": "YulIf",
                              "src": "243:2:11"
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "305:128:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "320:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "334:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "324:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "349:74:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "395:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "406:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "391:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "391:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "415:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "359:31:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "359:64:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "349:6:11"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "203:9:11",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "214:7:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "226:6:11",
                            "type": ""
                          }
                        ],
                        "src": "156:284:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "491:51:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "501:35:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "530:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "512:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "512:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "501:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "473:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "483:7:11",
                            "type": ""
                          }
                        ],
                        "src": "446:96:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "593:81:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "603:65:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "618:5:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "625:42:11",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "614:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "614:54:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "603:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_uint160",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "575:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "585:7:11",
                            "type": ""
                          }
                        ],
                        "src": "548:126:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "723:79:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "780:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "789:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "792:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "782:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "782:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "782:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "746:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "771:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "cleanup_t_address",
                                          "nodeType": "YulIdentifier",
                                          "src": "753:17:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "753:24:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "743:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "743:35:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "736:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "736:43:11"
                              },
                              "nodeType": "YulIf",
                              "src": "733:2:11"
                            }
                          ]
                        },
                        "name": "validator_revert_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "716:5:11",
                            "type": ""
                          }
                        ],
                        "src": "680:122:11"
                      }
                    ]
                  },
                  "contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
                  "id": 11,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "60a060405234801561001057600080fd5b50604051610fbd380380610fbd83398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100f6565b60008151905061007e816100df565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100bf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100e8816100ad565b81146100f357600080fd5b50565b60805160601c610e9b610122600039806103315280610357528061044a52806105f75250610e9b6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063168c66b41461006757806356a6f68514610097578063570421e5146100c75780639cffaf6f146100e5578063db36eb2e14610115578063fbfa77cf14610133575b600080fd5b610081600480360381019061007c91906107cd565b610151565b60405161008e9190610c1c565b60405180910390f35b6100b160048036038101906100ac9190610791565b610178565b6040516100be9190610b13565b60405180910390f35b6100cf6102e2565b6040516100dc9190610b2e565b60405180910390f35b6100ff60048036038101906100fa91906107cd565b610306565b60405161010c9190610c1c565b60405180910390f35b61011d61032d565b60405161012a9190610af8565b60405180910390f35b61013b610355565b6040516101489190610b49565b60405180910390f35b60008061015e8484610178565b905061016c87878784610379565b91505095945050505050565b6000807f7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc836040516024016101ad9190610af8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff16836040516102349190610ae1565b600060405180830381855afa9150503d806000811461026f576040519150601f19603f3d011682016040523d82523d6000602084013e610274565b606091505b5091509150816102b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b090610b64565b60405180910390fd5b6000818060200190518101906102cf9190610844565b9050806000015194505050505092915050565b7f7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc81565b6000806103138484610178565b905061032187878784610525565b91505095945050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806040518060c0016040528084815260200160018081111561039957fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001604051806020016040528060008152508152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352bbbe2983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff426040518563ffffffff1660e01b81526004016104c79493929190610bd0565b602060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610519919061086d565b92505050949350505050565b6000806040518060c001604052808481526020016000600181111561054657fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001604051806020016040528060008152508152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352bbbe2983836001426040518563ffffffff1660e01b81526004016106559493929190610b84565b602060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061086d565b92505050949350505050565b6000813590506106c281610e09565b92915050565b6000815190506106d781610e09565b92915050565b6000815190506106ec81610e20565b92915050565b60008151905061070181610e37565b92915050565b60006060828403121561071957600080fd5b6107236060610c37565b90506000610733848285016106f2565b6000830152506020610747848285016106c8565b602083015250604061075b848285016106dd565b60408301525092915050565b60008135905061077681610e4e565b92915050565b60008151905061078b81610e4e565b92915050565b600080604083850312156107a457600080fd5b60006107b2858286016106b3565b92505060206107c3858286016106b3565b9150509250929050565b600080600080600060a086880312156107e557600080fd5b60006107f3888289016106b3565b9550506020610804888289016106b3565b945050604061081588828901610767565b9350506060610826888289016106b3565b9250506080610837888289016106b3565b9150509295509295909350565b60006060828403121561085657600080fd5b600061086484828501610707565b91505092915050565b60006020828403121561087f57600080fd5b600061088d8482850161077c565b91505092915050565b61089f81610cb2565b82525050565b6108ae81610ca0565b82525050565b6108bd81610ca0565b82525050565b6108cc81610cc4565b82525050565b6108db81610cd0565b82525050565b6108ea81610cd0565b82525050565b6108f981610cda565b82525050565b600061090a82610c68565b6109148185610c73565b9350610924818560208601610daf565b61092d81610de4565b840191505092915050565b600061094382610c68565b61094d8185610c84565b935061095d818560208601610daf565b80840191505092915050565b61097281610d43565b82525050565b61098181610d67565b82525050565b61099081610d8b565b82525050565b61099f81610d9d565b82525050565b60006109b2601683610c8f565b91507f706f6f6c20666f72206173736574206e6f7420736574000000000000000000006000830152602082019050919050565b6080820160008201516109fb60008501826108a5565b506020820151610a0e60208501826108c3565b506040820151610a216040850182610896565b506060820151610a3460608501826108c3565b50505050565b600060c083016000830151610a5260008601826108d2565b506020830151610a656020860182610987565b506040830151610a786040860182610969565b506060830151610a8b6060860182610969565b506080830151610a9e6080860182610ac3565b5060a083015184820360a0860152610ab682826108ff565b9150508091505092915050565b610acc81610d39565b82525050565b610adb81610d39565b82525050565b6000610aed8284610938565b915081905092915050565b6000602082019050610b0d60008301846108b4565b92915050565b6000602082019050610b2860008301846108e1565b92915050565b6000602082019050610b4360008301846108f0565b92915050565b6000602082019050610b5e6000830184610978565b92915050565b60006020820190508181036000830152610b7d816109a5565b9050919050565b600060e0820190508181036000830152610b9e8187610a3a565b9050610bad60208301866109e5565b610bba60a0830185610996565b610bc760c0830184610ad2565b95945050505050565b600060e0820190508181036000830152610bea8187610a3a565b9050610bf960208301866109e5565b610c0660a0830185610ad2565b610c1360c0830184610ad2565b95945050505050565b6000602082019050610c316000830184610ad2565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610c5e57610c5d610de2565b5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610cab82610d19565b9050919050565b6000610cbd82610d19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050610d1482610df5565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d4e82610d55565b9050919050565b6000610d6082610d19565b9050919050565b6000610d7282610d79565b9050919050565b6000610d8482610d19565b9050919050565b6000610d9682610d06565b9050919050565b6000610da882610d39565b9050919050565b60005b83811015610dcd578082015181840152602081019050610db2565b83811115610ddc576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b60028110610e0657610e05610de2565b5b50565b610e1281610ca0565b8114610e1d57600080fd5b50565b610e2981610cc4565b8114610e3457600080fd5b50565b610e4081610cd0565b8114610e4b57600080fd5b50565b610e5781610d39565b8114610e6257600080fd5b5056fea26469706673582212207d597ccde6ec0d442686a234f1d1cf8f9e041d8c11a7a1e199f038ab707493c064736f6c63430007060033",
              "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xFBD CODESIZE SUB DUP1 PUSH2 0xFBD DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x84 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7E DUP2 PUSH2 0xDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA4 DUP5 DUP3 DUP6 ADD PUSH2 0x6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB8 DUP3 PUSH2 0xBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE8 DUP2 PUSH2 0xAD JUMP JUMPDEST DUP2 EQ PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xE9B PUSH2 0x122 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x331 MSTORE DUP1 PUSH2 0x357 MSTORE DUP1 PUSH2 0x44A MSTORE DUP1 PUSH2 0x5F7 MSTORE POP PUSH2 0xE9B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x168C66B4 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x56A6F685 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x570421E5 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x9CFFAF6F EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xDB36EB2E EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x133 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBE SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCF PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDC SWAP2 SWAP1 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10C SWAP2 SWAP1 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH2 0x32D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0xB49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15E DUP5 DUP5 PUSH2 0x178 JUMP JUMPDEST SWAP1 POP PUSH2 0x16C DUP8 DUP8 DUP8 DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7E2FFAD5A0CF814683346FBB41A5864881A4FA97DF309F612DE87AE2B5D8BBCC DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x274 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B0 SWAP1 PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x844 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x7E2FFAD5A0CF814683346FBB41A5864881A4FA97DF309F612DE87AE2B5D8BBCC DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 DUP5 DUP5 PUSH2 0x178 JUMP JUMPDEST SWAP1 POP PUSH2 0x321 DUP8 DUP8 DUP8 DUP5 PUSH2 0x525 JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x399 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52BBBE29 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x519 SWAP2 SWAP1 PUSH2 0x86D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x546 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52BBBE29 DUP4 DUP4 PUSH1 0x1 TIMESTAMP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x655 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x683 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6A7 SWAP2 SWAP1 PUSH2 0x86D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x6C2 DUP2 PUSH2 0xE09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6D7 DUP2 PUSH2 0xE09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6EC DUP2 PUSH2 0xE20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0xE37 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x723 PUSH1 0x60 PUSH2 0xC37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x733 DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x747 DUP5 DUP3 DUP6 ADD PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x75B DUP5 DUP3 DUP6 ADD PUSH2 0x6DD JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x776 DUP2 PUSH2 0xE4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x78B DUP2 PUSH2 0xE4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7B2 DUP6 DUP3 DUP7 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x7C3 DUP6 DUP3 DUP7 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7F3 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x804 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x815 DUP9 DUP3 DUP10 ADD PUSH2 0x767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x826 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x837 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x864 DUP5 DUP3 DUP6 ADD PUSH2 0x707 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x88D DUP5 DUP3 DUP6 ADD PUSH2 0x77C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x89F DUP2 PUSH2 0xCB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8BD DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8CC DUP2 PUSH2 0xCC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8DB DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8EA DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8F9 DUP2 PUSH2 0xCDA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x914 DUP2 DUP6 PUSH2 0xC73 JUMP JUMPDEST SWAP4 POP PUSH2 0x924 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x92D DUP2 PUSH2 0xDE4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x94D DUP2 DUP6 PUSH2 0xC84 JUMP JUMPDEST SWAP4 POP PUSH2 0x95D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xDAF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x972 DUP2 PUSH2 0xD43 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x981 DUP2 PUSH2 0xD67 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x990 DUP2 PUSH2 0xD8B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x99F DUP2 PUSH2 0xD9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B2 PUSH1 0x16 DUP4 PUSH2 0xC8F JUMP JUMPDEST SWAP2 POP PUSH32 0x706F6F6C20666F72206173736574206E6F742073657400000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x9FB PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x8A5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xA0E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x8C3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xA21 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xA34 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x8C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0xA52 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x8D2 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xA65 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x987 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xA78 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x969 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xA8B PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x969 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xA9E PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0xAC3 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xAB6 DUP3 DUP3 PUSH2 0x8FF JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xACC DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xADB DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAED DUP3 DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB0D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB28 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB43 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8F0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB5E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x978 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB7D DUP2 PUSH2 0x9A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB9E DUP2 DUP8 PUSH2 0xA3A JUMP JUMPDEST SWAP1 POP PUSH2 0xBAD PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0xBBA PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x996 JUMP JUMPDEST PUSH2 0xBC7 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBEA DUP2 DUP8 PUSH2 0xA3A JUMP JUMPDEST SWAP1 POP PUSH2 0xBF9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0xC06 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0xAD2 JUMP JUMPDEST PUSH2 0xC13 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC31 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5D PUSH2 0xDE2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCAB DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBD DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xD14 DUP3 PUSH2 0xDF5 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4E DUP3 PUSH2 0xD55 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD60 DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD72 DUP3 PUSH2 0xD79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD84 DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD96 DUP3 PUSH2 0xD06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA8 DUP3 PUSH2 0xD39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDCD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDDC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xE06 JUMPI PUSH2 0xE05 PUSH2 0xDE2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0xE12 DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP2 EQ PUSH2 0xE1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xCC4 JUMP JUMPDEST DUP2 EQ PUSH2 0xE34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE40 DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP2 EQ PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE57 DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP2 EQ PUSH2 0xE62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x597CCDE6EC0D442686A234F1D1CF8F9E041D8C11A7A1E199F038AB707493 0xC0 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
              "sourceMap": "252:2905:10:-:0;;;539:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;601:14;586:30;;;;;;;;;;;;539:84;252:2905;;7:143:11;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:284::-;;275:2;263:9;254:7;250:23;246:32;243:2;;;291:1;288;281:12;243:2;334:1;359:64;415:7;406:6;395:9;391:22;359:64;:::i;:::-;349:74;;305:128;233:207;;;;:::o;446:96::-;;512:24;530:5;512:24;:::i;:::-;501:35;;491:51;;;:::o;548:126::-;;625:42;618:5;614:54;603:65;;593:81;;;:::o;680:122::-;753:24;771:5;753:24;:::i;:::-;746:5;743:35;733:2;;792:1;789;782:12;733:2;723:79;:::o;252:2905:10:-;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:16020:11",
                    "statements": [
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "59:87:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "69:29:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "91:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:12:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:20:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "69:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "134:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "107:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "107:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "107:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "37:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "45:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "53:5:11",
                            "type": ""
                          }
                        ],
                        "src": "7:139:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "215:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "225:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "240:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "234:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "234:13:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "225:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "283:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "256:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "256:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "256:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_address_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "193:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "201:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "209:5:11",
                            "type": ""
                          }
                        ],
                        "src": "152:143:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "361:77:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "371:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "386:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "380:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "380:13:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "371:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "426:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "402:23:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "402:30:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "402:30:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "339:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "347:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "355:5:11",
                            "type": ""
                          }
                        ],
                        "src": "301:137:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "507:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "517:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "532:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "526:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "526:13:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "517:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "575:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "548:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "548:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "548:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_bytes32_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "485:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "493:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "501:5:11",
                            "type": ""
                          }
                        ],
                        "src": "444:143:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "730:635:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "774:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "783:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "786:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "776:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "776:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "776:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "751:3:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "756:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "747:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "747:19:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "768:4:11",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "743:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "743:30:11"
                              },
                              "nodeType": "YulIf",
                              "src": "740:2:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "799:29:11",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "823:4:11",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocateMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "808:14:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "808:20:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "799:5:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "838:163:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "875:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "889:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "879:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "915:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "922:4:11",
                                            "type": "",
                                            "value": "0x00"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "911:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "911:16:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "headStart",
                                                "nodeType": "YulIdentifier",
                                                "src": "965:9:11"
                                              },
                                              {
                                                "name": "offset",
                                                "nodeType": "YulIdentifier",
                                                "src": "976:6:11"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "961:3:11"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "961:22:11"
                                          },
                                          {
                                            "name": "end",
                                            "nodeType": "YulIdentifier",
                                            "src": "985:3:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "abi_decode_t_bytes32_fromMemory",
                                          "nodeType": "YulIdentifier",
                                          "src": "929:31:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "929:60:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "904:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "904:86:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "904:86:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "1011:169:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "1053:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1067:2:11",
                                    "type": "",
                                    "value": "32"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "1057:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "1094:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1101:4:11",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1090:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1090:16:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "headStart",
                                                "nodeType": "YulIdentifier",
                                                "src": "1144:9:11"
                                              },
                                              {
                                                "name": "offset",
                                                "nodeType": "YulIdentifier",
                                                "src": "1155:6:11"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1140:3:11"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1140:22:11"
                                          },
                                          {
                                            "name": "end",
                                            "nodeType": "YulIdentifier",
                                            "src": "1164:3:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "abi_decode_t_address_fromMemory",
                                          "nodeType": "YulIdentifier",
                                          "src": "1108:31:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1108:60:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "1083:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1083:86:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1083:86:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "1190:168:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "1234:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1248:2:11",
                                    "type": "",
                                    "value": "64"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "1238:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "1275:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1282:4:11",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1271:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1271:16:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "headStart",
                                                "nodeType": "YulIdentifier",
                                                "src": "1322:9:11"
                                              },
                                              {
                                                "name": "offset",
                                                "nodeType": "YulIdentifier",
                                                "src": "1333:6:11"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1318:3:11"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1318:22:11"
                                          },
                                          {
                                            "name": "end",
                                            "nodeType": "YulIdentifier",
                                            "src": "1342:3:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "abi_decode_t_bool_fromMemory",
                                          "nodeType": "YulIdentifier",
                                          "src": "1289:28:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1289:57:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "1264:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1264:83:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1264:83:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_t_struct$_BalancerPool_$750_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "705:9:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "716:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "724:5:11",
                            "type": ""
                          }
                        ],
                        "src": "635:730:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1423:87:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1433:29:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1455:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1442:12:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1442:20:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "1433:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1498:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "1471:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1471:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1471:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "1401:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "1409:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "1417:5:11",
                            "type": ""
                          }
                        ],
                        "src": "1371:139:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1579:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1589:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1604:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1598:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1598:13:11"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "1589:5:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1647:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "1620:26:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1620:33:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1620:33:11"
                            }
                          ]
                        },
                        "name": "abi_decode_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "1557:6:11",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "1565:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "1573:5:11",
                            "type": ""
                          }
                        ],
                        "src": "1516:143:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1748:324:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1794:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1803:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1806:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1796:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1796:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1796:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1769:7:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1778:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1765:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1765:23:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1790:2:11",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1761:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1761:32:11"
                              },
                              "nodeType": "YulIf",
                              "src": "1758:2:11"
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "1820:117:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "1835:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1849:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "1839:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1864:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "1899:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "1910:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1895:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1895:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1919:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "1874:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1874:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1864:6:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "1947:118:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "1962:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1976:2:11",
                                    "type": "",
                                    "value": "32"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "1966:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1992:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2027:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2038:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2023:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2023:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2047:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "2002:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2002:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1992:6:11"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_addresst_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1710:9:11",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1721:7:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1733:6:11",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1741:6:11",
                            "type": ""
                          }
                        ],
                        "src": "1665:407:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2212:710:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2259:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2268:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2271:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2261:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2261:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2261:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2233:7:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2242:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2229:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2229:23:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2254:3:11",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2225:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2225:33:11"
                              },
                              "nodeType": "YulIf",
                              "src": "2222:2:11"
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "2285:117:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2300:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2314:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "2304:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2329:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2364:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2375:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2360:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2360:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2384:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "2339:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2339:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2329:6:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "2412:118:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2427:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2441:2:11",
                                    "type": "",
                                    "value": "32"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "2431:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2457:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2492:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2503:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2488:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2488:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2512:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "2467:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2467:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2457:6:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "2540:118:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2555:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2569:2:11",
                                    "type": "",
                                    "value": "64"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "2559:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2585:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2620:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2631:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2616:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2616:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2640:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "2595:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2595:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2585:6:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "2668:118:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2683:16:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2697:2:11",
                                    "type": "",
                                    "value": "96"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "2687:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2713:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2748:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2759:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2744:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2744:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2768:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "2723:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2723:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value3",
                                      "nodeType": "YulIdentifier",
                                      "src": "2713:6:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "2796:119:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2811:17:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2825:3:11",
                                    "type": "",
                                    "value": "128"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "2815:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2842:63:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "2877:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "2888:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2873:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2873:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2897:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "2852:20:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2852:53:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2842:6:11"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_addresst_addresst_uint256t_addresst_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2150:9:11",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2161:7:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2173:6:11",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "2181:6:11",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "2189:6:11",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "2197:6:11",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "2205:6:11",
                            "type": ""
                          }
                        ],
                        "src": "2078:844:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3034:236:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3080:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3089:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3092:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3082:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3082:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3082:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3055:7:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3064:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3051:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3051:23:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3076:2:11",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3047:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3047:32:11"
                              },
                              "nodeType": "YulIf",
                              "src": "3044:2:11"
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "3106:157:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "3121:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3135:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "3125:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3150:103:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "3225:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "3236:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3221:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3221:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3245:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_struct$_BalancerPool_$750_memory_ptr_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "3160:60:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3160:93:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3150:6:11"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_struct$_BalancerPool_$750_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3004:9:11",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3015:7:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3027:6:11",
                            "type": ""
                          }
                        ],
                        "src": "2928:342:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3353:207:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3399:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3408:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3411:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3401:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3401:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3401:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3374:7:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3383:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3370:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3370:23:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3395:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3366:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3366:32:11"
                              },
                              "nodeType": "YulIf",
                              "src": "3363:2:11"
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "3425:128:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "3440:15:11",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3454:1:11",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "offset",
                                      "nodeType": "YulTypedName",
                                      "src": "3444:6:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3469:74:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "3515:9:11"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "3526:6:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3511:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3511:22:11"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3535:7:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "3479:31:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3479:64:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3469:6:11"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3323:9:11",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3334:7:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3346:6:11",
                            "type": ""
                          }
                        ],
                        "src": "3276:284:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3637:61:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3654:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3685:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address_payable",
                                      "nodeType": "YulIdentifier",
                                      "src": "3659:25:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3659:32:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3647:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3647:45:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3647:45:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_address_payable_to_t_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "3625:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "3632:3:11",
                            "type": ""
                          }
                        ],
                        "src": "3566:132:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3759:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3776:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3799:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "3781:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3781:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3769:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3769:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3769:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_address_to_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "3747:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "3754:3:11",
                            "type": ""
                          }
                        ],
                        "src": "3704:108:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3883:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3900:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3923:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "3905:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3905:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3893:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3893:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3893:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_address_to_t_address_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "3871:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "3878:3:11",
                            "type": ""
                          }
                        ],
                        "src": "3818:118:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3991:50:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4008:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4028:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bool",
                                      "nodeType": "YulIdentifier",
                                      "src": "4013:14:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4013:21:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4001:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4001:34:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4001:34:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_bool_to_t_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "3979:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "3986:3:11",
                            "type": ""
                          }
                        ],
                        "src": "3942:99:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4102:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4119:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4142:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes32",
                                      "nodeType": "YulIdentifier",
                                      "src": "4124:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4124:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4112:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4112:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4112:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_bytes32_to_t_bytes32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4090:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "4097:3:11",
                            "type": ""
                          }
                        ],
                        "src": "4047:108:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4226:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4243:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4266:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes32",
                                      "nodeType": "YulIdentifier",
                                      "src": "4248:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4248:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4236:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4236:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4236:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4214:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "4221:3:11",
                            "type": ""
                          }
                        ],
                        "src": "4161:118:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4348:52:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4365:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4387:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4370:16:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4370:23:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4358:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4358:36:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4358:36:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4336:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "4343:3:11",
                            "type": ""
                          }
                        ],
                        "src": "4285:115:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4486:260:11",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4496:52:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4542:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_length_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "4510:31:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4510:38:11"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "4500:6:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4557:67:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4612:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4617:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "4564:47:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4564:60:11"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "4557:3:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4659:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4666:4:11",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4655:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4655:16:11"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4673:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4678:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4633:21:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4633:52:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4633:52:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4694:46:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4705:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "4732:6:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "round_up_to_mul_of_32",
                                      "nodeType": "YulIdentifier",
                                      "src": "4710:21:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4710:29:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4701:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4701:39:11"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "4694:3:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4467:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "4474:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "4482:3:11",
                            "type": ""
                          }
                        ],
                        "src": "4406:340:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4860:265:11",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4870:52:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4916:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_length_t_bytes_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "4884:31:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4884:38:11"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "4874:6:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4931:95:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5014:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5019:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "4938:75:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4938:88:11"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "4931:3:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5061:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5068:4:11",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5057:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5057:16:11"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5075:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5080:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5035:21:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5035:52:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5035:52:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5096:23:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5107:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5112:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5103:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5103:16:11"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "5096:3:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4841:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "4848:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "4856:3:11",
                            "type": ""
                          }
                        ],
                        "src": "4752:373:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5200:80:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5217:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5267:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "convert_t_contract$_IAsset_$133_to_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "5222:44:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5222:51:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5210:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5210:64:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5210:64:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_contract$_IAsset_$133_to_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "5188:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "5195:3:11",
                            "type": ""
                          }
                        ],
                        "src": "5131:149:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5365:80:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5382:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5432:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "convert_t_contract$_IVault_$694_to_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "5387:44:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5387:51:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5375:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5375:64:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5375:64:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_contract$_IVault_$694_to_t_address_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "5353:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "5360:3:11",
                            "type": ""
                          }
                        ],
                        "src": "5286:159:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5516:76:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5533:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5579:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "convert_t_enum$_SwapKind_$518_to_t_uint8",
                                      "nodeType": "YulIdentifier",
                                      "src": "5538:40:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5538:47:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5526:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5526:60:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5526:60:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_enum$_SwapKind_$518_to_t_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "5504:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "5511:3:11",
                            "type": ""
                          }
                        ],
                        "src": "5451:141:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5671:74:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5688:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5732:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "convert_t_rational_1_by_1_to_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "5693:38:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5693:45:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5681:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5681:58:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5681:58:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_rational_1_by_1_to_t_uint256_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "5659:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "5666:3:11",
                            "type": ""
                          }
                        ],
                        "src": "5598:147:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5897:174:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5907:74:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5973:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5978:2:11",
                                    "type": "",
                                    "value": "22"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "5914:58:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5914:67:11"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "5907:3:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "6002:3:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6007:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5998:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5998:11:11"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6011:24:11",
                                    "type": "",
                                    "value": "pool for asset not set"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5991:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5991:45:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5991:45:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6046:19:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6057:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6062:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6053:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6053:12:11"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "6046:3:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39_to_t_string_memory_ptr_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "5885:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "5893:3:11",
                            "type": ""
                          }
                        ],
                        "src": "5751:320:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6273:778:11",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6283:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6299:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6304:4:11",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6295:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6295:14:11"
                              },
                              "variables": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulTypedName",
                                  "src": "6287:4:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "6319:166:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6356:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "6386:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6393:4:11",
                                            "type": "",
                                            "value": "0x00"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6382:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6382:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "6376:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6376:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "6360:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6446:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "6464:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6469:4:11",
                                            "type": "",
                                            "value": "0x00"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6460:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6460:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_address_to_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "6412:33:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6412:63:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6412:63:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "6495:173:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6545:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "6575:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6582:4:11",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6571:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6571:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "6565:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6565:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "6549:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6629:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "6647:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6652:4:11",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6643:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6643:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_bool_to_t_bool",
                                      "nodeType": "YulIdentifier",
                                      "src": "6601:27:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6601:57:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6601:57:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "6678:185:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6718:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "6748:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6755:4:11",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6744:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6744:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "6738:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6738:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "6722:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6824:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "6842:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6847:4:11",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6838:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6838:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_address_payable_to_t_address_payable",
                                      "nodeType": "YulIdentifier",
                                      "src": "6774:49:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6774:79:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6774:79:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "6873:171:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "6921:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "6951:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6958:4:11",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6947:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6947:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "6941:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6941:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "6925:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7005:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "7023:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7028:4:11",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7019:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7019:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_bool_to_t_bool",
                                      "nodeType": "YulIdentifier",
                                      "src": "6977:27:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6977:57:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6977:57:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "6260:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "6267:3:11",
                            "type": ""
                          }
                        ],
                        "src": "6145:906:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7245:1229:11",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7255:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7271:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7276:4:11",
                                    "type": "",
                                    "value": "0xc0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7267:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7267:14:11"
                              },
                              "variables": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulTypedName",
                                  "src": "7259:4:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "7291:166:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "7328:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "7358:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7365:4:11",
                                            "type": "",
                                            "value": "0x00"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7354:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7354:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "7348:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7348:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "7332:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7418:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "7436:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7441:4:11",
                                            "type": "",
                                            "value": "0x00"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7432:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7432:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_bytes32_to_t_bytes32",
                                      "nodeType": "YulIdentifier",
                                      "src": "7384:33:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7384:63:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "7384:63:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "7467:174:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "7502:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "7532:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7539:4:11",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7528:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7528:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "7522:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7522:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "7506:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7602:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "7620:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7625:4:11",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7616:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7616:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_enum$_SwapKind_$518_to_t_uint8",
                                      "nodeType": "YulIdentifier",
                                      "src": "7558:43:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7558:73:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "7558:73:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "7651:181:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "7689:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "7719:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7726:4:11",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7715:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7715:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "7709:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7709:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "7693:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7793:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "7811:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7816:4:11",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7807:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7807:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_contract$_IAsset_$133_to_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "7745:47:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7745:77:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "7745:77:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "7842:182:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "7881:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "7911:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7918:4:11",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7907:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7907:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "7901:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7901:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "7885:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7985:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "8003:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8008:4:11",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7999:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7999:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_contract$_IAsset_$133_to_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "7937:47:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7937:77:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "7937:77:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "8034:166:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "8071:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "8101:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8108:4:11",
                                            "type": "",
                                            "value": "0x80"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8097:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8097:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "8091:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8091:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "8075:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8161:12:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "8179:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8184:4:11",
                                            "type": "",
                                            "value": "0x80"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8175:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8175:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_uint256_to_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "8127:33:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8127:63:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8127:63:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulBlock",
                              "src": "8210:237:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "8249:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "8279:5:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8286:4:11",
                                            "type": "",
                                            "value": "0xa0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8275:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8275:16:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "8269:5:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8269:23:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulTypedName",
                                      "src": "8253:12:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "8317:3:11"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8322:4:11",
                                            "type": "",
                                            "value": "0xa0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8313:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8313:14:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "tail",
                                            "nodeType": "YulIdentifier",
                                            "src": "8333:4:11"
                                          },
                                          {
                                            "name": "pos",
                                            "nodeType": "YulIdentifier",
                                            "src": "8339:3:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "8329:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8329:14:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "8306:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8306:38:11"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8306:38:11"
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "8357:79:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8417:12:11"
                                      },
                                      {
                                        "name": "tail",
                                        "nodeType": "YulIdentifier",
                                        "src": "8431:4:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                                      "nodeType": "YulIdentifier",
                                      "src": "8365:51:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8365:71:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "tail",
                                      "nodeType": "YulIdentifier",
                                      "src": "8357:4:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8457:11:11",
                              "value": {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "8464:4:11"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "8457:3:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "7224:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "7231:3:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "7240:3:11",
                            "type": ""
                          }
                        ],
                        "src": "7117:1357:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8535:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8552:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8575:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "8557:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8557:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8545:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8545:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8545:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_uint256_to_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "8523:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "8530:3:11",
                            "type": ""
                          }
                        ],
                        "src": "8480:108:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8659:53:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8676:3:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8699:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "8681:17:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8681:24:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8669:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8669:37:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8669:37:11"
                            }
                          ]
                        },
                        "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "8647:5:11",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "8654:3:11",
                            "type": ""
                          }
                        ],
                        "src": "8594:118:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8852:137:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "8863:100:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8950:6:11"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8959:3:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "8870:79:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8870:93:11"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "8863:3:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8973:10:11",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8980:3:11"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "8973:3:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "8831:3:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8837:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "8848:3:11",
                            "type": ""
                          }
                        ],
                        "src": "8718:271:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9093:124:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9103:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9115:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9126:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9111:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9111:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9103:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9183:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9196:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9207:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9192:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9192:17:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_address_to_t_address_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "9139:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9139:71:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9139:71:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9065:9:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9077:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9088:4:11",
                            "type": ""
                          }
                        ],
                        "src": "8995:222:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9321:124:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9331:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9343:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9354:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9339:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9339:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9331:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9411:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9424:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9435:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9420:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9420:17:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "9367:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9367:71:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9367:71:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9293:9:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9305:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9316:4:11",
                            "type": ""
                          }
                        ],
                        "src": "9223:222:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9547:122:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9557:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9569:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9580:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9565:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9565:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9557:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9635:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9648:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9659:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9644:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9644:17:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "9593:41:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9593:69:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9593:69:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9519:9:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9531:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9542:4:11",
                            "type": ""
                          }
                        ],
                        "src": "9451:218:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9787:138:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9797:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9809:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9820:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9805:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9805:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9797:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9891:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9904:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9915:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9900:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9900:17:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_contract$_IVault_$694_to_t_address_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "9833:57:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9833:85:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9833:85:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IVault_$694__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9759:9:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9771:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9782:4:11",
                            "type": ""
                          }
                        ],
                        "src": "9675:250:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10102:248:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10112:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10124:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10135:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10120:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10120:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10112:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10159:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10170:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10155:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10155:17:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nodeType": "YulIdentifier",
                                        "src": "10178:4:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10184:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "10174:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10174:20:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10148:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10148:47:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10148:47:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10204:139:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10338:4:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39_to_t_string_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "10212:124:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10212:131:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10204:4:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10082:9:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10097:4:11",
                            "type": ""
                          }
                        ],
                        "src": "9931:419:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10662:548:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10672:27:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10684:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10695:3:11",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10680:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10680:19:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10672:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10720:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10731:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10716:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10716:17:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nodeType": "YulIdentifier",
                                        "src": "10739:4:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10745:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "10735:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10735:20:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10709:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10709:47:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10709:47:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10765:120:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10871:6:11"
                                  },
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10880:4:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "10773:97:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10773:112:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10765:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11001:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11014:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11025:2:11",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11010:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11010:18:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "10895:105:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10895:134:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10895:134:11"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11091:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11104:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11115:3:11",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11100:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11100:19:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_rational_1_by_1_to_t_uint256_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11039:51:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11039:81:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11039:81:11"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11174:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11187:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11198:3:11",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11183:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11183:19:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11130:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11130:73:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11130:73:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_rational_1_by_1_t_uint256__to_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10610:9:11",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "10622:6:11",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "10630:6:11",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "10638:6:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "10646:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10657:4:11",
                            "type": ""
                          }
                        ],
                        "src": "10356:854:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11514:540:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11524:27:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11536:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11547:3:11",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11532:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11532:19:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11524:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11572:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11583:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11568:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11568:17:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nodeType": "YulIdentifier",
                                        "src": "11591:4:11"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11597:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "11587:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11587:20:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11561:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11561:47:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11561:47:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11617:120:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11723:6:11"
                                  },
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11732:4:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11625:97:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11625:112:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11617:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11853:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11866:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11877:2:11",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11862:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11862:18:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11747:105:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11747:134:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11747:134:11"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11935:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11948:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11959:3:11",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11944:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11944:19:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11891:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11891:73:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11891:73:11"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "12018:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12031:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12042:3:11",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12027:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12027:19:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "11974:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11974:73:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11974:73:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__to_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11462:9:11",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "11474:6:11",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "11482:6:11",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "11490:6:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "11498:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11509:4:11",
                            "type": ""
                          }
                        ],
                        "src": "11216:838:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12158:124:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12168:26:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12180:9:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12191:2:11",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12176:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12176:18:11"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12168:4:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12248:6:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12261:9:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12272:1:11",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12257:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12257:17:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                                  "nodeType": "YulIdentifier",
                                  "src": "12204:43:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12204:71:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12204:71:11"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12130:9:11",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12142:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12153:4:11",
                            "type": ""
                          }
                        ],
                        "src": "12060:222:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12328:238:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12338:19:11",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12354:2:11",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12348:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12348:9:11"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "12338:6:11"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12366:35:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12388:6:11"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "12396:4:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12384:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12384:17:11"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "12370:10:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12512:17:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error",
                                        "nodeType": "YulIdentifier",
                                        "src": "12514:11:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12514:13:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12514:13:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "12455:10:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12467:18:11",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12452:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12452:34:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "12491:10:11"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "12503:6:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12488:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12488:22:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "12449:2:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12449:62:11"
                              },
                              "nodeType": "YulIf",
                              "src": "12446:2:11"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12545:2:11",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12549:10:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12538:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12538:22:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12538:22:11"
                            }
                          ]
                        },
                        "name": "allocateMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "12312:4:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulTypedName",
                            "src": "12321:6:11",
                            "type": ""
                          }
                        ],
                        "src": "12288:278:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12630:40:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12641:22:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "12657:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12651:5:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12651:12:11"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "12641:6:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_length_t_bytes_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "12613:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "12623:6:11",
                            "type": ""
                          }
                        ],
                        "src": "12572:98:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12761:73:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "12778:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "12783:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12771:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12771:19:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12771:19:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12799:29:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "12818:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12823:4:11",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12814:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12814:14:11"
                              },
                              "variableNames": [
                                {
                                  "name": "updated_pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "12799:11:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "12733:3:11",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "12738:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "updated_pos",
                            "nodeType": "YulTypedName",
                            "src": "12749:11:11",
                            "type": ""
                          }
                        ],
                        "src": "12676:158:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12953:34:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12963:18:11",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12978:3:11"
                              },
                              "variableNames": [
                                {
                                  "name": "updated_pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "12963:11:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "12925:3:11",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "12930:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "updated_pos",
                            "nodeType": "YulTypedName",
                            "src": "12941:11:11",
                            "type": ""
                          }
                        ],
                        "src": "12840:147:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13089:73:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13106:3:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13111:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13099:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13099:19:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13099:19:11"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13127:29:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13146:3:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13151:4:11",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13142:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13142:14:11"
                              },
                              "variableNames": [
                                {
                                  "name": "updated_pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "13127:11:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "13061:3:11",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "13066:6:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "updated_pos",
                            "nodeType": "YulTypedName",
                            "src": "13077:11:11",
                            "type": ""
                          }
                        ],
                        "src": "12993:169:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13213:51:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13223:35:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13252:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "13234:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13234:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13223:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13195:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13205:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13168:96:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13323:51:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13333:35:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13362:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "13344:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13344:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13333:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13305:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13315:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13270:104:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13422:48:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13432:32:11",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "13457:5:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "13450:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13450:13:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "13443:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13443:21:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13432:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13404:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13414:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13380:90:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13521:32:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13531:16:11",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13542:5:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13531:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_bytes32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13503:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13513:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13476:77:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13603:105:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13613:89:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13628:5:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13635:66:11",
                                    "type": "",
                                    "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13624:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13624:78:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13613:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_bytes4",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13585:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13595:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13559:149:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13771:78:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13781:16:11",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13792:5:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13781:7:11"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13837:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_assert_t_enum$_SwapKind_$518",
                                  "nodeType": "YulIdentifier",
                                  "src": "13798:38:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13798:45:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13798:45:11"
                            }
                          ]
                        },
                        "name": "cleanup_t_enum$_SwapKind_$518",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13753:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13763:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13714:135:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13900:81:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13910:65:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13925:5:11"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13932:42:11",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13921:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13921:54:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "13910:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_uint160",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13882:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "13892:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13855:126:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14032:32:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14042:16:11",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14053:5:11"
                              },
                              "variableNames": [
                                {
                                  "name": "cleaned",
                                  "nodeType": "YulIdentifier",
                                  "src": "14042:7:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "cleanup_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14014:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "cleaned",
                            "nodeType": "YulTypedName",
                            "src": "14024:7:11",
                            "type": ""
                          }
                        ],
                        "src": "13987:77:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14144:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14154:64:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14212:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_contract$_IAsset_$133_to_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "14167:44:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14167:51:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14154:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_contract$_IAsset_$133_to_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14124:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14134:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14070:154:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14304:53:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14314:37:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14345:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "14327:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14327:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14314:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_contract$_IAsset_$133_to_t_uint160",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14284:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14294:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14230:127:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14437:80:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14447:64:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14505:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_contract$_IVault_$694_to_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "14460:44:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14460:51:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14447:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_contract$_IVault_$694_to_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14417:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14427:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14363:154:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14597:53:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14607:37:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14638:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint160",
                                  "nodeType": "YulIdentifier",
                                  "src": "14620:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14620:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14607:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_contract$_IVault_$694_to_t_uint160",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14577:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14587:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14523:127:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14726:65:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14736:49:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14779:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_enum$_SwapKind_$518",
                                  "nodeType": "YulIdentifier",
                                  "src": "14749:29:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14749:36:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14736:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_enum$_SwapKind_$518_to_t_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14706:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14716:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14656:135:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14865:53:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14875:37:11",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14906:5:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "14888:17:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14888:24:11"
                              },
                              "variableNames": [
                                {
                                  "name": "converted",
                                  "nodeType": "YulIdentifier",
                                  "src": "14875:9:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "convert_t_rational_1_by_1_to_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14845:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "converted",
                            "nodeType": "YulTypedName",
                            "src": "14855:9:11",
                            "type": ""
                          }
                        ],
                        "src": "14797:121:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14973:258:11",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "14983:10:11",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14992:1:11",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "14987:1:11",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15052:63:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "15077:3:11"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "15082:1:11"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15073:3:11"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15073:11:11"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15096:3:11"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15101:1:11"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "15092:3:11"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "15092:11:11"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "15086:5:11"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15086:18:11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15066:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15066:39:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15066:39:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "15013:1:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "15016:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15010:2:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15010:13:11"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "15024:19:11",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "15026:15:11",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "15035:1:11"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15038:2:11",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "15031:3:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15031:10:11"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "15026:1:11"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "15006:3:11",
                                "statements": []
                              },
                              "src": "15002:113:11"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15149:76:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "15199:3:11"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "15204:6:11"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15195:3:11"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15195:16:11"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15213:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15188:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15188:27:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15188:27:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "15130:1:11"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "15133:6:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15127:2:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15127:13:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15124:2:11"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nodeType": "YulTypedName",
                            "src": "14955:3:11",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nodeType": "YulTypedName",
                            "src": "14960:3:11",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "14965:6:11",
                            "type": ""
                          }
                        ],
                        "src": "14924:307:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15260:25:11",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "functionName": {
                                  "name": "invalid",
                                  "nodeType": "YulIdentifier",
                                  "src": "15270:7:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15270:9:11"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15270:9:11"
                            }
                          ]
                        },
                        "name": "panic_error",
                        "nodeType": "YulFunctionDefinition",
                        "src": "15237:48:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15339:54:11",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "15349:38:11",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15367:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15374:2:11",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15363:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15363:14:11"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15383:2:11",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "15379:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15379:7:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15359:3:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15359:28:11"
                              },
                              "variableNames": [
                                {
                                  "name": "result",
                                  "nodeType": "YulIdentifier",
                                  "src": "15349:6:11"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "round_up_to_mul_of_32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15322:5:11",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "result",
                            "nodeType": "YulTypedName",
                            "src": "15332:6:11",
                            "type": ""
                          }
                        ],
                        "src": "15291:102:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15454:57:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15488:17:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error",
                                        "nodeType": "YulIdentifier",
                                        "src": "15490:11:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15490:13:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15490:13:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15477:5:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15484:1:11",
                                        "type": "",
                                        "value": "2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "15474:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15474:12:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15467:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15467:20:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15464:2:11"
                            }
                          ]
                        },
                        "name": "validator_assert_t_enum$_SwapKind_$518",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15447:5:11",
                            "type": ""
                          }
                        ],
                        "src": "15399:112:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15560:79:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15617:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15626:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15629:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15619:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15619:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15619:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15583:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "15608:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "cleanup_t_address",
                                          "nodeType": "YulIdentifier",
                                          "src": "15590:17:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15590:24:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "15580:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15580:35:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15573:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15573:43:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15570:2:11"
                            }
                          ]
                        },
                        "name": "validator_revert_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15553:5:11",
                            "type": ""
                          }
                        ],
                        "src": "15517:122:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15685:76:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15739:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15748:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15751:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15741:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15741:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15741:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15708:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "15730:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "cleanup_t_bool",
                                          "nodeType": "YulIdentifier",
                                          "src": "15715:14:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15715:21:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "15705:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15705:32:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15698:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15698:40:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15695:2:11"
                            }
                          ]
                        },
                        "name": "validator_revert_t_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15678:5:11",
                            "type": ""
                          }
                        ],
                        "src": "15645:116:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15810:79:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15867:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15876:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15879:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15869:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15869:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15869:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15833:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "15858:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "cleanup_t_bytes32",
                                          "nodeType": "YulIdentifier",
                                          "src": "15840:17:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15840:24:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "15830:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15830:35:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15823:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15823:43:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15820:2:11"
                            }
                          ]
                        },
                        "name": "validator_revert_t_bytes32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15803:5:11",
                            "type": ""
                          }
                        ],
                        "src": "15767:122:11"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15938:79:11",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15995:16:11",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16004:1:11",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16007:1:11",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15997:6:11"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15997:12:11"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15997:12:11"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15961:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "15986:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "cleanup_t_uint256",
                                          "nodeType": "YulIdentifier",
                                          "src": "15968:17:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15968:24:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "15958:2:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15958:35:11"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15951:6:11"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15951:43:11"
                              },
                              "nodeType": "YulIf",
                              "src": "15948:2:11"
                            }
                          ]
                        },
                        "name": "validator_revert_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "15931:5:11",
                            "type": ""
                          }
                        ],
                        "src": "15895:122:11"
                      }
                    ]
                  },
                  "contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // struct BalancerV2Swap.BalancerPool\n    function abi_decode_t_struct$_BalancerPool_$750_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x60) { revert(0, 0) }\n        value := allocateMemory(0x60)\n\n        {\n            // poolId\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // priceOracle\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // token0isAsset\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_bool_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_BalancerPool_$750_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_BalancerPool_$750_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_contract$_IAsset_$133_to_t_address(value, pos) {\n        mstore(pos, convert_t_contract$_IAsset_$133_to_t_address(value))\n    }\n\n    function abi_encode_t_contract$_IVault_$694_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IVault_$694_to_t_address(value))\n    }\n\n    function abi_encode_t_enum$_SwapKind_$518_to_t_uint8(value, pos) {\n        mstore(pos, convert_t_enum$_SwapKind_$518_to_t_uint8(value))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint256(value))\n    }\n\n    function abi_encode_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n\n        mstore(add(pos, 0), \"pool for asset not set\")\n\n        end := add(pos, 32)\n    }\n\n    // struct IVault.FundManagement -> struct IVault.FundManagement\n    function abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x80)\n\n        {\n            // sender\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // fromInternalBalance\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // recipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_payable_to_t_address_payable(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // toInternalBalance\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x60))\n        }\n\n    }\n\n    // struct IVault.SingleSwap -> struct IVault.SingleSwap\n    function abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0xc0)\n\n        {\n            // poolId\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // kind\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_enum$_SwapKind_$518_to_t_uint8(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // assetIn\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_contract$_IAsset_$133_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // assetOut\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_contract$_IAsset_$133_to_t_address(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // userData\n\n            let memberValue0 := mload(add(value, 0xa0))\n\n            mstore(add(pos, 0xa0), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        end := tail\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_IVault_$694__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IVault_$694_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_rational_1_by_1_t_uint256__to_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_rational_1_by_1_to_t_uint256_fromStack(value2,  add(headStart, 160))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 192))\n\n    }\n\n    function abi_encode_tuple_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__to_t_struct$_SingleSwap_$545_memory_ptr_t_struct$_FundManagement_$600_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_SingleSwap_$545_memory_ptr_to_t_struct$_SingleSwap_$545_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_struct$_FundManagement_$600_memory_ptr_to_t_struct$_FundManagement_$600_memory_ptr_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 160))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 192))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocateMemory(size) -> memPtr {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error() }\n        mstore(64, newFreePtr)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_enum$_SwapKind_$518(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_SwapKind_$518(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_IAsset_$133_to_t_address(value) -> converted {\n        converted := convert_t_contract$_IAsset_$133_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IAsset_$133_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function convert_t_contract$_IVault_$694_to_t_address(value) -> converted {\n        converted := convert_t_contract$_IVault_$694_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IVault_$694_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function convert_t_enum$_SwapKind_$518_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_SwapKind_$518(value)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(value)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function panic_error() {\n        invalid()\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_assert_t_enum$_SwapKind_$518(value) {\n        if iszero(lt(value, 2)) { panic_error() }\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
                  "id": 11,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {
                "760": [
                  {
                    "length": 32,
                    "start": 817
                  },
                  {
                    "length": 32,
                    "start": 855
                  },
                  {
                    "length": 32,
                    "start": 1098
                  },
                  {
                    "length": 32,
                    "start": 1527
                  }
                ]
              },
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100625760003560e01c8063168c66b41461006757806356a6f68514610097578063570421e5146100c75780639cffaf6f146100e5578063db36eb2e14610115578063fbfa77cf14610133575b600080fd5b610081600480360381019061007c91906107cd565b610151565b60405161008e9190610c1c565b60405180910390f35b6100b160048036038101906100ac9190610791565b610178565b6040516100be9190610b13565b60405180910390f35b6100cf6102e2565b6040516100dc9190610b2e565b60405180910390f35b6100ff60048036038101906100fa91906107cd565b610306565b60405161010c9190610c1c565b60405180910390f35b61011d61032d565b60405161012a9190610af8565b60405180910390f35b61013b610355565b6040516101489190610b49565b60405180910390f35b60008061015e8484610178565b905061016c87878784610379565b91505095945050505050565b6000807f7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc836040516024016101ad9190610af8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff16836040516102349190610ae1565b600060405180830381855afa9150503d806000811461026f576040519150601f19603f3d011682016040523d82523d6000602084013e610274565b606091505b5091509150816102b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b090610b64565b60405180910390fd5b6000818060200190518101906102cf9190610844565b9050806000015194505050505092915050565b7f7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc81565b6000806103138484610178565b905061032187878784610525565b91505095945050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806040518060c0016040528084815260200160018081111561039957fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001604051806020016040528060008152508152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352bbbe2983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff426040518563ffffffff1660e01b81526004016104c79493929190610bd0565b602060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610519919061086d565b92505050949350505050565b6000806040518060c001604052808481526020016000600181111561054657fe5b81526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001604051806020016040528060008152508152509050600060405180608001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352bbbe2983836001426040518563ffffffff1660e01b81526004016106559493929190610b84565b602060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061086d565b92505050949350505050565b6000813590506106c281610e09565b92915050565b6000815190506106d781610e09565b92915050565b6000815190506106ec81610e20565b92915050565b60008151905061070181610e37565b92915050565b60006060828403121561071957600080fd5b6107236060610c37565b90506000610733848285016106f2565b6000830152506020610747848285016106c8565b602083015250604061075b848285016106dd565b60408301525092915050565b60008135905061077681610e4e565b92915050565b60008151905061078b81610e4e565b92915050565b600080604083850312156107a457600080fd5b60006107b2858286016106b3565b92505060206107c3858286016106b3565b9150509250929050565b600080600080600060a086880312156107e557600080fd5b60006107f3888289016106b3565b9550506020610804888289016106b3565b945050604061081588828901610767565b9350506060610826888289016106b3565b9250506080610837888289016106b3565b9150509295509295909350565b60006060828403121561085657600080fd5b600061086484828501610707565b91505092915050565b60006020828403121561087f57600080fd5b600061088d8482850161077c565b91505092915050565b61089f81610cb2565b82525050565b6108ae81610ca0565b82525050565b6108bd81610ca0565b82525050565b6108cc81610cc4565b82525050565b6108db81610cd0565b82525050565b6108ea81610cd0565b82525050565b6108f981610cda565b82525050565b600061090a82610c68565b6109148185610c73565b9350610924818560208601610daf565b61092d81610de4565b840191505092915050565b600061094382610c68565b61094d8185610c84565b935061095d818560208601610daf565b80840191505092915050565b61097281610d43565b82525050565b61098181610d67565b82525050565b61099081610d8b565b82525050565b61099f81610d9d565b82525050565b60006109b2601683610c8f565b91507f706f6f6c20666f72206173736574206e6f7420736574000000000000000000006000830152602082019050919050565b6080820160008201516109fb60008501826108a5565b506020820151610a0e60208501826108c3565b506040820151610a216040850182610896565b506060820151610a3460608501826108c3565b50505050565b600060c083016000830151610a5260008601826108d2565b506020830151610a656020860182610987565b506040830151610a786040860182610969565b506060830151610a8b6060860182610969565b506080830151610a9e6080860182610ac3565b5060a083015184820360a0860152610ab682826108ff565b9150508091505092915050565b610acc81610d39565b82525050565b610adb81610d39565b82525050565b6000610aed8284610938565b915081905092915050565b6000602082019050610b0d60008301846108b4565b92915050565b6000602082019050610b2860008301846108e1565b92915050565b6000602082019050610b4360008301846108f0565b92915050565b6000602082019050610b5e6000830184610978565b92915050565b60006020820190508181036000830152610b7d816109a5565b9050919050565b600060e0820190508181036000830152610b9e8187610a3a565b9050610bad60208301866109e5565b610bba60a0830185610996565b610bc760c0830184610ad2565b95945050505050565b600060e0820190508181036000830152610bea8187610a3a565b9050610bf960208301866109e5565b610c0660a0830185610ad2565b610c1360c0830184610ad2565b95945050505050565b6000602082019050610c316000830184610ad2565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610c5e57610c5d610de2565b5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610cab82610d19565b9050919050565b6000610cbd82610d19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050610d1482610df5565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d4e82610d55565b9050919050565b6000610d6082610d19565b9050919050565b6000610d7282610d79565b9050919050565b6000610d8482610d19565b9050919050565b6000610d9682610d06565b9050919050565b6000610da882610d39565b9050919050565b60005b83811015610dcd578082015181840152602081019050610db2565b83811115610ddc576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b60028110610e0657610e05610de2565b5b50565b610e1281610ca0565b8114610e1d57600080fd5b50565b610e2981610cc4565b8114610e3457600080fd5b50565b610e4081610cd0565b8114610e4b57600080fd5b50565b610e5781610d39565b8114610e6257600080fd5b5056fea26469706673582212207d597ccde6ec0d442686a234f1d1cf8f9e041d8c11a7a1e199f038ab707493c064736f6c63430007060033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x168C66B4 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x56A6F685 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x570421E5 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x9CFFAF6F EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xDB36EB2E EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x133 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x151 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBE SWAP2 SWAP1 PUSH2 0xB13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCF PUSH2 0x2E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDC SWAP2 SWAP1 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10C SWAP2 SWAP1 PUSH2 0xC1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH2 0x32D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0xB49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15E DUP5 DUP5 PUSH2 0x178 JUMP JUMPDEST SWAP1 POP PUSH2 0x16C DUP8 DUP8 DUP8 DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7E2FFAD5A0CF814683346FBB41A5864881A4FA97DF309F612DE87AE2B5D8BBCC DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x274 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B0 SWAP1 PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2CF SWAP2 SWAP1 PUSH2 0x844 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x7E2FFAD5A0CF814683346FBB41A5864881A4FA97DF309F612DE87AE2B5D8BBCC DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 DUP5 DUP5 PUSH2 0x178 JUMP JUMPDEST SWAP1 POP PUSH2 0x321 DUP8 DUP8 DUP8 DUP5 PUSH2 0x525 JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0x399 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52BBBE29 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF TIMESTAMP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x519 SWAP2 SWAP1 PUSH2 0x86D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x546 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52BBBE29 DUP4 DUP4 PUSH1 0x1 TIMESTAMP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x655 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB84 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x683 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6A7 SWAP2 SWAP1 PUSH2 0x86D JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x6C2 DUP2 PUSH2 0xE09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6D7 DUP2 PUSH2 0xE09 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6EC DUP2 PUSH2 0xE20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0xE37 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x723 PUSH1 0x60 PUSH2 0xC37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x733 DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x747 DUP5 DUP3 DUP6 ADD PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x75B DUP5 DUP3 DUP6 ADD PUSH2 0x6DD JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x776 DUP2 PUSH2 0xE4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x78B DUP2 PUSH2 0xE4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7B2 DUP6 DUP3 DUP7 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x7C3 DUP6 DUP3 DUP7 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7F3 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x804 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x815 DUP9 DUP3 DUP10 ADD PUSH2 0x767 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x826 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x837 DUP9 DUP3 DUP10 ADD PUSH2 0x6B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x864 DUP5 DUP3 DUP6 ADD PUSH2 0x707 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x88D DUP5 DUP3 DUP6 ADD PUSH2 0x77C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x89F DUP2 PUSH2 0xCB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8BD DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8CC DUP2 PUSH2 0xCC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8DB DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8EA DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8F9 DUP2 PUSH2 0xCDA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x914 DUP2 DUP6 PUSH2 0xC73 JUMP JUMPDEST SWAP4 POP PUSH2 0x924 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x92D DUP2 PUSH2 0xDE4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x94D DUP2 DUP6 PUSH2 0xC84 JUMP JUMPDEST SWAP4 POP PUSH2 0x95D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xDAF JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x972 DUP2 PUSH2 0xD43 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x981 DUP2 PUSH2 0xD67 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x990 DUP2 PUSH2 0xD8B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x99F DUP2 PUSH2 0xD9D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B2 PUSH1 0x16 DUP4 PUSH2 0xC8F JUMP JUMPDEST SWAP2 POP PUSH32 0x706F6F6C20666F72206173736574206E6F742073657400000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x9FB PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x8A5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xA0E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x8C3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xA21 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xA34 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x8C3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0xA52 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x8D2 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xA65 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x987 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xA78 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x969 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xA8B PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x969 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xA9E PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0xAC3 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0xAB6 DUP3 DUP3 PUSH2 0x8FF JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xACC DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xADB DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAED DUP3 DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB0D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB28 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB43 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8F0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB5E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x978 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB7D DUP2 PUSH2 0x9A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB9E DUP2 DUP8 PUSH2 0xA3A JUMP JUMPDEST SWAP1 POP PUSH2 0xBAD PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0xBBA PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x996 JUMP JUMPDEST PUSH2 0xBC7 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBEA DUP2 DUP8 PUSH2 0xA3A JUMP JUMPDEST SWAP1 POP PUSH2 0xBF9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0xC06 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0xAD2 JUMP JUMPDEST PUSH2 0xC13 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC31 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5D PUSH2 0xDE2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCAB DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBD DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0xD14 DUP3 PUSH2 0xDF5 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4E DUP3 PUSH2 0xD55 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD60 DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD72 DUP3 PUSH2 0xD79 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD84 DUP3 PUSH2 0xD19 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD96 DUP3 PUSH2 0xD06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA8 DUP3 PUSH2 0xD39 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDCD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDDC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xE06 JUMPI PUSH2 0xE05 PUSH2 0xDE2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0xE12 DUP2 PUSH2 0xCA0 JUMP JUMPDEST DUP2 EQ PUSH2 0xE1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xCC4 JUMP JUMPDEST DUP2 EQ PUSH2 0xE34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE40 DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP2 EQ PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xE57 DUP2 PUSH2 0xD39 JUMP JUMPDEST DUP2 EQ PUSH2 0xE62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x597CCDE6EC0D442686A234F1D1CF8F9E041D8C11A7A1E199F038AB707493 0xC0 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
              "sourceMap": "252:2905:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:356;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1546:471;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;408:88;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;658:349;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1433:107;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;503:29;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1042:356;1236:16;1264:14;1281:38;1295:11;1308:10;1281:13;:38::i;:::-;1264:55;;1336;1351:8;1361:9;1372:10;1384:6;1336:14;:55::i;:::-;1329:62;;;1042:356;;;;;;;:::o;1546:471::-;1623:14;1649:21;462:33;1719:6;1673:53;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1649:77;;1797:12;1811:17;1832:7;:18;;1851:8;1832:28;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1796:64;;;;1878:7;1870:42;;;;;;;;;;;;:::i;:::-;;;;;;;;;1923:24;1961:4;1950:32;;;;;;;;;;;;:::i;:::-;1923:59;;1999:4;:11;;;1992:18;;;;;;1546:471;;;;:::o;408:88::-;462:33;408:88;:::o;658:349::-;848:17;877:14;894:38;908:11;921:10;894:13;:38::i;:::-;877:55;;949:51;963:8;973:9;984:7;993:6;949:13;:51::i;:::-;942:58;;;658:349;;;;;;;:::o;1433:107::-;1493:7;1527:5;1512:21;;1433:107;:::o;503:29::-;;;:::o;2582:573::-;2736:7;2755:35;2793:128;;;;;;;;2824:7;2793:128;;;;2833:25;2793:128;;;;;;;;;;;;2867:8;2793:128;;;;;;2885:9;2793:128;;;;;;2897:10;2793:128;;;;;;;;;;;;;;;;;;;2755:166;;2932:34;2969:96;;;;;;;;3012:4;2969:96;;;;;;3019:5;2969:96;;;;;;3042:4;2969:96;;;;;;3050:5;2969:96;;;;;2932:133;;3083:5;:10;;;3094;3106:5;3113:17;3132:15;3083:65;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3076:72;;;;2582:573;;;;;;:::o;2023:553::-;2175:7;2194:35;2232:126;;;;;;;;2263:7;2232:126;;;;2272:24;2232:126;;;;;;;;;;;;2305:8;2232:126;;;;;;2323:9;2232:126;;;;;;2335:9;2232:126;;;;;;;;;;;;;;;;;;;2194:164;;2369:34;2406:96;;;;;;;;2449:4;2406:96;;;;;;2456:5;2406:96;;;;;;2479:4;2406:96;;;;;;2487:5;2406:96;;;;;2369:133;;2520:5;:10;;;2531;2543:5;2550:1;2553:15;2520:49;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2513:56;;;;2023:553;;;;;;:::o;7:139:11:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:143::-;;240:6;234:13;225:22;;256:33;283:5;256:33;:::i;:::-;215:80;;;;:::o;301:137::-;;386:6;380:13;371:22;;402:30;426:5;402:30;:::i;:::-;361:77;;;;:::o;444:143::-;;532:6;526:13;517:22;;548:33;575:5;548:33;:::i;:::-;507:80;;;;:::o;635:730::-;;768:4;756:9;751:3;747:19;743:30;740:2;;;786:1;783;776:12;740:2;808:20;823:4;808:20;:::i;:::-;799:29;;889:1;929:60;985:3;976:6;965:9;961:22;929:60;:::i;:::-;922:4;915:5;911:16;904:86;838:163;1067:2;1108:60;1164:3;1155:6;1144:9;1140:22;1108:60;:::i;:::-;1101:4;1094:5;1090:16;1083:86;1011:169;1248:2;1289:57;1342:3;1333:6;1322:9;1318:22;1289:57;:::i;:::-;1282:4;1275:5;1271:16;1264:83;1190:168;730:635;;;;:::o;1371:139::-;;1455:6;1442:20;1433:29;;1471:33;1498:5;1471:33;:::i;:::-;1423:87;;;;:::o;1516:143::-;;1604:6;1598:13;1589:22;;1620:33;1647:5;1620:33;:::i;:::-;1579:80;;;;:::o;1665:407::-;;;1790:2;1778:9;1769:7;1765:23;1761:32;1758:2;;;1806:1;1803;1796:12;1758:2;1849:1;1874:53;1919:7;1910:6;1899:9;1895:22;1874:53;:::i;:::-;1864:63;;1820:117;1976:2;2002:53;2047:7;2038:6;2027:9;2023:22;2002:53;:::i;:::-;1992:63;;1947:118;1748:324;;;;;:::o;2078:844::-;;;;;;2254:3;2242:9;2233:7;2229:23;2225:33;2222:2;;;2271:1;2268;2261:12;2222:2;2314:1;2339:53;2384:7;2375:6;2364:9;2360:22;2339:53;:::i;:::-;2329:63;;2285:117;2441:2;2467:53;2512:7;2503:6;2492:9;2488:22;2467:53;:::i;:::-;2457:63;;2412:118;2569:2;2595:53;2640:7;2631:6;2620:9;2616:22;2595:53;:::i;:::-;2585:63;;2540:118;2697:2;2723:53;2768:7;2759:6;2748:9;2744:22;2723:53;:::i;:::-;2713:63;;2668:118;2825:3;2852:53;2897:7;2888:6;2877:9;2873:22;2852:53;:::i;:::-;2842:63;;2796:119;2212:710;;;;;;;;:::o;2928:342::-;;3076:2;3064:9;3055:7;3051:23;3047:32;3044:2;;;3092:1;3089;3082:12;3044:2;3135:1;3160:93;3245:7;3236:6;3225:9;3221:22;3160:93;:::i;:::-;3150:103;;3106:157;3034:236;;;;:::o;3276:284::-;;3395:2;3383:9;3374:7;3370:23;3366:32;3363:2;;;3411:1;3408;3401:12;3363:2;3454:1;3479:64;3535:7;3526:6;3515:9;3511:22;3479:64;:::i;:::-;3469:74;;3425:128;3353:207;;;;:::o;3566:132::-;3659:32;3685:5;3659:32;:::i;:::-;3654:3;3647:45;3637:61;;:::o;3704:108::-;3781:24;3799:5;3781:24;:::i;:::-;3776:3;3769:37;3759:53;;:::o;3818:118::-;3905:24;3923:5;3905:24;:::i;:::-;3900:3;3893:37;3883:53;;:::o;3942:99::-;4013:21;4028:5;4013:21;:::i;:::-;4008:3;4001:34;3991:50;;:::o;4047:108::-;4124:24;4142:5;4124:24;:::i;:::-;4119:3;4112:37;4102:53;;:::o;4161:118::-;4248:24;4266:5;4248:24;:::i;:::-;4243:3;4236:37;4226:53;;:::o;4285:115::-;4370:23;4387:5;4370:23;:::i;:::-;4365:3;4358:36;4348:52;;:::o;4406:340::-;;4510:38;4542:5;4510:38;:::i;:::-;4564:60;4617:6;4612:3;4564:60;:::i;:::-;4557:67;;4633:52;4678:6;4673:3;4666:4;4659:5;4655:16;4633:52;:::i;:::-;4710:29;4732:6;4710:29;:::i;:::-;4705:3;4701:39;4694:46;;4486:260;;;;;:::o;4752:373::-;;4884:38;4916:5;4884:38;:::i;:::-;4938:88;5019:6;5014:3;4938:88;:::i;:::-;4931:95;;5035:52;5080:6;5075:3;5068:4;5061:5;5057:16;5035:52;:::i;:::-;5112:6;5107:3;5103:16;5096:23;;4860:265;;;;;:::o;5131:149::-;5222:51;5267:5;5222:51;:::i;:::-;5217:3;5210:64;5200:80;;:::o;5286:159::-;5387:51;5432:5;5387:51;:::i;:::-;5382:3;5375:64;5365:80;;:::o;5451:141::-;5538:47;5579:5;5538:47;:::i;:::-;5533:3;5526:60;5516:76;;:::o;5598:147::-;5693:45;5732:5;5693:45;:::i;:::-;5688:3;5681:58;5671:74;;:::o;5751:320::-;;5914:67;5978:2;5973:3;5914:67;:::i;:::-;5907:74;;6011:24;6007:1;6002:3;5998:11;5991:45;6062:2;6057:3;6053:12;6046:19;;5897:174;;;:::o;6145:906::-;6304:4;6299:3;6295:14;6393:4;6386:5;6382:16;6376:23;6412:63;6469:4;6464:3;6460:14;6446:12;6412:63;:::i;:::-;6319:166;6582:4;6575:5;6571:16;6565:23;6601:57;6652:4;6647:3;6643:14;6629:12;6601:57;:::i;:::-;6495:173;6755:4;6748:5;6744:16;6738:23;6774:79;6847:4;6842:3;6838:14;6824:12;6774:79;:::i;:::-;6678:185;6958:4;6951:5;6947:16;6941:23;6977:57;7028:4;7023:3;7019:14;7005:12;6977:57;:::i;:::-;6873:171;6273:778;;;:::o;7117:1357::-;;7276:4;7271:3;7267:14;7365:4;7358:5;7354:16;7348:23;7384:63;7441:4;7436:3;7432:14;7418:12;7384:63;:::i;:::-;7291:166;7539:4;7532:5;7528:16;7522:23;7558:73;7625:4;7620:3;7616:14;7602:12;7558:73;:::i;:::-;7467:174;7726:4;7719:5;7715:16;7709:23;7745:77;7816:4;7811:3;7807:14;7793:12;7745:77;:::i;:::-;7651:181;7918:4;7911:5;7907:16;7901:23;7937:77;8008:4;8003:3;7999:14;7985:12;7937:77;:::i;:::-;7842:182;8108:4;8101:5;8097:16;8091:23;8127:63;8184:4;8179:3;8175:14;8161:12;8127:63;:::i;:::-;8034:166;8286:4;8279:5;8275:16;8269:23;8339:3;8333:4;8329:14;8322:4;8317:3;8313:14;8306:38;8365:71;8431:4;8417:12;8365:71;:::i;:::-;8357:79;;8210:237;8464:4;8457:11;;7245:1229;;;;;:::o;8480:108::-;8557:24;8575:5;8557:24;:::i;:::-;8552:3;8545:37;8535:53;;:::o;8594:118::-;8681:24;8699:5;8681:24;:::i;:::-;8676:3;8669:37;8659:53;;:::o;8718:271::-;;8870:93;8959:3;8950:6;8870:93;:::i;:::-;8863:100;;8980:3;8973:10;;8852:137;;;;:::o;8995:222::-;;9126:2;9115:9;9111:18;9103:26;;9139:71;9207:1;9196:9;9192:17;9183:6;9139:71;:::i;:::-;9093:124;;;;:::o;9223:222::-;;9354:2;9343:9;9339:18;9331:26;;9367:71;9435:1;9424:9;9420:17;9411:6;9367:71;:::i;:::-;9321:124;;;;:::o;9451:218::-;;9580:2;9569:9;9565:18;9557:26;;9593:69;9659:1;9648:9;9644:17;9635:6;9593:69;:::i;:::-;9547:122;;;;:::o;9675:250::-;;9820:2;9809:9;9805:18;9797:26;;9833:85;9915:1;9904:9;9900:17;9891:6;9833:85;:::i;:::-;9787:138;;;;:::o;9931:419::-;;10135:2;10124:9;10120:18;10112:26;;10184:9;10178:4;10174:20;10170:1;10159:9;10155:17;10148:47;10212:131;10338:4;10212:131;:::i;:::-;10204:139;;10102:248;;;:::o;10356:854::-;;10695:3;10684:9;10680:19;10672:27;;10745:9;10739:4;10735:20;10731:1;10720:9;10716:17;10709:47;10773:112;10880:4;10871:6;10773:112;:::i;:::-;10765:120;;10895:134;11025:2;11014:9;11010:18;11001:6;10895:134;:::i;:::-;11039:81;11115:3;11104:9;11100:19;11091:6;11039:81;:::i;:::-;11130:73;11198:3;11187:9;11183:19;11174:6;11130:73;:::i;:::-;10662:548;;;;;;;:::o;11216:838::-;;11547:3;11536:9;11532:19;11524:27;;11597:9;11591:4;11587:20;11583:1;11572:9;11568:17;11561:47;11625:112;11732:4;11723:6;11625:112;:::i;:::-;11617:120;;11747:134;11877:2;11866:9;11862:18;11853:6;11747:134;:::i;:::-;11891:73;11959:3;11948:9;11944:19;11935:6;11891:73;:::i;:::-;11974;12042:3;12031:9;12027:19;12018:6;11974:73;:::i;:::-;11514:540;;;;;;;:::o;12060:222::-;;12191:2;12180:9;12176:18;12168:26;;12204:71;12272:1;12261:9;12257:17;12248:6;12204:71;:::i;:::-;12158:124;;;;:::o;12288:278::-;;12354:2;12348:9;12338:19;;12396:4;12388:6;12384:17;12503:6;12491:10;12488:22;12467:18;12455:10;12452:34;12449:62;12446:2;;;12514:13;;:::i;:::-;12446:2;12549:10;12545:2;12538:22;12328:238;;;;:::o;12572:98::-;;12657:5;12651:12;12641:22;;12630:40;;;:::o;12676:158::-;;12783:6;12778:3;12771:19;12823:4;12818:3;12814:14;12799:29;;12761:73;;;;:::o;12840:147::-;;12978:3;12963:18;;12953:34;;;;:::o;12993:169::-;;13111:6;13106:3;13099:19;13151:4;13146:3;13142:14;13127:29;;13089:73;;;;:::o;13168:96::-;;13234:24;13252:5;13234:24;:::i;:::-;13223:35;;13213:51;;;:::o;13270:104::-;;13344:24;13362:5;13344:24;:::i;:::-;13333:35;;13323:51;;;:::o;13380:90::-;;13457:5;13450:13;13443:21;13432:32;;13422:48;;;:::o;13476:77::-;;13542:5;13531:16;;13521:32;;;:::o;13559:149::-;;13635:66;13628:5;13624:78;13613:89;;13603:105;;;:::o;13714:135::-;;13792:5;13781:16;;13798:45;13837:5;13798:45;:::i;:::-;13771:78;;;:::o;13855:126::-;;13932:42;13925:5;13921:54;13910:65;;13900:81;;;:::o;13987:77::-;;14053:5;14042:16;;14032:32;;;:::o;14070:154::-;;14167:51;14212:5;14167:51;:::i;:::-;14154:64;;14144:80;;;:::o;14230:127::-;;14327:24;14345:5;14327:24;:::i;:::-;14314:37;;14304:53;;;:::o;14363:154::-;;14460:51;14505:5;14460:51;:::i;:::-;14447:64;;14437:80;;;:::o;14523:127::-;;14620:24;14638:5;14620:24;:::i;:::-;14607:37;;14597:53;;;:::o;14656:135::-;;14749:36;14779:5;14749:36;:::i;:::-;14736:49;;14726:65;;;:::o;14797:121::-;;14888:24;14906:5;14888:24;:::i;:::-;14875:37;;14865:53;;;:::o;14924:307::-;14992:1;15002:113;15016:6;15013:1;15010:13;15002:113;;;15101:1;15096:3;15092:11;15086:18;15082:1;15077:3;15073:11;15066:39;15038:2;15035:1;15031:10;15026:15;;15002:113;;;15133:6;15130:1;15127:13;15124:2;;;15213:1;15204:6;15199:3;15195:16;15188:27;15124:2;14973:258;;;;:::o;15237:48::-;15270:9;15291:102;;15383:2;15379:7;15374:2;15367:5;15363:14;15359:28;15349:38;;15339:54;;;:::o;15399:112::-;15484:1;15477:5;15474:12;15464:2;;15490:13;;:::i;:::-;15464:2;15454:57;:::o;15517:122::-;15590:24;15608:5;15590:24;:::i;:::-;15583:5;15580:35;15570:2;;15629:1;15626;15619:12;15570:2;15560:79;:::o;15645:116::-;15715:21;15730:5;15715:21;:::i;:::-;15708:5;15705:32;15695:2;;15751:1;15748;15741:12;15695:2;15685:76;:::o;15767:122::-;15840:24;15858:5;15840:24;:::i;:::-;15833:5;15830:35;15820:2;;15879:1;15876;15869:12;15820:2;15810:79;:::o;15895:122::-;15968:24;15986:5;15968:24;:::i;:::-;15961:5;15958:35;15948:2;;16007:1;16004;15997:12;15948:2;15938:79;:::o"
            },
            "methodIdentifiers": {
              "ASSETS_POOLS_SELECTOR()": "570421e5",
              "resolvePoolId(address,address)": "56a6f685",
              "spenderToApprove()": "db36eb2e",
              "swapAmountIn(address,address,uint256,address,address)": "9cffaf6f",
              "swapAmountOut(address,address,uint256,address,address)": "168c66b4",
              "vault()": "fbfa77cf"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ASSETS_POOLS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"resolvePoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spenderToApprove\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_siloOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"}],\"name\":\"swapAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_siloOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"}],\"name\":\"swapAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"spenderToApprove()\":{\"returns\":{\"_0\":\"address that needs to have approval to spend tokens to execute a swap\"}},\"swapAmountIn(address,address,uint256,address,address)\":{\"details\":\"swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\",\"returns\":{\"amountOut\":\"amount of _tokenOut received\"}},\"swapAmountOut(address,address,uint256,address,address)\":{\"details\":\"swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\",\"returns\":{\"amountIn\":\"amount of _tokenIn spend\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/BalancerV2Swap.sol\":\"BalancerV2Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8e651ae7a3a3652c8bb7aaa42c2cce5924310df62a923d9ec50ddb9c850d2995\",\"dweb:/ipfs/QmTHz9y18L5FD7v9GcvxGWSLJuin2KCUEYoARTgz8njce8\"]},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://978d66fba0721a1a67e29a32eaddab8d1f92ab2fb2d611724ea8d0d3c9b0e95b\",\"dweb:/ipfs/QmfG4foZvx3NDZao7d4VvGzL4Uxtk8VWNJXvgo9fiAJxZv\"]},\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c55887c89f152f00e5d65389061de28fada0e73eb5f41ebd16a3b8e65846cb1a\",\"dweb:/ipfs/QmNbVtaA44BGvKnKiCT4bEtjZu1ZD5ZJ6XrgBDh5qVEGcP\"]},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6ac013b95e9622917c5ad388dc73f0a389a76341597731746e54547aa9de8a\",\"dweb:/ipfs/QmPB8qWcRPZaDsASgQpf5a6i2YrZ4TDV3Ebi25Mn9EAdf4\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://8c7c210e449ea5d284abeaaed82e3bb3c203b57d8b3e5dfb6daedf76eaae31d1\",\"dweb:/ipfs/QmfJWLPhCG6PcHNJMLNDbAM6nd2ZVFCexCXvJ9qQmRaNbn\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://af8ab65258e294c8ba0a5feee91208789f641181d225364b02123d38d9eec7d0\",\"dweb:/ipfs/Qmb5HUXRaSrHJafwK1H8XRjcCTnAZMShTvBNhr1ovA1j2m\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://35a6ee6cb389f2675c1b64f9813862d3503524ee05067ba88172c9298d4f5e3c\",\"dweb:/ipfs/QmZGPUaoKfRigdo2U9U3695j9wX97GRSzgiK8c6zhVjjFY\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b8a27ce7efd29cb653529a2e2c6a828f5bd973b286dc166d12a8f81426bca68a\",\"dweb:/ipfs/QmPFuddzXwjK58qDG4z1n9S9Yff865yCToAStRbdfWMo1D\"]},\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e428d19d1bd18504c5c8a797b0a80515072f4d7fc278df73b9fec0ab8efe155d\",\"dweb:/ipfs/QmYeJPPQKAckBVvuhU9XXiZR4aSrVNu3WcfTmSsXJJYey3\"]},\"contracts/interfaces/ISwapper.sol\":{\"keccak256\":\"0x7cf66bb1054b9fbdca5786b38d6ceca281bd291b1b6553fa07c1e4c8f76a1eb4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://14a07c1cd56b5ed81e612ea67594c672e55ac3b8d354409dd35594907300ff00\",\"dweb:/ipfs/QmPC2opJud5obp2WLJrZuoHvii1mGYavTbthL2WDseP1VM\"]},\"contracts/liquidation/BalancerV2Swap.sol\":{\"keccak256\":\"0x7584a759980c5f95d6b5ac8a6ee8748b9677dc1b507c5d5f5b0861a4a1947449\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://752afcd60ced5aed1e9d245b881a65355dee901ae9b43080317c6ac9e91b6d99\",\"dweb:/ipfs/QmXR3NBqTtV1BgVXWt1eTxbbcjcNXSDgEk4a3RSMGi5NHH\"]}},\"version\":1}"
        }
      }
    },
    "sources": {
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol",
          "exportedSymbols": {
            "ISignaturesValidator": [
              17
            ]
          },
          "id": 18,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "713:95:0",
                "text": " @dev Interface for the SignatureValidator helper, used to support meta-transactions."
              },
              "fullyImplemented": false,
              "id": 17,
              "linearizedBaseContracts": [
                17
              ],
              "name": "ISignaturesValidator",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "846:60:0",
                    "text": " @dev Returns the EIP712 domain separator."
                  },
                  "functionSelector": "ed24911d",
                  "id": 8,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDomainSeparator",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "938:2:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 8,
                        "src": "964:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "964:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "963:9:0"
                  },
                  "scope": 17,
                  "src": "911:62:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "979:83:0",
                    "text": " @dev Returns the next nonce used by an address to sign messages."
                  },
                  "functionSelector": "90193b7c",
                  "id": 16,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getNextNonce",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 12,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "user",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "1089:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1089:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1088:14:0"
                  },
                  "returnParameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "1126:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1126:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1125:9:0"
                  },
                  "scope": 17,
                  "src": "1067:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 18,
              "src": "809:328:0"
            }
          ],
          "src": "688:450:0"
        },
        "id": 0
      },
      "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol",
          "exportedSymbols": {
            "ITemporarilyPausable": [
              36
            ]
          },
          "id": 37,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 19,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 20,
                "nodeType": "StructuredDocumentation",
                "src": "713:61:1",
                "text": " @dev Interface for the TemporarilyPausable helper."
              },
              "fullyImplemented": false,
              "id": 36,
              "linearizedBaseContracts": [
                36
              ],
              "name": "ITemporarilyPausable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 21,
                    "nodeType": "StructuredDocumentation",
                    "src": "812:83:1",
                    "text": " @dev Emitted every time the pause state changes by `_setPaused`."
                  },
                  "id": 25,
                  "name": "PausedStateChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 24,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 23,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "paused",
                        "nodeType": "VariableDeclaration",
                        "scope": 25,
                        "src": "925:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 22,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "925:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "924:13:1"
                  },
                  "src": "900:38:1"
                },
                {
                  "documentation": {
                    "id": 26,
                    "nodeType": "StructuredDocumentation",
                    "src": "944:57:1",
                    "text": " @dev Returns the current paused state."
                  },
                  "functionSelector": "1c0de051",
                  "id": 35,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPausedState",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 27,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1029:2:1"
                  },
                  "returnParameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 29,
                        "mutability": "mutable",
                        "name": "paused",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1092:11:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 28,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1092:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 31,
                        "mutability": "mutable",
                        "name": "pauseWindowEndTime",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1117:26:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 30,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1117:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 33,
                        "mutability": "mutable",
                        "name": "bufferPeriodEndTime",
                        "nodeType": "VariableDeclaration",
                        "scope": 35,
                        "src": "1157:27:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 32,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1157:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1078:116:1"
                  },
                  "scope": 36,
                  "src": "1006:189:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 37,
              "src": "775:422:1"
            }
          ],
          "src": "688:510:1"
        },
        "id": 1
      },
      "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol",
          "exportedSymbols": {
            "IERC20": [
              129
            ],
            "IWETH": [
              51
            ]
          },
          "id": 52,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 38,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:2"
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "file": "../openzeppelin/IERC20.sol",
              "id": 39,
              "nodeType": "ImportDirective",
              "scope": 52,
              "sourceUnit": 130,
              "src": "713:36:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 41,
                    "name": "IERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 129,
                    "src": "921:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$129",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 42,
                  "nodeType": "InheritanceSpecifier",
                  "src": "921:6:2"
                }
              ],
              "contractDependencies": [
                129
              ],
              "contractKind": "interface",
              "documentation": {
                "id": 40,
                "nodeType": "StructuredDocumentation",
                "src": "751:150:2",
                "text": " @dev Interface for WETH9.\n See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol"
              },
              "fullyImplemented": false,
              "id": 51,
              "linearizedBaseContracts": [
                51,
                129
              ],
              "name": "IWETH",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "d0e30db0",
                  "id": 45,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 43,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "950:2:2"
                  },
                  "returnParameters": {
                    "id": 44,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "969:0:2"
                  },
                  "scope": 51,
                  "src": "934:36:2",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "2e1a7d4d",
                  "id": 50,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 48,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 47,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "994:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 46,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "994:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "993:16:2"
                  },
                  "returnParameters": {
                    "id": 49,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1018:0:2"
                  },
                  "scope": 51,
                  "src": "976:43:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 52,
              "src": "902:119:2"
            }
          ],
          "src": "688:334:2"
        },
        "id": 2
      },
      "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
          "exportedSymbols": {
            "IERC20": [
              129
            ]
          },
          "id": 130,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 53,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:3"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 54,
                "nodeType": "StructuredDocumentation",
                "src": "58:70:3",
                "text": " @dev Interface of the ERC20 standard as defined in the EIP."
              },
              "fullyImplemented": false,
              "id": 129,
              "linearizedBaseContracts": [
                129
              ],
              "name": "IERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 55,
                    "nodeType": "StructuredDocumentation",
                    "src": "152:66:3",
                    "text": " @dev Returns the amount of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 60,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 56,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "243:2:3"
                  },
                  "returnParameters": {
                    "id": 59,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 58,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 60,
                        "src": "269:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 57,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "269:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "268:9:3"
                  },
                  "scope": 129,
                  "src": "223:55:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 61,
                    "nodeType": "StructuredDocumentation",
                    "src": "284:72:3",
                    "text": " @dev Returns the amount of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 68,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 64,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 63,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 68,
                        "src": "380:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 62,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "380:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "379:17:3"
                  },
                  "returnParameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 66,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 68,
                        "src": "420:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 65,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "420:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "419:9:3"
                  },
                  "scope": 129,
                  "src": "361:68:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 69,
                    "nodeType": "StructuredDocumentation",
                    "src": "435:209:3",
                    "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 78,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 74,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 71,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "667:17:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 70,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "667:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 73,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "686:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 72,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "686:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "666:35:3"
                  },
                  "returnParameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 78,
                        "src": "720:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "720:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "719:6:3"
                  },
                  "scope": 129,
                  "src": "649:77:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 79,
                    "nodeType": "StructuredDocumentation",
                    "src": "732:264:3",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 88,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 84,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 81,
                        "mutability": "mutable",
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "1020:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 80,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1020:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 83,
                        "mutability": "mutable",
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "1035:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1035:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1019:32:3"
                  },
                  "returnParameters": {
                    "id": 87,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 86,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 88,
                        "src": "1075:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 85,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1075:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1074:9:3"
                  },
                  "scope": 129,
                  "src": "1001:83:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 89,
                    "nodeType": "StructuredDocumentation",
                    "src": "1090:642:3",
                    "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 98,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 94,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 91,
                        "mutability": "mutable",
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 98,
                        "src": "1754:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 90,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1754:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 93,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 98,
                        "src": "1771:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1771:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1753:33:3"
                  },
                  "returnParameters": {
                    "id": 97,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 96,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 98,
                        "src": "1805:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 95,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1805:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1804:6:3"
                  },
                  "scope": 129,
                  "src": "1737:74:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 99,
                    "nodeType": "StructuredDocumentation",
                    "src": "1817:296:3",
                    "text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 110,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 106,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 101,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "2149:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2149:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 103,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "2173:17:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 102,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2173:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 105,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "2200:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 104,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2200:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2139:81:3"
                  },
                  "returnParameters": {
                    "id": 109,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 108,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "2239:4:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 107,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2239:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2238:6:3"
                  },
                  "scope": 129,
                  "src": "2118:127:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 111,
                    "nodeType": "StructuredDocumentation",
                    "src": "2251:158:3",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "id": 119,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 118,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 113,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "2429:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2429:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 115,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "2451:18:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2451:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 117,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 119,
                        "src": "2471:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2471:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2428:57:3"
                  },
                  "src": "2414:72:3"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 120,
                    "nodeType": "StructuredDocumentation",
                    "src": "2492:148:3",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "id": 128,
                  "name": "Approval",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 127,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 122,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "2660:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 121,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2660:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 124,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "2683:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 123,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2683:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 126,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 128,
                        "src": "2708:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 125,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2708:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2659:63:3"
                  },
                  "src": "2645:78:3"
                }
              ],
              "scope": 130,
              "src": "129:2596:3"
            }
          ],
          "src": "33:2693:3"
        },
        "id": 3
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol",
          "exportedSymbols": {
            "IAsset": [
              133
            ]
          },
          "id": 134,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 131,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:4"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 132,
                "nodeType": "StructuredDocumentation",
                "src": "713:309:4",
                "text": " @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n types.\n This concept is unrelated to a Pool's Asset Managers."
              },
              "fullyImplemented": true,
              "id": 133,
              "linearizedBaseContracts": [
                133
              ],
              "name": "IAsset",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 134,
              "src": "1023:73:4"
            }
          ],
          "src": "688:409:4"
        },
        "id": 4
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol",
          "exportedSymbols": {
            "IAuthorizer": [
              148
            ]
          },
          "id": 149,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 135,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:5"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 148,
              "linearizedBaseContracts": [
                148
              ],
              "name": "IAuthorizer",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 136,
                    "nodeType": "StructuredDocumentation",
                    "src": "741:121:5",
                    "text": " @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`."
                  },
                  "functionSelector": "9be2a884",
                  "id": 147,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canPerform",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 143,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 138,
                        "mutability": "mutable",
                        "name": "actionId",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "896:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 137,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "896:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 140,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "922:15:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 139,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "922:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 142,
                        "mutability": "mutable",
                        "name": "where",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "947:13:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 141,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "947:7:5",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "886:80:5"
                  },
                  "returnParameters": {
                    "id": 146,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 145,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "990:4:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 144,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "990:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "989:6:5"
                  },
                  "scope": 148,
                  "src": "867:129:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 149,
              "src": "713:285:5"
            }
          ],
          "src": "688:311:5"
        },
        "id": 5
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol",
          "exportedSymbols": {
            "IERC20": [
              129
            ],
            "IFlashLoanRecipient": [
              167
            ]
          },
          "id": 168,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 150,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:6"
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "id": 151,
              "nodeType": "ImportDirective",
              "scope": 168,
              "sourceUnit": 130,
              "src": "765:76:6",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 167,
              "linearizedBaseContracts": [
                167
              ],
              "name": "IFlashLoanRecipient",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 152,
                    "nodeType": "StructuredDocumentation",
                    "src": "879:496:6",
                    "text": " @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."
                  },
                  "functionSelector": "f04f2707",
                  "id": 166,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "receiveFlashLoan",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 164,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 155,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "1415:22:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 153,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "1415:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 154,
                          "nodeType": "ArrayTypeName",
                          "src": "1415:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 158,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "1447:24:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 156,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1447:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 157,
                          "nodeType": "ArrayTypeName",
                          "src": "1447:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 161,
                        "mutability": "mutable",
                        "name": "feeAmounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "1481:27:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 159,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1481:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 160,
                          "nodeType": "ArrayTypeName",
                          "src": "1481:9:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 163,
                        "mutability": "mutable",
                        "name": "userData",
                        "nodeType": "VariableDeclaration",
                        "scope": 166,
                        "src": "1518:21:6",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 162,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1518:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1405:140:6"
                  },
                  "returnParameters": {
                    "id": 165,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1554:0:6"
                  },
                  "scope": 167,
                  "src": "1380:175:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 168,
              "src": "843:714:6"
            }
          ],
          "src": "688:870:6"
        },
        "id": 6
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol",
          "exportedSymbols": {
            "IAsset": [
              133
            ],
            "IAuthorizer": [
              148
            ],
            "IERC20": [
              129
            ],
            "IFlashLoanRecipient": [
              167
            ],
            "IProtocolFeesCollector": [
              232
            ],
            "ISignaturesValidator": [
              17
            ],
            "ITemporarilyPausable": [
              36
            ],
            "IVault": [
              694
            ],
            "IWETH": [
              51
            ]
          },
          "id": 233,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 169,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:23:7"
            },
            {
              "id": 170,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "712:33:7"
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "id": 171,
              "nodeType": "ImportDirective",
              "scope": 233,
              "sourceUnit": 130,
              "src": "747:76:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol",
              "file": "./IVault.sol",
              "id": 172,
              "nodeType": "ImportDirective",
              "scope": 233,
              "sourceUnit": 695,
              "src": "825:22:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol",
              "file": "./IAuthorizer.sol",
              "id": 173,
              "nodeType": "ImportDirective",
              "scope": 233,
              "sourceUnit": 149,
              "src": "848:27:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 232,
              "linearizedBaseContracts": [
                232
              ],
              "name": "IProtocolFeesCollector",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "id": 177,
                  "name": "SwapFeePercentageChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 176,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 175,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newSwapFeePercentage",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "947:28:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 174,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "947:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "946:30:7"
                  },
                  "src": "916:61:7"
                },
                {
                  "anonymous": false,
                  "id": 181,
                  "name": "FlashLoanFeePercentageChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 179,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newFlashLoanFeePercentage",
                        "nodeType": "VariableDeclaration",
                        "scope": 181,
                        "src": "1018:33:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 178,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1018:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1017:35:7"
                  },
                  "src": "982:71:7"
                },
                {
                  "functionSelector": "6daefab6",
                  "id": 192,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdrawCollectedFees",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 190,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 184,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 192,
                        "src": "1099:24:7",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_calldata_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 182,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "1099:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 183,
                          "nodeType": "ArrayTypeName",
                          "src": "1099:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 187,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 192,
                        "src": "1133:26:7",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 185,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1133:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 186,
                          "nodeType": "ArrayTypeName",
                          "src": "1133:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 189,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 192,
                        "src": "1169:17:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 188,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1169:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1089:103:7"
                  },
                  "returnParameters": {
                    "id": 191,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1201:0:7"
                  },
                  "scope": 232,
                  "src": "1059:143:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "38e9922e",
                  "id": 197,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setSwapFeePercentage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 195,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 194,
                        "mutability": "mutable",
                        "name": "newSwapFeePercentage",
                        "nodeType": "VariableDeclaration",
                        "scope": 197,
                        "src": "1238:28:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 193,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1238:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1237:30:7"
                  },
                  "returnParameters": {
                    "id": 196,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1276:0:7"
                  },
                  "scope": 232,
                  "src": "1208:69:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "6b6b9f69",
                  "id": 202,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setFlashLoanFeePercentage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 200,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 199,
                        "mutability": "mutable",
                        "name": "newFlashLoanFeePercentage",
                        "nodeType": "VariableDeclaration",
                        "scope": 202,
                        "src": "1318:33:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 198,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1318:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1317:35:7"
                  },
                  "returnParameters": {
                    "id": 201,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1361:0:7"
                  },
                  "scope": 232,
                  "src": "1283:79:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "55c67628",
                  "id": 207,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getSwapFeePercentage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 203,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1397:2:7"
                  },
                  "returnParameters": {
                    "id": 206,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 205,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 207,
                        "src": "1423:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 204,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1423:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1422:9:7"
                  },
                  "scope": 232,
                  "src": "1368:64:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "d877845c",
                  "id": 212,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getFlashLoanFeePercentage",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 208,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1472:2:7"
                  },
                  "returnParameters": {
                    "id": 211,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 210,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 212,
                        "src": "1498:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 209,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1498:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1497:9:7"
                  },
                  "scope": 232,
                  "src": "1438:69:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "e42abf35",
                  "id": 221,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCollectedFeeAmounts",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 216,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 215,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 221,
                        "src": "1545:22:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 213,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "1545:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 214,
                          "nodeType": "ArrayTypeName",
                          "src": "1545:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1544:24:7"
                  },
                  "returnParameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "feeAmounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 221,
                        "src": "1592:27:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 217,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1592:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 218,
                          "nodeType": "ArrayTypeName",
                          "src": "1592:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1591:29:7"
                  },
                  "scope": 232,
                  "src": "1513:108:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "aaabadc5",
                  "id": 226,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAuthorizer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 222,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1649:2:7"
                  },
                  "returnParameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 224,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "1675:11:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAuthorizer_$148",
                          "typeString": "contract IAuthorizer"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "IAuthorizer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 148,
                          "src": "1675:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAuthorizer_$148",
                            "typeString": "contract IAuthorizer"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1674:13:7"
                  },
                  "scope": 232,
                  "src": "1627:61:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "fbfa77cf",
                  "id": 231,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "vault",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 227,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1708:2:7"
                  },
                  "returnParameters": {
                    "id": 230,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 229,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 231,
                        "src": "1734:6:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IVault_$694",
                          "typeString": "contract IVault"
                        },
                        "typeName": {
                          "id": 228,
                          "name": "IVault",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 694,
                          "src": "1734:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IVault_$694",
                            "typeString": "contract IVault"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1733:8:7"
                  },
                  "scope": 232,
                  "src": "1694:48:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 233,
              "src": "877:867:7"
            }
          ],
          "src": "688:1057:7"
        },
        "id": 7
      },
      "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol": {
        "ast": {
          "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol",
          "exportedSymbols": {
            "IAsset": [
              133
            ],
            "IAuthorizer": [
              148
            ],
            "IERC20": [
              129
            ],
            "IFlashLoanRecipient": [
              167
            ],
            "IProtocolFeesCollector": [
              232
            ],
            "ISignaturesValidator": [
              17
            ],
            "ITemporarilyPausable": [
              36
            ],
            "IVault": [
              694
            ],
            "IWETH": [
              51
            ]
          },
          "id": 695,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 234,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "688:33:8"
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol",
              "id": 235,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 130,
              "src": "723:76:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol",
              "id": 236,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 18,
              "src": "800:85:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol",
              "id": 237,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 37,
              "src": "886:85:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol",
              "file": "@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol",
              "id": 238,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 52,
              "src": "972:67:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol",
              "file": "./IAsset.sol",
              "id": 239,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 134,
              "src": "1041:22:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol",
              "file": "./IAuthorizer.sol",
              "id": 240,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 149,
              "src": "1064:27:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol",
              "file": "./IFlashLoanRecipient.sol",
              "id": 241,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 168,
              "src": "1092:35:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol",
              "file": "./IProtocolFeesCollector.sol",
              "id": 242,
              "nodeType": "ImportDirective",
              "scope": 695,
              "sourceUnit": 233,
              "src": "1128:38:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 243,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "1168:23:8"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 245,
                    "name": "ISignaturesValidator",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 17,
                    "src": "1385:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISignaturesValidator_$17",
                      "typeString": "contract ISignaturesValidator"
                    }
                  },
                  "id": 246,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1385:20:8"
                },
                {
                  "baseName": {
                    "id": 247,
                    "name": "ITemporarilyPausable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 36,
                    "src": "1407:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITemporarilyPausable_$36",
                      "typeString": "contract ITemporarilyPausable"
                    }
                  },
                  "id": 248,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1407:20:8"
                }
              ],
              "contractDependencies": [
                17,
                36
              ],
              "contractKind": "interface",
              "documentation": {
                "id": 244,
                "nodeType": "StructuredDocumentation",
                "src": "1193:171:8",
                "text": " @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n don't override one of these declarations."
              },
              "fullyImplemented": false,
              "id": 694,
              "linearizedBaseContracts": [
                694,
                36,
                17
              ],
              "name": "IVault",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 249,
                    "nodeType": "StructuredDocumentation",
                    "src": "2925:55:8",
                    "text": " @dev Returns the Vault's Authorizer."
                  },
                  "functionSelector": "aaabadc5",
                  "id": 254,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAuthorizer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 250,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3007:2:8"
                  },
                  "returnParameters": {
                    "id": 253,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 252,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "3033:11:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAuthorizer_$148",
                          "typeString": "contract IAuthorizer"
                        },
                        "typeName": {
                          "id": 251,
                          "name": "IAuthorizer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 148,
                          "src": "3033:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAuthorizer_$148",
                            "typeString": "contract IAuthorizer"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3032:13:8"
                  },
                  "scope": 694,
                  "src": "2985:61:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 255,
                    "nodeType": "StructuredDocumentation",
                    "src": "3052:175:8",
                    "text": " @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."
                  },
                  "functionSelector": "058a628f",
                  "id": 260,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setAuthorizer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 258,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 257,
                        "mutability": "mutable",
                        "name": "newAuthorizer",
                        "nodeType": "VariableDeclaration",
                        "scope": 260,
                        "src": "3255:25:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAuthorizer_$148",
                          "typeString": "contract IAuthorizer"
                        },
                        "typeName": {
                          "id": 256,
                          "name": "IAuthorizer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 148,
                          "src": "3255:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAuthorizer_$148",
                            "typeString": "contract IAuthorizer"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3254:27:8"
                  },
                  "returnParameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3290:0:8"
                  },
                  "scope": 694,
                  "src": "3232:59:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 261,
                    "nodeType": "StructuredDocumentation",
                    "src": "3297:80:8",
                    "text": " @dev Emitted when a new authorizer is set by `setAuthorizer`."
                  },
                  "id": 265,
                  "name": "AuthorizerChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 263,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAuthorizer",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "3406:33:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAuthorizer_$148",
                          "typeString": "contract IAuthorizer"
                        },
                        "typeName": {
                          "id": 262,
                          "name": "IAuthorizer",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 148,
                          "src": "3406:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAuthorizer_$148",
                            "typeString": "contract IAuthorizer"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3405:35:8"
                  },
                  "src": "3382:59:8"
                },
                {
                  "documentation": {
                    "id": 266,
                    "nodeType": "StructuredDocumentation",
                    "src": "4537:99:8",
                    "text": " @dev Returns true if `user` has approved `relayer` to act as a relayer for them."
                  },
                  "functionSelector": "fec90d72",
                  "id": 275,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasApprovedRelayer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 268,
                        "mutability": "mutable",
                        "name": "user",
                        "nodeType": "VariableDeclaration",
                        "scope": 275,
                        "src": "4669:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 267,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4669:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 270,
                        "mutability": "mutable",
                        "name": "relayer",
                        "nodeType": "VariableDeclaration",
                        "scope": 275,
                        "src": "4683:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 269,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4683:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4668:31:8"
                  },
                  "returnParameters": {
                    "id": 274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 273,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 275,
                        "src": "4723:4:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 272,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4723:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4722:6:8"
                  },
                  "scope": 694,
                  "src": "4641:88:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 276,
                    "nodeType": "StructuredDocumentation",
                    "src": "4735:178:8",
                    "text": " @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."
                  },
                  "functionSelector": "fa6e671d",
                  "id": 285,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setRelayerApproval",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 283,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 278,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 285,
                        "src": "4955:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 277,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4955:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "relayer",
                        "nodeType": "VariableDeclaration",
                        "scope": 285,
                        "src": "4979:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4979:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 282,
                        "mutability": "mutable",
                        "name": "approved",
                        "nodeType": "VariableDeclaration",
                        "scope": 285,
                        "src": "5004:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 281,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5004:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4945:78:8"
                  },
                  "returnParameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5032:0:8"
                  },
                  "scope": 694,
                  "src": "4918:115:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 286,
                    "nodeType": "StructuredDocumentation",
                    "src": "5039:104:8",
                    "text": " @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
                  },
                  "id": 294,
                  "name": "RelayerApprovalChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 293,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 288,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "relayer",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "5177:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 287,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5177:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 290,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "5202:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 289,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5202:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 292,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "approved",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "5226:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 291,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5226:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5176:64:8"
                  },
                  "src": "5148:93:8"
                },
                {
                  "documentation": {
                    "id": 295,
                    "nodeType": "StructuredDocumentation",
                    "src": "5949:78:8",
                    "text": " @dev Returns `user`'s Internal Balance for a set of tokens."
                  },
                  "functionSelector": "0f5a6efa",
                  "id": 306,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getInternalBalance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 301,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 297,
                        "mutability": "mutable",
                        "name": "user",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "6060:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6060:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 300,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "6074:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 298,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "6074:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 299,
                          "nodeType": "ArrayTypeName",
                          "src": "6074:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6059:38:8"
                  },
                  "returnParameters": {
                    "id": 305,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 304,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "6121:16:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 302,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "6121:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 303,
                          "nodeType": "ArrayTypeName",
                          "src": "6121:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6120:18:8"
                  },
                  "scope": 694,
                  "src": "6032:107:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 307,
                    "nodeType": "StructuredDocumentation",
                    "src": "6145:416:8",
                    "text": " @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
                  },
                  "functionSelector": "0e8e3e84",
                  "id": 313,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "manageUserBalance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 311,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 310,
                        "mutability": "mutable",
                        "name": "ops",
                        "nodeType": "VariableDeclaration",
                        "scope": 313,
                        "src": "6593:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$324_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IVault.UserBalanceOp[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 308,
                            "name": "UserBalanceOp",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 324,
                            "src": "6593:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserBalanceOp_$324_storage_ptr",
                              "typeString": "struct IVault.UserBalanceOp"
                            }
                          },
                          "id": 309,
                          "nodeType": "ArrayTypeName",
                          "src": "6593:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$324_storage_$dyn_storage_ptr",
                            "typeString": "struct IVault.UserBalanceOp[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6592:28:8"
                  },
                  "returnParameters": {
                    "id": 312,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6637:0:8"
                  },
                  "scope": 694,
                  "src": "6566:72:8",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.UserBalanceOp",
                  "id": 324,
                  "members": [
                    {
                      "constant": false,
                      "id": 315,
                      "mutability": "mutable",
                      "name": "kind",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6855:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_UserBalanceOpKind_$329",
                        "typeString": "enum IVault.UserBalanceOpKind"
                      },
                      "typeName": {
                        "id": 314,
                        "name": "UserBalanceOpKind",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 329,
                        "src": "6855:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_UserBalanceOpKind_$329",
                          "typeString": "enum IVault.UserBalanceOpKind"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 317,
                      "mutability": "mutable",
                      "name": "asset",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6887:12:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IAsset_$133",
                        "typeString": "contract IAsset"
                      },
                      "typeName": {
                        "id": 316,
                        "name": "IAsset",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 133,
                        "src": "6887:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAsset_$133",
                          "typeString": "contract IAsset"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 319,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6909:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 318,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6909:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 321,
                      "mutability": "mutable",
                      "name": "sender",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6933:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 320,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6933:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 323,
                      "mutability": "mutable",
                      "name": "recipient",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6957:25:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 322,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6957:15:8",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserBalanceOp",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "6824:165:8",
                  "visibility": "public"
                },
                {
                  "canonicalName": "IVault.UserBalanceOpKind",
                  "id": 329,
                  "members": [
                    {
                      "id": 325,
                      "name": "DEPOSIT_INTERNAL",
                      "nodeType": "EnumValue",
                      "src": "8627:16:8"
                    },
                    {
                      "id": 326,
                      "name": "WITHDRAW_INTERNAL",
                      "nodeType": "EnumValue",
                      "src": "8645:17:8"
                    },
                    {
                      "id": 327,
                      "name": "TRANSFER_INTERNAL",
                      "nodeType": "EnumValue",
                      "src": "8664:17:8"
                    },
                    {
                      "id": 328,
                      "name": "TRANSFER_EXTERNAL",
                      "nodeType": "EnumValue",
                      "src": "8683:17:8"
                    }
                  ],
                  "name": "UserBalanceOpKind",
                  "nodeType": "EnumDefinition",
                  "src": "8602:100:8"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 330,
                    "nodeType": "StructuredDocumentation",
                    "src": "8708:317:8",
                    "text": " @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."
                  },
                  "id": 338,
                  "name": "InternalBalanceChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 337,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 332,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "9059:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 331,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9059:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 334,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "9081:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 333,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "9081:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 336,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "delta",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "9103:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 335,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9103:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9058:58:8"
                  },
                  "src": "9030:87:8"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 339,
                    "nodeType": "StructuredDocumentation",
                    "src": "9123:131:8",
                    "text": " @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
                  },
                  "id": 349,
                  "name": "ExternalBalanceTransfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 348,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 341,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "9289:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "9289:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 343,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "9311:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9311:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 345,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "9335:17:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 344,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9335:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 347,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "9354:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 346,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9354:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9288:81:8"
                  },
                  "src": "9259:111:8"
                },
                {
                  "canonicalName": "IVault.PoolSpecialization",
                  "id": 353,
                  "members": [
                    {
                      "id": 350,
                      "name": "GENERAL",
                      "nodeType": "EnumValue",
                      "src": "10476:7:8"
                    },
                    {
                      "id": 351,
                      "name": "MINIMAL_SWAP_INFO",
                      "nodeType": "EnumValue",
                      "src": "10485:17:8"
                    },
                    {
                      "id": 352,
                      "name": "TWO_TOKEN",
                      "nodeType": "EnumValue",
                      "src": "10504:9:8"
                    }
                  ],
                  "name": "PoolSpecialization",
                  "nodeType": "EnumDefinition",
                  "src": "10450:65:8"
                },
                {
                  "documentation": {
                    "id": 354,
                    "nodeType": "StructuredDocumentation",
                    "src": "10521:702:8",
                    "text": " @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."
                  },
                  "functionSelector": "09b2760f",
                  "id": 361,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerPool",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 357,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 356,
                        "mutability": "mutable",
                        "name": "specialization",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "11250:33:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                          "typeString": "enum IVault.PoolSpecialization"
                        },
                        "typeName": {
                          "id": 355,
                          "name": "PoolSpecialization",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 353,
                          "src": "11250:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                            "typeString": "enum IVault.PoolSpecialization"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11249:35:8"
                  },
                  "returnParameters": {
                    "id": 360,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 359,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 361,
                        "src": "11303:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 358,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11303:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11302:9:8"
                  },
                  "scope": 694,
                  "src": "11228:84:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 362,
                    "nodeType": "StructuredDocumentation",
                    "src": "11318:84:8",
                    "text": " @dev Emitted when a Pool is registered by calling `registerPool`."
                  },
                  "id": 370,
                  "name": "PoolRegistered",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 369,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 364,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 370,
                        "src": "11428:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 363,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11428:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 366,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolAddress",
                        "nodeType": "VariableDeclaration",
                        "scope": 370,
                        "src": "11452:27:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 365,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11452:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 368,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "specialization",
                        "nodeType": "VariableDeclaration",
                        "scope": 370,
                        "src": "11481:33:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                          "typeString": "enum IVault.PoolSpecialization"
                        },
                        "typeName": {
                          "id": 367,
                          "name": "PoolSpecialization",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 353,
                          "src": "11481:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                            "typeString": "enum IVault.PoolSpecialization"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11427:88:8"
                  },
                  "src": "11407:109:8"
                },
                {
                  "documentation": {
                    "id": 371,
                    "nodeType": "StructuredDocumentation",
                    "src": "11522:85:8",
                    "text": " @dev Returns a Pool's contract address and specialization setting."
                  },
                  "functionSelector": "f6c00927",
                  "id": 380,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPool",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 374,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 373,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "11629:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 372,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11629:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11628:16:8"
                  },
                  "returnParameters": {
                    "id": 379,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 376,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "11668:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 375,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11668:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 378,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "11677:18:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                          "typeString": "enum IVault.PoolSpecialization"
                        },
                        "typeName": {
                          "id": 377,
                          "name": "PoolSpecialization",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 353,
                          "src": "11677:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_PoolSpecialization_$353",
                            "typeString": "enum IVault.PoolSpecialization"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11667:29:8"
                  },
                  "scope": 694,
                  "src": "11612:85:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 381,
                    "nodeType": "StructuredDocumentation",
                    "src": "11703:1422:8",
                    "text": " @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."
                  },
                  "functionSelector": "66a9c7d2",
                  "id": 392,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerTokens",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 390,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 383,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 392,
                        "src": "13163:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 382,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "13163:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 386,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 392,
                        "src": "13187:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 384,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "13187:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 385,
                          "nodeType": "ArrayTypeName",
                          "src": "13187:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 389,
                        "mutability": "mutable",
                        "name": "assetManagers",
                        "nodeType": "VariableDeclaration",
                        "scope": 392,
                        "src": "13219:30:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 387,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13219:7:8",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 388,
                          "nodeType": "ArrayTypeName",
                          "src": "13219:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13153:102:8"
                  },
                  "returnParameters": {
                    "id": 391,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13264:0:8"
                  },
                  "scope": 694,
                  "src": "13130:135:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 393,
                    "nodeType": "StructuredDocumentation",
                    "src": "13271:89:8",
                    "text": " @dev Emitted when a Pool registers tokens by calling `registerTokens`."
                  },
                  "id": 403,
                  "name": "TokensRegistered",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 402,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 395,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 403,
                        "src": "13388:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 394,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "13388:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 398,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 403,
                        "src": "13412:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 396,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "13412:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 397,
                          "nodeType": "ArrayTypeName",
                          "src": "13412:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 401,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "assetManagers",
                        "nodeType": "VariableDeclaration",
                        "scope": 403,
                        "src": "13429:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 399,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13429:7:8",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 400,
                          "nodeType": "ArrayTypeName",
                          "src": "13429:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13387:66:8"
                  },
                  "src": "13365:89:8"
                },
                {
                  "documentation": {
                    "id": 404,
                    "nodeType": "StructuredDocumentation",
                    "src": "13460:567:8",
                    "text": " @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."
                  },
                  "functionSelector": "7d3aeb96",
                  "id": 412,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deregisterTokens",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 410,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 406,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 412,
                        "src": "14058:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 405,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14058:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 409,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 412,
                        "src": "14074:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 407,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "14074:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 408,
                          "nodeType": "ArrayTypeName",
                          "src": "14074:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14057:40:8"
                  },
                  "returnParameters": {
                    "id": 411,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14106:0:8"
                  },
                  "scope": 694,
                  "src": "14032:75:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 413,
                    "nodeType": "StructuredDocumentation",
                    "src": "14113:93:8",
                    "text": " @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
                  },
                  "id": 420,
                  "name": "TokensDeregistered",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 415,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 420,
                        "src": "14236:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 414,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14236:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 418,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 420,
                        "src": "14260:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 416,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "14260:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 417,
                          "nodeType": "ArrayTypeName",
                          "src": "14260:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14235:41:8"
                  },
                  "src": "14211:66:8"
                },
                {
                  "documentation": {
                    "id": 421,
                    "nodeType": "StructuredDocumentation",
                    "src": "14283:1043:8",
                    "text": " @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."
                  },
                  "functionSelector": "b05f8e48",
                  "id": 436,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPoolTokenInfo",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 426,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 423,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15357:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 422,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "15357:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 425,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15373:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 424,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "15373:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15356:30:8"
                  },
                  "returnParameters": {
                    "id": 435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 428,
                        "mutability": "mutable",
                        "name": "cash",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15447:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 427,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15447:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 430,
                        "mutability": "mutable",
                        "name": "managed",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15473:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 429,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15473:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 432,
                        "mutability": "mutable",
                        "name": "lastChangeBlock",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15502:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 431,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15502:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 434,
                        "mutability": "mutable",
                        "name": "assetManager",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "15539:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 433,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15539:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15433:136:8"
                  },
                  "scope": 694,
                  "src": "15331:239:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 437,
                    "nodeType": "StructuredDocumentation",
                    "src": "15576:828:8",
                    "text": " @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."
                  },
                  "functionSelector": "f94d4668",
                  "id": 450,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getPoolTokens",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 440,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 439,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "16432:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 438,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "16432:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16431:16:8"
                  },
                  "returnParameters": {
                    "id": 449,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 443,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "16508:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 441,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "16508:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 442,
                          "nodeType": "ArrayTypeName",
                          "src": "16508:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 446,
                        "mutability": "mutable",
                        "name": "balances",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "16544:25:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 444,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "16544:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 445,
                          "nodeType": "ArrayTypeName",
                          "src": "16544:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 448,
                        "mutability": "mutable",
                        "name": "lastChangeBlock",
                        "nodeType": "VariableDeclaration",
                        "scope": 450,
                        "src": "16583:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 447,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "16583:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16494:122:8"
                  },
                  "scope": 694,
                  "src": "16409:208:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 451,
                    "nodeType": "StructuredDocumentation",
                    "src": "16623:2304:8",
                    "text": " @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."
                  },
                  "functionSelector": "b95cac28",
                  "id": 462,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "joinPool",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 460,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 453,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "18959:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 452,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "18959:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "18983:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18983:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 457,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "19007:17:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19007:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 459,
                        "mutability": "mutable",
                        "name": "request",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "19034:30:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_JoinPoolRequest_$473_memory_ptr",
                          "typeString": "struct IVault.JoinPoolRequest"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "JoinPoolRequest",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 473,
                          "src": "19034:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_JoinPoolRequest_$473_storage_ptr",
                            "typeString": "struct IVault.JoinPoolRequest"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18949:121:8"
                  },
                  "returnParameters": {
                    "id": 461,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19087:0:8"
                  },
                  "scope": 694,
                  "src": "18932:156:8",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.JoinPoolRequest",
                  "id": 473,
                  "members": [
                    {
                      "constant": false,
                      "id": 465,
                      "mutability": "mutable",
                      "name": "assets",
                      "nodeType": "VariableDeclaration",
                      "scope": 473,
                      "src": "19127:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                        "typeString": "contract IAsset[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 463,
                          "name": "IAsset",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 133,
                          "src": "19127:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAsset_$133",
                            "typeString": "contract IAsset"
                          }
                        },
                        "id": 464,
                        "nodeType": "ArrayTypeName",
                        "src": "19127:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                          "typeString": "contract IAsset[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 468,
                      "mutability": "mutable",
                      "name": "maxAmountsIn",
                      "nodeType": "VariableDeclaration",
                      "scope": 473,
                      "src": "19152:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 466,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19152:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 467,
                        "nodeType": "ArrayTypeName",
                        "src": "19152:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 470,
                      "mutability": "mutable",
                      "name": "userData",
                      "nodeType": "VariableDeclaration",
                      "scope": 473,
                      "src": "19184:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 469,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "19184:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 472,
                      "mutability": "mutable",
                      "name": "fromInternalBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 473,
                      "src": "19208:24:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 471,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "19208:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "JoinPoolRequest",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "19094:145:8",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 474,
                    "nodeType": "StructuredDocumentation",
                    "src": "19245:2489:8",
                    "text": " @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."
                  },
                  "functionSelector": "8bdb3913",
                  "id": 485,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "exitPool",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 483,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 476,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "21766:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 475,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "21766:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "21790:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "21790:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 480,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "21814:25:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 479,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "21814:15:8",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 482,
                        "mutability": "mutable",
                        "name": "request",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "21849:30:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ExitPoolRequest_$496_memory_ptr",
                          "typeString": "struct IVault.ExitPoolRequest"
                        },
                        "typeName": {
                          "id": 481,
                          "name": "ExitPoolRequest",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 496,
                          "src": "21849:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExitPoolRequest_$496_storage_ptr",
                            "typeString": "struct IVault.ExitPoolRequest"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21756:129:8"
                  },
                  "returnParameters": {
                    "id": 484,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "21894:0:8"
                  },
                  "scope": 694,
                  "src": "21739:156:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.ExitPoolRequest",
                  "id": 496,
                  "members": [
                    {
                      "constant": false,
                      "id": 488,
                      "mutability": "mutable",
                      "name": "assets",
                      "nodeType": "VariableDeclaration",
                      "scope": 496,
                      "src": "21934:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                        "typeString": "contract IAsset[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 486,
                          "name": "IAsset",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 133,
                          "src": "21934:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IAsset_$133",
                            "typeString": "contract IAsset"
                          }
                        },
                        "id": 487,
                        "nodeType": "ArrayTypeName",
                        "src": "21934:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                          "typeString": "contract IAsset[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 491,
                      "mutability": "mutable",
                      "name": "minAmountsOut",
                      "nodeType": "VariableDeclaration",
                      "scope": 496,
                      "src": "21959:23:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 489,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21959:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 490,
                        "nodeType": "ArrayTypeName",
                        "src": "21959:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 493,
                      "mutability": "mutable",
                      "name": "userData",
                      "nodeType": "VariableDeclaration",
                      "scope": 496,
                      "src": "21992:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 492,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "21992:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 495,
                      "mutability": "mutable",
                      "name": "toInternalBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 496,
                      "src": "22016:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 494,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "22016:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "ExitPoolRequest",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "21901:144:8",
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 497,
                    "nodeType": "StructuredDocumentation",
                    "src": "22051:116:8",
                    "text": " @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
                  },
                  "id": 512,
                  "name": "PoolBalanceChanged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 511,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 499,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "22206:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 498,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "22206:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 501,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "liquidityProvider",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "22238:33:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 500,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22238:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 504,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "22281:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 502,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "22281:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 503,
                          "nodeType": "ArrayTypeName",
                          "src": "22281:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 507,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "deltas",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "22306:15:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                          "typeString": "int256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 505,
                            "name": "int256",
                            "nodeType": "ElementaryTypeName",
                            "src": "22306:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "id": 506,
                          "nodeType": "ArrayTypeName",
                          "src": "22306:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                            "typeString": "int256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 510,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "protocolFeeAmounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 512,
                        "src": "22331:28:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 508,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "22331:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 509,
                          "nodeType": "ArrayTypeName",
                          "src": "22331:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22196:169:8"
                  },
                  "src": "22172:194:8"
                },
                {
                  "canonicalName": "IVault.PoolBalanceChangeKind",
                  "id": 515,
                  "members": [
                    {
                      "id": 513,
                      "name": "JOIN",
                      "nodeType": "EnumValue",
                      "src": "22401:4:8"
                    },
                    {
                      "id": 514,
                      "name": "EXIT",
                      "nodeType": "EnumValue",
                      "src": "22407:4:8"
                    }
                  ],
                  "name": "PoolBalanceChangeKind",
                  "nodeType": "EnumDefinition",
                  "src": "22372:41:8"
                },
                {
                  "canonicalName": "IVault.SwapKind",
                  "id": 518,
                  "members": [
                    {
                      "id": 516,
                      "name": "GIVEN_IN",
                      "nodeType": "EnumValue",
                      "src": "26014:8:8"
                    },
                    {
                      "id": 517,
                      "name": "GIVEN_OUT",
                      "nodeType": "EnumValue",
                      "src": "26024:9:8"
                    }
                  ],
                  "name": "SwapKind",
                  "nodeType": "EnumDefinition",
                  "src": "25998:37:8"
                },
                {
                  "documentation": {
                    "id": 519,
                    "nodeType": "StructuredDocumentation",
                    "src": "26041:587:8",
                    "text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
                  },
                  "functionSelector": "52bbbe29",
                  "id": 532,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swap",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 528,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 521,
                        "mutability": "mutable",
                        "name": "singleSwap",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "26656:28:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                          "typeString": "struct IVault.SingleSwap"
                        },
                        "typeName": {
                          "id": 520,
                          "name": "SingleSwap",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 545,
                          "src": "26656:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_SingleSwap_$545_storage_ptr",
                            "typeString": "struct IVault.SingleSwap"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 523,
                        "mutability": "mutable",
                        "name": "funds",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "26694:27:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                          "typeString": "struct IVault.FundManagement"
                        },
                        "typeName": {
                          "id": 522,
                          "name": "FundManagement",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 600,
                          "src": "26694:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FundManagement_$600_storage_ptr",
                            "typeString": "struct IVault.FundManagement"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 525,
                        "mutability": "mutable",
                        "name": "limit",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "26731:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 524,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26731:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "26754:16:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26754:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26646:130:8"
                  },
                  "returnParameters": {
                    "id": 531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 530,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 532,
                        "src": "26803:7:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 529,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26803:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26802:9:8"
                  },
                  "scope": 694,
                  "src": "26633:179:8",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.SingleSwap",
                  "id": 545,
                  "members": [
                    {
                      "constant": false,
                      "id": 534,
                      "mutability": "mutable",
                      "name": "poolId",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27396:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 533,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "27396:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 536,
                      "mutability": "mutable",
                      "name": "kind",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27420:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_SwapKind_$518",
                        "typeString": "enum IVault.SwapKind"
                      },
                      "typeName": {
                        "id": 535,
                        "name": "SwapKind",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 518,
                        "src": "27420:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_SwapKind_$518",
                          "typeString": "enum IVault.SwapKind"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 538,
                      "mutability": "mutable",
                      "name": "assetIn",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27443:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IAsset_$133",
                        "typeString": "contract IAsset"
                      },
                      "typeName": {
                        "id": 537,
                        "name": "IAsset",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 133,
                        "src": "27443:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAsset_$133",
                          "typeString": "contract IAsset"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 540,
                      "mutability": "mutable",
                      "name": "assetOut",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27467:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IAsset_$133",
                        "typeString": "contract IAsset"
                      },
                      "typeName": {
                        "id": 539,
                        "name": "IAsset",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 133,
                        "src": "27467:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAsset_$133",
                          "typeString": "contract IAsset"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 542,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27492:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 541,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "27492:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 544,
                      "mutability": "mutable",
                      "name": "userData",
                      "nodeType": "VariableDeclaration",
                      "scope": 545,
                      "src": "27516:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 543,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "27516:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "SingleSwap",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "27368:169:8",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 546,
                    "nodeType": "StructuredDocumentation",
                    "src": "27543:1980:8",
                    "text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
                  },
                  "functionSelector": "945bcec9",
                  "id": 567,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "batchSwap",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 562,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 548,
                        "mutability": "mutable",
                        "name": "kind",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29556:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_SwapKind_$518",
                          "typeString": "enum IVault.SwapKind"
                        },
                        "typeName": {
                          "id": 547,
                          "name": "SwapKind",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 518,
                          "src": "29556:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_SwapKind_$518",
                            "typeString": "enum IVault.SwapKind"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 551,
                        "mutability": "mutable",
                        "name": "swaps",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29579:28:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$578_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IVault.BatchSwapStep[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 549,
                            "name": "BatchSwapStep",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 578,
                            "src": "29579:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchSwapStep_$578_storage_ptr",
                              "typeString": "struct IVault.BatchSwapStep"
                            }
                          },
                          "id": 550,
                          "nodeType": "ArrayTypeName",
                          "src": "29579:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$578_storage_$dyn_storage_ptr",
                            "typeString": "struct IVault.BatchSwapStep[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 554,
                        "mutability": "mutable",
                        "name": "assets",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29617:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_memory_ptr",
                          "typeString": "contract IAsset[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 552,
                            "name": "IAsset",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 133,
                            "src": "29617:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IAsset_$133",
                              "typeString": "contract IAsset"
                            }
                          },
                          "id": 553,
                          "nodeType": "ArrayTypeName",
                          "src": "29617:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                            "typeString": "contract IAsset[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 556,
                        "mutability": "mutable",
                        "name": "funds",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29649:27:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                          "typeString": "struct IVault.FundManagement"
                        },
                        "typeName": {
                          "id": 555,
                          "name": "FundManagement",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 600,
                          "src": "29649:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FundManagement_$600_storage_ptr",
                            "typeString": "struct IVault.FundManagement"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 559,
                        "mutability": "mutable",
                        "name": "limits",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29686:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                          "typeString": "int256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 557,
                            "name": "int256",
                            "nodeType": "ElementaryTypeName",
                            "src": "29686:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "id": 558,
                          "nodeType": "ArrayTypeName",
                          "src": "29686:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                            "typeString": "int256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 561,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29718:16:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 560,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29718:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "29546:194:8"
                  },
                  "returnParameters": {
                    "id": 566,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 565,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 567,
                        "src": "29767:15:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                          "typeString": "int256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 563,
                            "name": "int256",
                            "nodeType": "ElementaryTypeName",
                            "src": "29767:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "id": 564,
                          "nodeType": "ArrayTypeName",
                          "src": "29767:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                            "typeString": "int256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "29766:17:8"
                  },
                  "scope": 694,
                  "src": "29528:256:8",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.BatchSwapStep",
                  "id": 578,
                  "members": [
                    {
                      "constant": false,
                      "id": 569,
                      "mutability": "mutable",
                      "name": "poolId",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "30377:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 568,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "30377:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 571,
                      "mutability": "mutable",
                      "name": "assetInIndex",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "30401:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 570,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30401:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 573,
                      "mutability": "mutable",
                      "name": "assetOutIndex",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "30431:21:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 572,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30431:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 575,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "30462:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 574,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30462:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 577,
                      "mutability": "mutable",
                      "name": "userData",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "30486:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 576,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "30486:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "BatchSwapStep",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "30346:161:8",
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 579,
                    "nodeType": "StructuredDocumentation",
                    "src": "30513:92:8",
                    "text": " @dev Emitted for each individual swap performed by `swap` or `batchSwap`."
                  },
                  "id": 591,
                  "name": "Swap",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 590,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 581,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 591,
                        "src": "30630:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 580,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "30630:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 583,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 591,
                        "src": "30662:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 582,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "30662:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 585,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 591,
                        "src": "30694:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 584,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "30694:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 587,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amountIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 591,
                        "src": "30727:16:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 586,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "30727:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 589,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 591,
                        "src": "30753:17:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 588,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "30753:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "30620:156:8"
                  },
                  "src": "30610:167:8"
                },
                {
                  "canonicalName": "IVault.FundManagement",
                  "id": 600,
                  "members": [
                    {
                      "constant": false,
                      "id": 593,
                      "mutability": "mutable",
                      "name": "sender",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "31740:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 592,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31740:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 595,
                      "mutability": "mutable",
                      "name": "fromInternalBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "31764:24:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 594,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "31764:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 597,
                      "mutability": "mutable",
                      "name": "recipient",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "31798:25:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 596,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31798:15:8",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 599,
                      "mutability": "mutable",
                      "name": "toInternalBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "31833:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 598,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "31833:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "FundManagement",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "31708:154:8",
                  "visibility": "public"
                },
                {
                  "documentation": {
                    "id": 601,
                    "nodeType": "StructuredDocumentation",
                    "src": "31868:1027:8",
                    "text": " @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."
                  },
                  "functionSelector": "f84d066e",
                  "id": 617,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "queryBatchSwap",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 612,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 603,
                        "mutability": "mutable",
                        "name": "kind",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "32933:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_SwapKind_$518",
                          "typeString": "enum IVault.SwapKind"
                        },
                        "typeName": {
                          "id": 602,
                          "name": "SwapKind",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 518,
                          "src": "32933:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_SwapKind_$518",
                            "typeString": "enum IVault.SwapKind"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 606,
                        "mutability": "mutable",
                        "name": "swaps",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "32956:28:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$578_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IVault.BatchSwapStep[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 604,
                            "name": "BatchSwapStep",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 578,
                            "src": "32956:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BatchSwapStep_$578_storage_ptr",
                              "typeString": "struct IVault.BatchSwapStep"
                            }
                          },
                          "id": 605,
                          "nodeType": "ArrayTypeName",
                          "src": "32956:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$578_storage_$dyn_storage_ptr",
                            "typeString": "struct IVault.BatchSwapStep[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "assets",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "32994:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_memory_ptr",
                          "typeString": "contract IAsset[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 607,
                            "name": "IAsset",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 133,
                            "src": "32994:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IAsset_$133",
                              "typeString": "contract IAsset"
                            }
                          },
                          "id": 608,
                          "nodeType": "ArrayTypeName",
                          "src": "32994:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IAsset_$133_$dyn_storage_ptr",
                            "typeString": "contract IAsset[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 611,
                        "mutability": "mutable",
                        "name": "funds",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "33026:27:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                          "typeString": "struct IVault.FundManagement"
                        },
                        "typeName": {
                          "id": 610,
                          "name": "FundManagement",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 600,
                          "src": "33026:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FundManagement_$600_storage_ptr",
                            "typeString": "struct IVault.FundManagement"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32923:136:8"
                  },
                  "returnParameters": {
                    "id": 616,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 615,
                        "mutability": "mutable",
                        "name": "assetDeltas",
                        "nodeType": "VariableDeclaration",
                        "scope": 617,
                        "src": "33078:27:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
                          "typeString": "int256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 613,
                            "name": "int256",
                            "nodeType": "ElementaryTypeName",
                            "src": "33078:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "id": 614,
                          "nodeType": "ArrayTypeName",
                          "src": "33078:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
                            "typeString": "int256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33077:29:8"
                  },
                  "scope": 694,
                  "src": "32900:207:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 618,
                    "nodeType": "StructuredDocumentation",
                    "src": "33133:604:8",
                    "text": " @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n and then reverting unless the tokens plus a proportional protocol fee have been returned.\n The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n for each token contract. `tokens` must be sorted in ascending order.\n The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n `receiveFlashLoan` call.\n Emits `FlashLoan` events."
                  },
                  "functionSelector": "5c38449e",
                  "id": 631,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "flashLoan",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 629,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 620,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "33770:29:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFlashLoanRecipient_$167",
                          "typeString": "contract IFlashLoanRecipient"
                        },
                        "typeName": {
                          "id": 619,
                          "name": "IFlashLoanRecipient",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 167,
                          "src": "33770:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IFlashLoanRecipient_$167",
                            "typeString": "contract IFlashLoanRecipient"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 623,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "33809:22:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_memory_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 621,
                            "name": "IERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 129,
                            "src": "33809:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$129",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 622,
                          "nodeType": "ArrayTypeName",
                          "src": "33809:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$129_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 626,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "33841:24:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 624,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "33841:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 625,
                          "nodeType": "ArrayTypeName",
                          "src": "33841:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 628,
                        "mutability": "mutable",
                        "name": "userData",
                        "nodeType": "VariableDeclaration",
                        "scope": 631,
                        "src": "33875:21:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 627,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "33875:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33760:142:8"
                  },
                  "returnParameters": {
                    "id": 630,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "33911:0:8"
                  },
                  "scope": 694,
                  "src": "33742:170:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 632,
                    "nodeType": "StructuredDocumentation",
                    "src": "33918:88:8",
                    "text": " @dev Emitted for each individual flash loan performed by `flashLoan`."
                  },
                  "id": 642,
                  "name": "FlashLoan",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 641,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 634,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "34027:37:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IFlashLoanRecipient_$167",
                          "typeString": "contract IFlashLoanRecipient"
                        },
                        "typeName": {
                          "id": 633,
                          "name": "IFlashLoanRecipient",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 167,
                          "src": "34027:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IFlashLoanRecipient_$167",
                            "typeString": "contract IFlashLoanRecipient"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 636,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "34066:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 635,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "34066:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 638,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "34088:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 637,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34088:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 640,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "feeAmount",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "34104:17:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 639,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34104:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34026:96:8"
                  },
                  "src": "34011:112:8"
                },
                {
                  "documentation": {
                    "id": 643,
                    "nodeType": "StructuredDocumentation",
                    "src": "35119:434:8",
                    "text": " @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
                  },
                  "functionSelector": "e6c46092",
                  "id": 649,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "managePoolBalance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 647,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 646,
                        "mutability": "mutable",
                        "name": "ops",
                        "nodeType": "VariableDeclaration",
                        "scope": 649,
                        "src": "35585:26:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$658_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct IVault.PoolBalanceOp[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 644,
                            "name": "PoolBalanceOp",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 658,
                            "src": "35585:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolBalanceOp_$658_storage_ptr",
                              "typeString": "struct IVault.PoolBalanceOp"
                            }
                          },
                          "id": 645,
                          "nodeType": "ArrayTypeName",
                          "src": "35585:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$658_storage_$dyn_storage_ptr",
                            "typeString": "struct IVault.PoolBalanceOp[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35584:28:8"
                  },
                  "returnParameters": {
                    "id": 648,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "35621:0:8"
                  },
                  "scope": 694,
                  "src": "35558:64:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "canonicalName": "IVault.PoolBalanceOp",
                  "id": 658,
                  "members": [
                    {
                      "constant": false,
                      "id": 651,
                      "mutability": "mutable",
                      "name": "kind",
                      "nodeType": "VariableDeclaration",
                      "scope": 658,
                      "src": "35659:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_PoolBalanceOpKind_$662",
                        "typeString": "enum IVault.PoolBalanceOpKind"
                      },
                      "typeName": {
                        "id": 650,
                        "name": "PoolBalanceOpKind",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 662,
                        "src": "35659:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_PoolBalanceOpKind_$662",
                          "typeString": "enum IVault.PoolBalanceOpKind"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 653,
                      "mutability": "mutable",
                      "name": "poolId",
                      "nodeType": "VariableDeclaration",
                      "scope": 658,
                      "src": "35691:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 652,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "35691:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 655,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 658,
                      "src": "35715:12:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$129",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 654,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 129,
                        "src": "35715:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 657,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 658,
                      "src": "35737:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 656,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "35737:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "PoolBalanceOp",
                  "nodeType": "StructDefinition",
                  "scope": 694,
                  "src": "35628:130:8",
                  "visibility": "public"
                },
                {
                  "canonicalName": "IVault.PoolBalanceOpKind",
                  "id": 662,
                  "members": [
                    {
                      "id": 659,
                      "name": "WITHDRAW",
                      "nodeType": "EnumValue",
                      "src": "36280:8:8"
                    },
                    {
                      "id": 660,
                      "name": "DEPOSIT",
                      "nodeType": "EnumValue",
                      "src": "36290:7:8"
                    },
                    {
                      "id": 661,
                      "name": "UPDATE",
                      "nodeType": "EnumValue",
                      "src": "36299:6:8"
                    }
                  ],
                  "name": "PoolBalanceOpKind",
                  "nodeType": "EnumDefinition",
                  "src": "36255:52:8"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 663,
                    "nodeType": "StructuredDocumentation",
                    "src": "36313:109:8",
                    "text": " @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
                  },
                  "id": 675,
                  "name": "PoolBalanceManaged",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 674,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 665,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 675,
                        "src": "36461:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 664,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "36461:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 667,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "assetManager",
                        "nodeType": "VariableDeclaration",
                        "scope": 675,
                        "src": "36493:28:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 666,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "36493:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 669,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nodeType": "VariableDeclaration",
                        "scope": 675,
                        "src": "36531:20:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$129",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 668,
                          "name": "IERC20",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 129,
                          "src": "36531:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$129",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 671,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "cashDelta",
                        "nodeType": "VariableDeclaration",
                        "scope": 675,
                        "src": "36561:16:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 670,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36561:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 673,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "managedDelta",
                        "nodeType": "VariableDeclaration",
                        "scope": 675,
                        "src": "36587:19:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 672,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36587:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "36451:161:8"
                  },
                  "src": "36427:186:8"
                },
                {
                  "documentation": {
                    "id": 676,
                    "nodeType": "StructuredDocumentation",
                    "src": "37490:64:8",
                    "text": " @dev Returns the current protocol fee module."
                  },
                  "functionSelector": "d2946c2b",
                  "id": 681,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getProtocolFeesCollector",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 677,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "37592:2:8"
                  },
                  "returnParameters": {
                    "id": 680,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 679,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 681,
                        "src": "37618:22:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProtocolFeesCollector_$232",
                          "typeString": "contract IProtocolFeesCollector"
                        },
                        "typeName": {
                          "id": 678,
                          "name": "IProtocolFeesCollector",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 232,
                          "src": "37618:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IProtocolFeesCollector_$232",
                            "typeString": "contract IProtocolFeesCollector"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "37617:24:8"
                  },
                  "scope": 694,
                  "src": "37559:83:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 682,
                    "nodeType": "StructuredDocumentation",
                    "src": "37648:635:8",
                    "text": " @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."
                  },
                  "functionSelector": "16c38b3c",
                  "id": 687,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setPaused",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 684,
                        "mutability": "mutable",
                        "name": "paused",
                        "nodeType": "VariableDeclaration",
                        "scope": 687,
                        "src": "38307:11:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "38307:4:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38306:13:8"
                  },
                  "returnParameters": {
                    "id": 686,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38328:0:8"
                  },
                  "scope": 694,
                  "src": "38288:41:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 688,
                    "nodeType": "StructuredDocumentation",
                    "src": "38335:58:8",
                    "text": " @dev Returns the Vault's WETH instance."
                  },
                  "functionSelector": "ad5c4648",
                  "id": 693,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "WETH",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 689,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38411:2:8"
                  },
                  "returnParameters": {
                    "id": 692,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 691,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 693,
                        "src": "38437:5:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IWETH_$51",
                          "typeString": "contract IWETH"
                        },
                        "typeName": {
                          "id": 690,
                          "name": "IWETH",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 51,
                          "src": "38437:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IWETH_$51",
                            "typeString": "contract IWETH"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38436:7:8"
                  },
                  "scope": 694,
                  "src": "38398:46:8",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 695,
              "src": "1365:37138:8"
            }
          ],
          "src": "688:37816:8"
        },
        "id": 8
      },
      "contracts/interfaces/ISwapper.sol": {
        "ast": {
          "absolutePath": "contracts/interfaces/ISwapper.sol",
          "exportedSymbols": {
            "ISwapper": [
              735
            ]
          },
          "id": 736,
          "license": "BUSL-1.1",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 696,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "37:31:9"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 735,
              "linearizedBaseContracts": [
                735
              ],
              "name": "ISwapper",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 697,
                    "nodeType": "StructuredDocumentation",
                    "src": "95:140:9",
                    "text": "@dev swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\n @return amountOut amount of _tokenOut received"
                  },
                  "functionSelector": "9cffaf6f",
                  "id": 712,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swapAmountIn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 708,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 699,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "271:16:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 698,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "271:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 701,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "297:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 700,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "297:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 703,
                        "mutability": "mutable",
                        "name": "_amountIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "324:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 702,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "324:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 705,
                        "mutability": "mutable",
                        "name": "_siloOracle",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "351:19:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 704,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "351:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 707,
                        "mutability": "mutable",
                        "name": "_siloAsset",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "380:18:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 706,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "380:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "261:143:9"
                  },
                  "returnParameters": {
                    "id": 711,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 710,
                        "mutability": "mutable",
                        "name": "amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 712,
                        "src": "423:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 709,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "423:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "422:19:9"
                  },
                  "scope": 735,
                  "src": "240:202:9",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 713,
                    "nodeType": "StructuredDocumentation",
                    "src": "448:136:9",
                    "text": "@dev swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\n @return amountIn amount of _tokenIn spend"
                  },
                  "functionSelector": "168c66b4",
                  "id": 728,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swapAmountOut",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 724,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 715,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "621:16:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 714,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "621:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 717,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "647:17:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 716,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "647:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 719,
                        "mutability": "mutable",
                        "name": "_amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "674:18:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 718,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "674:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 721,
                        "mutability": "mutable",
                        "name": "_siloOracle",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "702:19:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "702:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 723,
                        "mutability": "mutable",
                        "name": "_siloAsset",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "731:18:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 722,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "731:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "611:144:9"
                  },
                  "returnParameters": {
                    "id": 727,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 726,
                        "mutability": "mutable",
                        "name": "amountIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "774:16:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 725,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "774:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "773:18:9"
                  },
                  "scope": 735,
                  "src": "589:203:9",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 729,
                    "nodeType": "StructuredDocumentation",
                    "src": "798:81:9",
                    "text": "@return address that needs to have approval to spend tokens to execute a swap"
                  },
                  "functionSelector": "db36eb2e",
                  "id": 734,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "spenderToApprove",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 730,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "909:2:9"
                  },
                  "returnParameters": {
                    "id": 733,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 732,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 734,
                        "src": "935:7:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 731,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "935:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "934:9:9"
                  },
                  "scope": 735,
                  "src": "884:60:9",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 736,
              "src": "70:876:9"
            }
          ],
          "src": "37:910:9"
        },
        "id": 9
      },
      "contracts/liquidation/BalancerV2Swap.sol": {
        "ast": {
          "absolutePath": "contracts/liquidation/BalancerV2Swap.sol",
          "exportedSymbols": {
            "BalancerV2Swap": [
              1026
            ],
            "IAsset": [
              133
            ],
            "IAuthorizer": [
              148
            ],
            "IERC20": [
              129
            ],
            "IFlashLoanRecipient": [
              167
            ],
            "IProtocolFeesCollector": [
              232
            ],
            "ISignaturesValidator": [
              17
            ],
            "ISwapper": [
              735
            ],
            "ITemporarilyPausable": [
              36
            ],
            "IVault": [
              694
            ],
            "IWETH": [
              51
            ]
          },
          "id": 1027,
          "license": "BUSL-1.1",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 737,
              "literals": [
                "solidity",
                "0.7",
                ".6"
              ],
              "nodeType": "PragmaDirective",
              "src": "37:22:10"
            },
            {
              "id": 738,
              "literals": [
                "abicoder",
                "v2"
              ],
              "nodeType": "PragmaDirective",
              "src": "60:19:10"
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol",
              "file": "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol",
              "id": 739,
              "nodeType": "ImportDirective",
              "scope": 1027,
              "sourceUnit": 695,
              "src": "81:65:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol",
              "file": "@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol",
              "id": 740,
              "nodeType": "ImportDirective",
              "scope": 1027,
              "sourceUnit": 134,
              "src": "147:65:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/interfaces/ISwapper.sol",
              "file": "../interfaces/ISwapper.sol",
              "id": 741,
              "nodeType": "ImportDirective",
              "scope": 1027,
              "sourceUnit": 736,
              "src": "213:36:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 742,
                    "name": "ISwapper",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 735,
                    "src": "279:8:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISwapper_$735",
                      "typeString": "contract ISwapper"
                    }
                  },
                  "id": 743,
                  "nodeType": "InheritanceSpecifier",
                  "src": "279:8:10"
                }
              ],
              "contractDependencies": [
                735
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1026,
              "linearizedBaseContracts": [
                1026,
                735
              ],
              "name": "BalancerV2Swap",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "BalancerV2Swap.BalancerPool",
                  "id": 750,
                  "members": [
                    {
                      "constant": false,
                      "id": 745,
                      "mutability": "mutable",
                      "name": "poolId",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "324:14:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 744,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "324:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 747,
                      "mutability": "mutable",
                      "name": "priceOracle",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "348:19:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 746,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "348:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 749,
                      "mutability": "mutable",
                      "name": "token0isAsset",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "377:18:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 748,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "377:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "BalancerPool",
                  "nodeType": "StructDefinition",
                  "scope": 1026,
                  "src": "294:108:10",
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "570421e5",
                  "id": 758,
                  "mutability": "constant",
                  "name": "ASSETS_POOLS_SELECTOR",
                  "nodeType": "VariableDeclaration",
                  "scope": 1026,
                  "src": "408:88:10",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 751,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "617373657473506f6f6c73286164647265737329",
                            "id": 755,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "472:22:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc",
                              "typeString": "literal_string \"assetsPools(address)\""
                            },
                            "value": "assetsPools(address)"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_7e2ffad5a0cf814683346fbb41a5864881a4fa97df309f612de87ae2b5d8bbcc",
                              "typeString": "literal_string \"assetsPools(address)\""
                            }
                          ],
                          "id": 754,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "462:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "462:33:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 753,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "455:6:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes4_$",
                        "typeString": "type(bytes4)"
                      },
                      "typeName": {
                        "id": 752,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "455:6:10",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "455:41:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "fbfa77cf",
                  "id": 760,
                  "mutability": "immutable",
                  "name": "vault",
                  "nodeType": "VariableDeclaration",
                  "scope": 1026,
                  "src": "503:29:10",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IVault_$694",
                    "typeString": "contract IVault"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "IVault",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 694,
                    "src": "503:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IVault_$694",
                      "typeString": "contract IVault"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 771,
                    "nodeType": "Block",
                    "src": "576:47:10",
                    "statements": [
                      {
                        "expression": {
                          "id": 769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 765,
                            "name": "vault",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "586:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IVault_$694",
                              "typeString": "contract IVault"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 767,
                                "name": "_balancerVault",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 762,
                                "src": "601:14:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 766,
                              "name": "IVault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "594:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                "typeString": "type(contract IVault)"
                              }
                            },
                            "id": 768,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "594:22:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IVault_$694",
                              "typeString": "contract IVault"
                            }
                          },
                          "src": "586:30:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IVault_$694",
                            "typeString": "contract IVault"
                          }
                        },
                        "id": 770,
                        "nodeType": "ExpressionStatement",
                        "src": "586:30:10"
                      }
                    ]
                  },
                  "id": 772,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 762,
                        "mutability": "mutable",
                        "name": "_balancerVault",
                        "nodeType": "VariableDeclaration",
                        "scope": 772,
                        "src": "552:22:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 761,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "552:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "551:24:10"
                  },
                  "returnParameters": {
                    "id": 764,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "576:0:10"
                  },
                  "scope": 1026,
                  "src": "539:84:10",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    712
                  ],
                  "body": {
                    "id": 803,
                    "nodeType": "Block",
                    "src": "867:140:10",
                    "statements": [
                      {
                        "assignments": [
                          790
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 790,
                            "mutability": "mutable",
                            "name": "poolId",
                            "nodeType": "VariableDeclaration",
                            "scope": 803,
                            "src": "877:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 789,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "877:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 795,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 792,
                              "name": "_siloOracle",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "908:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 793,
                              "name": "_siloAsset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 783,
                              "src": "921:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 791,
                            "name": "resolvePoolId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 893,
                            "src": "894:13:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bytes32_$",
                              "typeString": "function (address,address) view returns (bytes32)"
                            }
                          },
                          "id": 794,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "894:38:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "877:55:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 797,
                              "name": "_tokenIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 775,
                              "src": "963:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 798,
                              "name": "_tokenOut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 777,
                              "src": "973:9:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 799,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 779,
                              "src": "984:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 800,
                              "name": "poolId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 790,
                              "src": "993:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 796,
                            "name": "_swapAmountIn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 957,
                            "src": "949:13:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$",
                              "typeString": "function (address,address,uint256,bytes32) returns (uint256)"
                            }
                          },
                          "id": 801,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "949:51:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 788,
                        "id": 802,
                        "nodeType": "Return",
                        "src": "942:58:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 773,
                    "nodeType": "StructuredDocumentation",
                    "src": "629:24:10",
                    "text": "@inheritdoc ISwapper"
                  },
                  "functionSelector": "9cffaf6f",
                  "id": 804,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swapAmountIn",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 785,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "830:8:10"
                  },
                  "parameters": {
                    "id": 784,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 775,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "689:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 774,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "689:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 777,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "715:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 776,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "715:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "742:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 778,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "742:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 781,
                        "mutability": "mutable",
                        "name": "_siloOracle",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "767:19:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 780,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "767:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 783,
                        "mutability": "mutable",
                        "name": "_siloAsset",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "796:18:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 782,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "796:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "679:141:10"
                  },
                  "returnParameters": {
                    "id": 788,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 787,
                        "mutability": "mutable",
                        "name": "amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 804,
                        "src": "848:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 786,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "848:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "847:19:10"
                  },
                  "scope": 1026,
                  "src": "658:349:10",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    728
                  ],
                  "body": {
                    "id": 835,
                    "nodeType": "Block",
                    "src": "1254:144:10",
                    "statements": [
                      {
                        "assignments": [
                          822
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 822,
                            "mutability": "mutable",
                            "name": "poolId",
                            "nodeType": "VariableDeclaration",
                            "scope": 835,
                            "src": "1264:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 821,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1264:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 827,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 824,
                              "name": "_siloOracle",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 813,
                              "src": "1295:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 825,
                              "name": "_siloAsset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 815,
                              "src": "1308:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 823,
                            "name": "resolvePoolId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 893,
                            "src": "1281:13:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bytes32_$",
                              "typeString": "function (address,address) view returns (bytes32)"
                            }
                          },
                          "id": 826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1281:38:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1264:55:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 829,
                              "name": "_tokenIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 807,
                              "src": "1351:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 830,
                              "name": "_tokenOut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 809,
                              "src": "1361:9:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 831,
                              "name": "_amountOut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 811,
                              "src": "1372:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 832,
                              "name": "poolId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 822,
                              "src": "1384:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 828,
                            "name": "_swapAmountOut",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1025,
                            "src": "1336:14:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$",
                              "typeString": "function (address,address,uint256,bytes32) returns (uint256)"
                            }
                          },
                          "id": 833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1336:55:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 820,
                        "id": 834,
                        "nodeType": "Return",
                        "src": "1329:62:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 805,
                    "nodeType": "StructuredDocumentation",
                    "src": "1013:24:10",
                    "text": "@inheritdoc ISwapper"
                  },
                  "functionSelector": "168c66b4",
                  "id": 836,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swapAmountOut",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 817,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1218:8:10"
                  },
                  "parameters": {
                    "id": 816,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 807,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1074:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 806,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1074:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 809,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1100:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 808,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1100:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "_amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1127:18:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 810,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1127:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 813,
                        "mutability": "mutable",
                        "name": "_siloOracle",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1155:19:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 812,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1155:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 815,
                        "mutability": "mutable",
                        "name": "_siloAsset",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1184:18:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 814,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1184:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1064:144:10"
                  },
                  "returnParameters": {
                    "id": 820,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 819,
                        "mutability": "mutable",
                        "name": "amountIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 836,
                        "src": "1236:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 818,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1236:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1235:18:10"
                  },
                  "scope": 1026,
                  "src": "1042:356:10",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    734
                  ],
                  "body": {
                    "id": 848,
                    "nodeType": "Block",
                    "src": "1502:38:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 845,
                              "name": "vault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 760,
                              "src": "1527:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IVault_$694",
                                "typeString": "contract IVault"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IVault_$694",
                                "typeString": "contract IVault"
                              }
                            ],
                            "id": 844,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1519:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 843,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1519:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 846,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1519:14:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 842,
                        "id": 847,
                        "nodeType": "Return",
                        "src": "1512:21:10"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 837,
                    "nodeType": "StructuredDocumentation",
                    "src": "1404:24:10",
                    "text": "@inheritdoc ISwapper"
                  },
                  "functionSelector": "db36eb2e",
                  "id": 849,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "spenderToApprove",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 839,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1475:8:10"
                  },
                  "parameters": {
                    "id": 838,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1458:2:10"
                  },
                  "returnParameters": {
                    "id": 842,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 841,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 849,
                        "src": "1493:7:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 840,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1493:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1492:9:10"
                  },
                  "scope": 1026,
                  "src": "1433:107:10",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 892,
                    "nodeType": "Block",
                    "src": "1639:378:10",
                    "statements": [
                      {
                        "assignments": [
                          859
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 859,
                            "mutability": "mutable",
                            "name": "callData",
                            "nodeType": "VariableDeclaration",
                            "scope": 892,
                            "src": "1649:21:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 858,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1649:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 865,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 862,
                              "name": "ASSETS_POOLS_SELECTOR",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 758,
                              "src": "1696:21:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            {
                              "id": 863,
                              "name": "_asset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 853,
                              "src": "1719:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 860,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "1673:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 861,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodeWithSelector",
                            "nodeType": "MemberAccess",
                            "src": "1673:22:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes4) pure returns (bytes memory)"
                            }
                          },
                          "id": 864,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1673:53:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1649:77:10"
                      },
                      {
                        "assignments": [
                          867,
                          869
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 867,
                            "mutability": "mutable",
                            "name": "success",
                            "nodeType": "VariableDeclaration",
                            "scope": 892,
                            "src": "1797:12:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 866,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1797:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 869,
                            "mutability": "mutable",
                            "name": "data",
                            "nodeType": "VariableDeclaration",
                            "scope": 892,
                            "src": "1811:17:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 868,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1811:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 874,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 872,
                              "name": "callData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 859,
                              "src": "1851:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 870,
                              "name": "_oracle",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 851,
                              "src": "1832:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 871,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "1832:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 873,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1832:28:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1796:64:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 876,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 867,
                              "src": "1878:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "706f6f6c20666f72206173736574206e6f7420736574",
                              "id": 877,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1887:24:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39",
                                "typeString": "literal_string \"pool for asset not set\""
                              },
                              "value": "pool for asset not set"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_50a13df133f43e4fab60447d4df64de66e50330cf84fdb4263d720281dbd8a39",
                                "typeString": "literal_string \"pool for asset not set\""
                              }
                            ],
                            "id": 875,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1870:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 878,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1870:42:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 879,
                        "nodeType": "ExpressionStatement",
                        "src": "1870:42:10"
                      },
                      {
                        "assignments": [
                          881
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 881,
                            "mutability": "mutable",
                            "name": "pool",
                            "nodeType": "VariableDeclaration",
                            "scope": 892,
                            "src": "1923:24:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BalancerPool_$750_memory_ptr",
                              "typeString": "struct BalancerV2Swap.BalancerPool"
                            },
                            "typeName": {
                              "id": 880,
                              "name": "BalancerPool",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 750,
                              "src": "1923:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BalancerPool_$750_storage_ptr",
                                "typeString": "struct BalancerV2Swap.BalancerPool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 888,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 884,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 869,
                              "src": "1961:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 885,
                                  "name": "BalancerPool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 750,
                                  "src": "1968:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_struct$_BalancerPool_$750_storage_ptr_$",
                                    "typeString": "type(struct BalancerV2Swap.BalancerPool storage pointer)"
                                  }
                                }
                              ],
                              "id": 886,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "1967:14:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_BalancerPool_$750_storage_ptr_$",
                                "typeString": "type(struct BalancerV2Swap.BalancerPool storage pointer)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_type$_t_struct$_BalancerPool_$750_storage_ptr_$",
                                "typeString": "type(struct BalancerV2Swap.BalancerPool storage pointer)"
                              }
                            ],
                            "expression": {
                              "id": 882,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "1950:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 883,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "1950:10:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 887,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1950:32:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BalancerPool_$750_memory_ptr",
                            "typeString": "struct BalancerV2Swap.BalancerPool memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1923:59:10"
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 889,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 881,
                            "src": "1999:4:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BalancerPool_$750_memory_ptr",
                              "typeString": "struct BalancerV2Swap.BalancerPool memory"
                            }
                          },
                          "id": 890,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "poolId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 745,
                          "src": "1999:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 857,
                        "id": 891,
                        "nodeType": "Return",
                        "src": "1992:18:10"
                      }
                    ]
                  },
                  "functionSelector": "56a6f685",
                  "id": 893,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "resolvePoolId",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 854,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 851,
                        "mutability": "mutable",
                        "name": "_oracle",
                        "nodeType": "VariableDeclaration",
                        "scope": 893,
                        "src": "1569:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 850,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1569:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 853,
                        "mutability": "mutable",
                        "name": "_asset",
                        "nodeType": "VariableDeclaration",
                        "scope": 893,
                        "src": "1586:14:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 852,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1586:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1568:33:10"
                  },
                  "returnParameters": {
                    "id": 857,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 856,
                        "mutability": "mutable",
                        "name": "poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 893,
                        "src": "1623:14:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 855,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1623:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1622:16:10"
                  },
                  "scope": 1026,
                  "src": "1546:471:10",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 956,
                    "nodeType": "Block",
                    "src": "2184:392:10",
                    "statements": [
                      {
                        "assignments": [
                          909
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 909,
                            "mutability": "mutable",
                            "name": "singleSwap",
                            "nodeType": "VariableDeclaration",
                            "scope": 956,
                            "src": "2194:35:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                              "typeString": "struct IVault.SingleSwap"
                            },
                            "typeName": {
                              "id": 908,
                              "name": "IVault.SingleSwap",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 545,
                              "src": "2194:17:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_storage_ptr",
                                "typeString": "struct IVault.SingleSwap"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 925,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 912,
                              "name": "_poolId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 901,
                              "src": "2263:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "expression": {
                                "expression": {
                                  "id": 913,
                                  "name": "IVault",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 694,
                                  "src": "2272:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                    "typeString": "type(contract IVault)"
                                  }
                                },
                                "id": 914,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "SwapKind",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 518,
                                "src": "2272:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_SwapKind_$518_$",
                                  "typeString": "type(enum IVault.SwapKind)"
                                }
                              },
                              "id": 915,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "GIVEN_IN",
                              "nodeType": "MemberAccess",
                              "src": "2272:24:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_SwapKind_$518",
                                "typeString": "enum IVault.SwapKind"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 917,
                                  "name": "_tokenIn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 895,
                                  "src": "2305:8:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 916,
                                "name": "IAsset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "2298:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAsset_$133_$",
                                  "typeString": "type(contract IAsset)"
                                }
                              },
                              "id": 918,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2298:16:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 920,
                                  "name": "_tokenOut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 897,
                                  "src": "2323:9:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 919,
                                "name": "IAsset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "2316:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAsset_$133_$",
                                  "typeString": "type(contract IAsset)"
                                }
                              },
                              "id": 921,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2316:17:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              }
                            },
                            {
                              "id": 922,
                              "name": "_amountIn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 899,
                              "src": "2335:9:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 923,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2346:2:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_enum$_SwapKind_$518",
                                "typeString": "enum IVault.SwapKind"
                              },
                              {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              },
                              {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "id": 910,
                              "name": "IVault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "2232:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                "typeString": "type(contract IVault)"
                              }
                            },
                            "id": 911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "SingleSwap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 545,
                            "src": "2232:17:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_SingleSwap_$545_storage_ptr_$",
                              "typeString": "type(struct IVault.SingleSwap storage pointer)"
                            }
                          },
                          "id": 924,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2232:126:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                            "typeString": "struct IVault.SingleSwap memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2194:164:10"
                      },
                      {
                        "assignments": [
                          929
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 929,
                            "mutability": "mutable",
                            "name": "funds",
                            "nodeType": "VariableDeclaration",
                            "scope": 956,
                            "src": "2369:34:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                              "typeString": "struct IVault.FundManagement"
                            },
                            "typeName": {
                              "id": 928,
                              "name": "IVault.FundManagement",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 600,
                              "src": "2369:21:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FundManagement_$600_storage_ptr",
                                "typeString": "struct IVault.FundManagement"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 946,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 934,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "2449:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                    "typeString": "contract BalancerV2Swap"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                    "typeString": "contract BalancerV2Swap"
                                  }
                                ],
                                "id": 933,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2441:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 932,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2441:7:10",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2441:13:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 936,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2456:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 941,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2479:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                        "typeString": "contract BalancerV2Swap"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                        "typeString": "contract BalancerV2Swap"
                                      }
                                    ],
                                    "id": 940,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2471:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 939,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2471:7:10",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 942,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2471:13:10",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 938,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2463:8:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 937,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2463:8:10",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 943,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2463:22:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 944,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2487:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "expression": {
                              "id": 930,
                              "name": "IVault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "2406:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                "typeString": "type(contract IVault)"
                              }
                            },
                            "id": 931,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "FundManagement",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 600,
                            "src": "2406:21:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_FundManagement_$600_storage_ptr_$",
                              "typeString": "type(struct IVault.FundManagement storage pointer)"
                            }
                          },
                          "id": 945,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2406:96:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                            "typeString": "struct IVault.FundManagement memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2369:133:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 949,
                              "name": "singleSwap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 909,
                              "src": "2531:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                                "typeString": "struct IVault.SingleSwap memory"
                              }
                            },
                            {
                              "id": 950,
                              "name": "funds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 929,
                              "src": "2543:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                                "typeString": "struct IVault.FundManagement memory"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 951,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2550:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            {
                              "expression": {
                                "id": 952,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "2553:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 953,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "2553:15:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                                "typeString": "struct IVault.SingleSwap memory"
                              },
                              {
                                "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                                "typeString": "struct IVault.FundManagement memory"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 947,
                              "name": "vault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 760,
                              "src": "2520:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IVault_$694",
                                "typeString": "contract IVault"
                              }
                            },
                            "id": 948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "swap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 532,
                            "src": "2520:10:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$_t_struct$_SingleSwap_$545_memory_ptr_$_t_struct$_FundManagement_$600_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (struct IVault.SingleSwap memory,struct IVault.FundManagement memory,uint256,uint256) payable external returns (uint256)"
                            }
                          },
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2520:49:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 905,
                        "id": 955,
                        "nodeType": "Return",
                        "src": "2513:56:10"
                      }
                    ]
                  },
                  "id": 957,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_swapAmountIn",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 902,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 895,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "2055:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 894,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2055:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 897,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "2081:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 896,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2081:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 899,
                        "mutability": "mutable",
                        "name": "_amountIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "2108:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 898,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2108:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 901,
                        "mutability": "mutable",
                        "name": "_poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "2135:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 900,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2135:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2045:111:10"
                  },
                  "returnParameters": {
                    "id": 905,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 904,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 957,
                        "src": "2175:7:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 903,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2175:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2174:9:10"
                  },
                  "scope": 1026,
                  "src": "2023:553:10",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1024,
                    "nodeType": "Block",
                    "src": "2745:410:10",
                    "statements": [
                      {
                        "assignments": [
                          973
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 973,
                            "mutability": "mutable",
                            "name": "singleSwap",
                            "nodeType": "VariableDeclaration",
                            "scope": 1024,
                            "src": "2755:35:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                              "typeString": "struct IVault.SingleSwap"
                            },
                            "typeName": {
                              "id": 972,
                              "name": "IVault.SingleSwap",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 545,
                              "src": "2755:17:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_storage_ptr",
                                "typeString": "struct IVault.SingleSwap"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 989,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 976,
                              "name": "_poolId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 965,
                              "src": "2824:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "expression": {
                                "expression": {
                                  "id": 977,
                                  "name": "IVault",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 694,
                                  "src": "2833:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                    "typeString": "type(contract IVault)"
                                  }
                                },
                                "id": 978,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "SwapKind",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 518,
                                "src": "2833:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_SwapKind_$518_$",
                                  "typeString": "type(enum IVault.SwapKind)"
                                }
                              },
                              "id": 979,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "GIVEN_OUT",
                              "nodeType": "MemberAccess",
                              "src": "2833:25:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_SwapKind_$518",
                                "typeString": "enum IVault.SwapKind"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 981,
                                  "name": "_tokenIn",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 959,
                                  "src": "2867:8:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 980,
                                "name": "IAsset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "2860:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAsset_$133_$",
                                  "typeString": "type(contract IAsset)"
                                }
                              },
                              "id": 982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2860:16:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 984,
                                  "name": "_tokenOut",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 961,
                                  "src": "2885:9:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 983,
                                "name": "IAsset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "2878:6:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAsset_$133_$",
                                  "typeString": "type(contract IAsset)"
                                }
                              },
                              "id": 985,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2878:17:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              }
                            },
                            {
                              "id": 986,
                              "name": "_amountOut",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 963,
                              "src": "2897:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 987,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2909:2:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_enum$_SwapKind_$518",
                                "typeString": "enum IVault.SwapKind"
                              },
                              {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              },
                              {
                                "typeIdentifier": "t_contract$_IAsset_$133",
                                "typeString": "contract IAsset"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "id": 974,
                              "name": "IVault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "2793:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                "typeString": "type(contract IVault)"
                              }
                            },
                            "id": 975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "SingleSwap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 545,
                            "src": "2793:17:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_SingleSwap_$545_storage_ptr_$",
                              "typeString": "type(struct IVault.SingleSwap storage pointer)"
                            }
                          },
                          "id": 988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2793:128:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                            "typeString": "struct IVault.SingleSwap memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2755:166:10"
                      },
                      {
                        "assignments": [
                          993
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 993,
                            "mutability": "mutable",
                            "name": "funds",
                            "nodeType": "VariableDeclaration",
                            "scope": 1024,
                            "src": "2932:34:10",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                              "typeString": "struct IVault.FundManagement"
                            },
                            "typeName": {
                              "id": 992,
                              "name": "IVault.FundManagement",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 600,
                              "src": "2932:21:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FundManagement_$600_storage_ptr",
                                "typeString": "struct IVault.FundManagement"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1010,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 998,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "3012:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                    "typeString": "contract BalancerV2Swap"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                    "typeString": "contract BalancerV2Swap"
                                  }
                                ],
                                "id": 997,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3004:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 996,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3004:7:10",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 999,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3004:13:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 1000,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3019:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1005,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "3042:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                        "typeString": "contract BalancerV2Swap"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_BalancerV2Swap_$1026",
                                        "typeString": "contract BalancerV2Swap"
                                      }
                                    ],
                                    "id": 1004,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3034:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1003,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3034:7:10",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1006,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3034:13:10",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1002,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3026:8:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 1001,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3026:8:10",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1007,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3026:22:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 1008,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3050:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "expression": {
                              "id": 994,
                              "name": "IVault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "2969:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IVault_$694_$",
                                "typeString": "type(contract IVault)"
                              }
                            },
                            "id": 995,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "FundManagement",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 600,
                            "src": "2969:21:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_FundManagement_$600_storage_ptr_$",
                              "typeString": "type(struct IVault.FundManagement storage pointer)"
                            }
                          },
                          "id": 1009,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2969:96:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                            "typeString": "struct IVault.FundManagement memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2932:133:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1013,
                              "name": "singleSwap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 973,
                              "src": "3094:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                                "typeString": "struct IVault.SingleSwap memory"
                              }
                            },
                            {
                              "id": 1014,
                              "name": "funds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 993,
                              "src": "3106:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                                "typeString": "struct IVault.FundManagement memory"
                              }
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1017,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3118:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 1016,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3118:7:10",
                                      "typeDescriptions": {}
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    }
                                  ],
                                  "id": 1015,
                                  "name": "type",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -27,
                                  "src": "3113:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 1018,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3113:13:10",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_meta_type_t_uint256",
                                  "typeString": "type(uint256)"
                                }
                              },
                              "id": 1019,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "max",
                              "nodeType": "MemberAccess",
                              "src": "3113:17:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1020,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "3132:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1021,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "3132:15:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_SingleSwap_$545_memory_ptr",
                                "typeString": "struct IVault.SingleSwap memory"
                              },
                              {
                                "typeIdentifier": "t_struct$_FundManagement_$600_memory_ptr",
                                "typeString": "struct IVault.FundManagement memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1011,
                              "name": "vault",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 760,
                              "src": "3083:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IVault_$694",
                                "typeString": "contract IVault"
                              }
                            },
                            "id": 1012,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "swap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 532,
                            "src": "3083:10:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$_t_struct$_SingleSwap_$545_memory_ptr_$_t_struct$_FundManagement_$600_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (struct IVault.SingleSwap memory,struct IVault.FundManagement memory,uint256,uint256) payable external returns (uint256)"
                            }
                          },
                          "id": 1022,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3083:65:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 969,
                        "id": 1023,
                        "nodeType": "Return",
                        "src": "3076:72:10"
                      }
                    ]
                  },
                  "id": 1025,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_swapAmountOut",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 966,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 959,
                        "mutability": "mutable",
                        "name": "_tokenIn",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "2615:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 958,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2615:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 961,
                        "mutability": "mutable",
                        "name": "_tokenOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "2641:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 960,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2641:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 963,
                        "mutability": "mutable",
                        "name": "_amountOut",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "2668:18:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 962,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2668:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 965,
                        "mutability": "mutable",
                        "name": "_poolId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "2696:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 964,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2696:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2605:112:10"
                  },
                  "returnParameters": {
                    "id": 969,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 968,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "2736:7:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 967,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2736:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2735:9:10"
                  },
                  "scope": 1026,
                  "src": "2582:573:10",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1027,
              "src": "252:2905:10"
            }
          ],
          "src": "37:3121:10"
        },
        "id": 10
      }
    }
  }
}
