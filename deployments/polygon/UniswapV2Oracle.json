{
  "address": "0x53871Af79d65d6EAB12Cc9EF2f14597883027721",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getPriceStatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "initToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSiloOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x37555fc21b15cc3dfed73e858e1a86309b8af98190b150106b874cfb176c10d9",
  "receipt": {
    "to": null,
    "from": "0x48872D69A9591153c5220381C953752f5894ff05",
    "contractAddress": "0x53871Af79d65d6EAB12Cc9EF2f14597883027721",
    "transactionIndex": 5,
    "gasUsed": "819321",
    "logsBloom": "0x
    "blockHash": "0x53f16a68a71e35184f408aad27a0c64bd81069f4f3c724958127bf8482f8d879",
    "transactionHash": "0x37555fc21b15cc3dfed73e858e1a86309b8af98190b150106b874cfb176c10d9",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 20051218,
        "transactionHash": "0x37555fc21b15cc3dfed73e858e1a86309b8af98190b150106b874cfb176c10d9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000048872d69a9591153c5220381c953752f5894ff05",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000746eb96e7b100000000000000000000000000000000000000000000000000a20dfd812fadd9b8d000000000000000000000000000000000000000000002a4862fb12bd0ff20c1800000000000000000000000000000000000000000000000a206b69598c628b8d000000000000000000000000000000000000000000002a48636f81767e6d1c18",
        "logIndex": 31,
        "blockHash": "0x53f16a68a71e35184f408aad27a0c64bd81069f4f3c724958127bf8482f8d879"
      }
    ],
    "blockNumber": 20051218,
    "cumulativeGasUsed": "1717297",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4"
  ],
  "solcInputHash": "ae73929953eeb599c719b1ca2ccc8833",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getPriceStatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSiloOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV2Oracle.sol\":\"UniswapV2Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IOracle {\\n    function initToken(address _base, address _quote, bytes calldata _data) external;\\n    function isSiloOracle() external pure returns (bool);\\n    function getPrice(address _base, address _quote, bytes calldata _data) external returns (uint256 price);\\n    function getPriceStatic(address _base, address _quote, bytes calldata _data) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x49cf171f61d73f32d19ceb4679f5ceba0daf038035f8d2c8df981ddb19365189\",\"license\":\"BUSL-1.1\"},\"contracts/lib/uniswapV2/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\n// solhint-disable\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint256, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // lossy if either numerator or denominator is greater than 112 bits\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: div by 0\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45fb5eb55716e807810d4225564e245ade69241cd3cf3cc6b5b7c27ea167d022\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/uniswapV2/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity 0.6.12;\\n\\n// solhint-disable\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xfaac2090835dd2a77c6da1ed2de0baa8c18d6cda3c1c8096668dc9fb885cdb47\",\"license\":\"CC-BY-4.0\"},\"contracts/lib/uniswapV2/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport './FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39d3e6a089cbb7f765b3bcbc379c0641d67814a97e96fbb95fdb594ea5cd86dd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/oracles/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport '../interfaces/IOracle.sol';\\n\\nabstract contract Oracle is IOracle {\\n    function isSiloOracle() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function initToken(\\n        address _base,\\n        address _quote,\\n        bytes calldata _data\\n    ) external virtual override {}\\n\\n    function getPriceStatic(address _base, address _quote, bytes calldata _data) external view virtual override returns (uint256 price) {\\n        return 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfae2a8bfa67bfe12d2eb5792eb7fd80bd9c6fe665ed3f1c9b23eaa4d332340d6\",\"license\":\"BUSL-1.1\"},\"contracts/oracles/UniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.12;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\n\\nimport '../lib/uniswapV2/UniswapV2OracleLibrary.sol';\\nimport '../lib/uniswapV2/FixedPoint.sol';\\nimport './Oracle.sol';\\n\\ncontract UniswapV2Oracle is Oracle {\\n    using FixedPoint for *;\\n\\n    address public immutable uniswapV2Factory;\\n\\n    uint256 public constant PERIOD = 60 * 15;\\n\\n    struct PriceData {\\n        uint256 priceCumulativeLast;\\n        uint144 priceAverage;\\n        uint32 blockTimestampLast;\\n        uint32 genesisTimestamp;\\n    }\\n\\n    mapping(address => mapping(address => PriceData)) internal prices;\\n\\n    constructor(address _factory) public {\\n        uniswapV2Factory = _factory;\\n    }\\n\\n    function initToken(address _base, address _quote, bytes memory) external override {\\n        update(_base, _quote, false);\\n    }\\n\\n    function getPrice(address _base, address _quote, bytes memory) public override returns (uint256 price) {\\n        update(_base, _quote, true);\\n        return prices[_base][_quote].priceAverage;\\n    }\\n\\n    function getPriceStatic(address _base, address _quote, bytes calldata) public view override returns (uint256) {\\n        return updateStatic(_base, _quote, true);\\n    }\\n\\n\\n    // TODO: during first PERIOD the oracle is vulnerable, consider cool down PERIOD for prod\\n    function update(address _base, address _quote, bool force) internal {\\n        PriceData storage tokenPrice = prices[_base][_quote];\\n        (uint256 priceCumulative, uint32 blockTimestamp) = _currentCumulativePrices(_base, _quote);\\n        uint32 timeElapsed = blockTimestamp - tokenPrice.blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed >= PERIOD || tokenPrice.genesisTimestamp == tokenPrice.blockTimestampLast) {\\n\\n            tokenPrice.priceAverage = FixedPoint\\n                .uq112x112(uint224((priceCumulative - tokenPrice.priceCumulativeLast) / timeElapsed))\\n                .mul(1e18)\\n                .decode144();\\n            tokenPrice.priceCumulativeLast = priceCumulative;\\n            tokenPrice.blockTimestampLast = blockTimestamp;\\n            if (tokenPrice.genesisTimestamp == 0) tokenPrice.genesisTimestamp = blockTimestamp;\\n        }\\n    }\\n\\n    function updateStatic(address _base, address _quote, bool force) internal view returns (uint256) {\\n        PriceData storage tokenPrice = prices[_base][_quote];\\n        (uint256 priceCumulative, uint32 blockTimestamp) = _currentCumulativePrices(_base, _quote);\\n        uint32 timeElapsed = blockTimestamp - tokenPrice.blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed >= PERIOD || tokenPrice.genesisTimestamp == tokenPrice.blockTimestampLast) {\\n            return FixedPoint\\n                .uq112x112(uint224((priceCumulative - tokenPrice.priceCumulativeLast) / timeElapsed))\\n                .mul(1e18)\\n                .decode144();\\n        } else {\\n            return tokenPrice.priceAverage;\\n        }\\n    }\\n\\n    function _currentCumulativePrices(address _base, address _quote) internal view returns (uint256, uint32) {\\n        address pair = IUniswapV2Factory(uniswapV2Factory).getPair(_base, _quote);\\n        require(pair != address(0), \\\"UniswapV2Oracle: NO_PAIR\\\");\\n\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, 'UniswapV2Oracle: NO_RESERVES');\\n\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n        uint256 priceCumulative;\\n        if (IUniswapV2Pair(pair).token0() == _base) {\\n            priceCumulative = price0Cumulative;\\n        } else {\\n            priceCumulative = price1Cumulative;\\n        }\\n        return (priceCumulative, blockTimestamp);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc6499ac9ab2470cd34b0eb03e1f4a8b46a88f6b53c2b09e5f40f32c7167148b1\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e46380380610e468339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b0316610dda61006c6000398061032a52806105935250610dda6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631287cdeb14610067578063355efdd91461010257806359d0f713146101c1578063b4d1d795146101e5578063c77a4949146101ed578063ecdcb0ff146102ae575b600080fd5b6100f06004803603606081101561007d57600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156100b157600080fd5b8201836020820111156100c357600080fd5b803590602001918460018302840111640100000000831117156100e557600080fd5b5090925090506102ca565b60408051918252519081900360200190f35b6100f06004803603606081101561011857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561014c57600080fd5b82018360208201111561015e57600080fd5b8035906020019184600183028401116401000000008311171561018057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102e1945050505050565b6101c9610328565b604080516001600160a01b039092168252519081900360200190f35b6100f061034c565b6102ac6004803603606081101561020357600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610352945050505050565b005b6102b6610363565b604080519115158252519081900360200190f35b60006102d885856001610368565b95945050505050565b60006102ef84846001610458565b506001600160a01b03808416600090815260208181526040808320938616835292905220600101546001600160901b03165b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61038481565b61035e83836000610458565b505050565b600190565b6001600160a01b0380841660009081526020818152604080832093861683529290529081208180610399878761058c565b6001850154919350915063ffffffff600160901b90910481168203906103849082161015806103e257506001840154600160b01b810463ffffffff908116600160901b90920416145b156104415761042d610428670de0b6b3a764000060405180602001604052808563ffffffff16896000015489038161041657fe5b046001600160e01b031690529061082a565b6108c0565b6001600160901b0316945050505050610321565b505050600101546001600160901b03169050610321565b6001600160a01b0380841660009081526020818152604080832093861683529290529081209080610489868661058c565b6001850154919350915063ffffffff600160901b90910481168203906103849082161015806104d257506001840154600160b01b810463ffffffff908116600160901b90920416145b1561058357610506610428670de0b6b3a764000060405180602001604052808563ffffffff16896000015489038161041657fe5b60018501805485875563ffffffff808616600160901b0263ffffffff60901b196001600160901b039590951671ffffffffffffffffffffffffffffffffffff1990931692909217939093161790819055600160b01b9004166105835760018401805463ffffffff60b01b1916600160b01b63ffffffff8516021790555b50505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d602081101561063957600080fd5b505190506001600160a01b038116610698576040805162461bcd60e51b815260206004820152601860248201527f556e697377617056324f7261636c653a204e4f5f504149520000000000000000604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156106d457600080fd5b505afa1580156106e8573d6000803e3d6000fd5b505050506040513d60608110156106fe57600080fd5b50805160209091015190925090506001600160701b0382161580159061072c57506001600160701b03811615155b61077d576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056324f7261636c653a204e4f5f524553455256455300000000604482015290519081900360640190fd5b600080600061078b866108c7565b92509250925060008a6001600160a01b0316876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d602081101561080057600080fd5b50516001600160a01b0316141561081857508261081b565b50815b9a909950975050505050505050565b610832610d7f565b600082158061085857505082516001600160e01b03168281029083828161085557fe5b04145b6108a9576040805162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b5160701c90565b60008060006108d4610ab6565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561090f57600080fd5b505afa158015610923573d6000803e3d6000fd5b505050506040513d602081101561093957600080fd5b505160408051635a3d549360e01b815290519194506001600160a01b03861691635a3d549391600480820192602092909190829003018186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d60208110156109a957600080fd5b505160408051630240bc6b60e21b81529051919350600091829182916001600160a01b03891691630902f1ac916004808301926060929190829003018186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d6060811015610a1f57600080fd5b5080516020820151604090920151909450909250905063ffffffff80821690851614610aac5780840363ffffffff8116610a656001600160701b03808616908716610ac0565b600001516001600160e01b031602870196508063ffffffff16610a9a856001600160701b0316856001600160701b0316610ac0565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b610ac8610d92565b60008211610b1d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a2064697620627920300000604482015290519081900360640190fd5b82610b3757506040805160208101909152600081526108ba565b6001600160901b038311610bd357600082607085901b81610b5457fe5b0490506001600160e01b03811115610bb3576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506108ba565b6000610be484600160701b85610c42565b90506001600160e01b03811115610bb3576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6000806000610c518686610ce2565b9150915060008480610c5f57fe5b868809905082811115610c73576001820391505b8083039250848210610ccc576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b610cd7838387610d0f565b979650505050505050565b6000808060001984860990508385029250828103915082811015610d07576001820391505b509250929050565b60008181038216808381610d1f57fe5b049250808581610d2b57fe5b049450808160000381610d3a57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040518060200160405280600081525090565b6040805160208101909152600081529056fea2646970667358221220ae4d389395e06dad9a8c54b75f6f6a74673d683dbb17342b64e26a04f422cbd964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631287cdeb14610067578063355efdd91461010257806359d0f713146101c1578063b4d1d795146101e5578063c77a4949146101ed578063ecdcb0ff146102ae575b600080fd5b6100f06004803603606081101561007d57600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156100b157600080fd5b8201836020820111156100c357600080fd5b803590602001918460018302840111640100000000831117156100e557600080fd5b5090925090506102ca565b60408051918252519081900360200190f35b6100f06004803603606081101561011857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561014c57600080fd5b82018360208201111561015e57600080fd5b8035906020019184600183028401116401000000008311171561018057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102e1945050505050565b6101c9610328565b604080516001600160a01b039092168252519081900360200190f35b6100f061034c565b6102ac6004803603606081101561020357600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610352945050505050565b005b6102b6610363565b604080519115158252519081900360200190f35b60006102d885856001610368565b95945050505050565b60006102ef84846001610458565b506001600160a01b03808416600090815260208181526040808320938616835292905220600101546001600160901b03165b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61038481565b61035e83836000610458565b505050565b600190565b6001600160a01b0380841660009081526020818152604080832093861683529290529081208180610399878761058c565b6001850154919350915063ffffffff600160901b90910481168203906103849082161015806103e257506001840154600160b01b810463ffffffff908116600160901b90920416145b156104415761042d610428670de0b6b3a764000060405180602001604052808563ffffffff16896000015489038161041657fe5b046001600160e01b031690529061082a565b6108c0565b6001600160901b0316945050505050610321565b505050600101546001600160901b03169050610321565b6001600160a01b0380841660009081526020818152604080832093861683529290529081209080610489868661058c565b6001850154919350915063ffffffff600160901b90910481168203906103849082161015806104d257506001840154600160b01b810463ffffffff908116600160901b90920416145b1561058357610506610428670de0b6b3a764000060405180602001604052808563ffffffff16896000015489038161041657fe5b60018501805485875563ffffffff808616600160901b0263ffffffff60901b196001600160901b039590951671ffffffffffffffffffffffffffffffffffff1990931692909217939093161790819055600160b01b9004166105835760018401805463ffffffff60b01b1916600160b01b63ffffffff8516021790555b50505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d602081101561063957600080fd5b505190506001600160a01b038116610698576040805162461bcd60e51b815260206004820152601860248201527f556e697377617056324f7261636c653a204e4f5f504149520000000000000000604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156106d457600080fd5b505afa1580156106e8573d6000803e3d6000fd5b505050506040513d60608110156106fe57600080fd5b50805160209091015190925090506001600160701b0382161580159061072c57506001600160701b03811615155b61077d576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056324f7261636c653a204e4f5f524553455256455300000000604482015290519081900360640190fd5b600080600061078b866108c7565b92509250925060008a6001600160a01b0316876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d602081101561080057600080fd5b50516001600160a01b0316141561081857508261081b565b50815b9a909950975050505050505050565b610832610d7f565b600082158061085857505082516001600160e01b03168281029083828161085557fe5b04145b6108a9576040805162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b5160701c90565b60008060006108d4610ab6565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561090f57600080fd5b505afa158015610923573d6000803e3d6000fd5b505050506040513d602081101561093957600080fd5b505160408051635a3d549360e01b815290519194506001600160a01b03861691635a3d549391600480820192602092909190829003018186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d60208110156109a957600080fd5b505160408051630240bc6b60e21b81529051919350600091829182916001600160a01b03891691630902f1ac916004808301926060929190829003018186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d6060811015610a1f57600080fd5b5080516020820151604090920151909450909250905063ffffffff80821690851614610aac5780840363ffffffff8116610a656001600160701b03808616908716610ac0565b600001516001600160e01b031602870196508063ffffffff16610a9a856001600160701b0316856001600160701b0316610ac0565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b610ac8610d92565b60008211610b1d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a2064697620627920300000604482015290519081900360640190fd5b82610b3757506040805160208101909152600081526108ba565b6001600160901b038311610bd357600082607085901b81610b5457fe5b0490506001600160e01b03811115610bb3576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506108ba565b6000610be484600160701b85610c42565b90506001600160e01b03811115610bb3576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6000806000610c518686610ce2565b9150915060008480610c5f57fe5b868809905082811115610c73576001820391505b8083039250848210610ccc576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b610cd7838387610d0f565b979650505050505050565b6000808060001984860990508385029250828103915082811015610d07576001820391505b509250929050565b60008181038216808381610d1f57fe5b049250808581610d2b57fe5b049450808160000381610d3a57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040518060200160405280600081525090565b6040805160208101909152600081529056fea2646970667358221220ae4d389395e06dad9a8c54b75f6f6a74673d683dbb17342b64e26a04f422cbd964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1466,
        "contract": "contracts/oracles/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)1460_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(PriceData)1460_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UniswapV2Oracle.PriceData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(PriceData)1460_storage)"
      },
      "t_mapping(t_address,t_struct(PriceData)1460_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniswapV2Oracle.PriceData)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceData)1460_storage"
      },
      "t_struct(PriceData)1460_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV2Oracle.PriceData",
        "members": [
          {
            "astId": 1453,
            "contract": "contracts/oracles/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "priceCumulativeLast",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1455,
            "contract": "contracts/oracles/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "priceAverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint144"
          },
          {
            "astId": 1457,
            "contract": "contracts/oracles/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "blockTimestampLast",
            "offset": 18,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 1459,
            "contract": "contracts/oracles/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "genesisTimestamp",
            "offset": 22,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint144": {
        "encoding": "inplace",
        "label": "uint144",
        "numberOfBytes": "18"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}