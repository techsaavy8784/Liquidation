{
  "address": "0xD50B297f657aE1da36E342df8a8E122C915d6b97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokensFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_defaultMaxLTV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeAssets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeSilo",
          "type": "address"
        }
      ],
      "name": "BridgeSiloExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBridgeAsset",
          "type": "address"
        }
      ],
      "name": "BridgeAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeAssetRemoved",
          "type": "address"
        }
      ],
      "name": "BridgeAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "BridgePoolUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeposits",
          "type": "uint256"
        }
      ],
      "name": "DefaultSiloMaxDepositsLimitUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEntryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEntryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolShareFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolShareFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newGuardedLaunchState",
          "type": "bool"
        }
      ],
      "name": "GuardedLaunchToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "InterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newLimitedMaxLiquidityState",
          "type": "bool"
        }
      ],
      "name": "LimitedMaxLiquidityToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "siloVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeAssets",
          "type": "address[]"
        }
      ],
      "name": "NewSilo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newPermissionedSiloCreationState",
          "type": "bool"
        }
      ],
      "name": "PermissionedSiloCreationToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "siloLatestVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "siloDefaultVersion",
          "type": "uint256"
        }
      ],
      "name": "RegisterSiloVersion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "siloDefaultVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defaultVersion",
          "type": "uint256"
        }
      ],
      "name": "SiloDefaultVersion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDeposits",
          "type": "uint256"
        }
      ],
      "name": "SiloMaxDepositsLimitsUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "SiloVerifier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTokensFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTokensFactory",
          "type": "address"
        }
      ],
      "name": "TokensFactoryUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "siloVersion",
          "type": "uint256"
        }
      ],
      "name": "UnregisterSiloVersion",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_PREFIX",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFINITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBridgeAsset",
          "type": "address"
        }
      ],
      "name": "addBridgeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "interestRateModel",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bridgeAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridgeAssetsIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAssetConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "interestRateModel",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSiloMaxDepositsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getInterestRateModel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getMaxSiloDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getMaximumLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemovedBridgeAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardedLaunch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "isSilo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitedMaxLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_siloVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_siloData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oracleData",
          "type": "bytes"
        }
      ],
      "name": "newSilo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_siloVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_siloData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oracleData",
          "type": "bytes"
        }
      ],
      "name": "newSiloVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionedSiloCreation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolShareFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDefault",
          "type": "bool"
        }
      ],
      "name": "registerSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeAssetToRemove",
          "type": "address"
        }
      ],
      "name": "removeBridgeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "removedBridgeAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "removedBridgeAssetsIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_siloVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_siloData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oracleData",
          "type": "bytes"
        }
      ],
      "name": "replaceSilo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_interestRateModel",
          "type": "address"
        }
      ],
      "name": "setAssetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultInterestRateModel",
          "type": "address"
        }
      ],
      "name": "setDefaultInterestRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultLiquidationThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDefaultLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultMaxLTV",
          "type": "uint256"
        }
      ],
      "name": "setDefaultMaximumLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDeposits",
          "type": "uint256"
        }
      ],
      "name": "setDefaultSiloMaxDepositsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultVersion",
          "type": "uint256"
        }
      ],
      "name": "setDefaultSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolShareFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeposits",
          "type": "uint256"
        }
      ],
      "name": "setSiloMaxDepositsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokensFactory",
          "type": "address"
        }
      ],
      "name": "setTokensFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "silo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloDefaultVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "siloFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloLatestVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloMaxDepositsLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quote",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "siloOffChainVerification",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "siloReverse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleGuardedLaunch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLimitedMaxLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePermissionedSiloCreation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensFactory",
      "outputs": [
        {
          "internalType": "contract ITokensFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_siloVersion",
          "type": "uint256"
        }
      ],
      "name": "unregisterSiloVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa75fd4fd1500c112e5aad1c0bfcc6d6b74662ac4bddb3914f70a9507826df61a",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xD50B297f657aE1da36E342df8a8E122C915d6b97",
    "transactionIndex": 26,
    "gasUsed": "2858782",
    "logsBloom": "0x
    "blockHash": "0xb24efa5b7847dda06ec3292732e21ae0c5b08eba8627bf8d16bde09849cba025",
    "transactionHash": "0xa75fd4fd1500c112e5aad1c0bfcc6d6b74662ac4bddb3914f70a9507826df61a",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 10149041,
        "transactionHash": "0xa75fd4fd1500c112e5aad1c0bfcc6d6b74662ac4bddb3914f70a9507826df61a",
        "address": "0xD50B297f657aE1da36E342df8a8E122C915d6b97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xb24efa5b7847dda06ec3292732e21ae0c5b08eba8627bf8d16bde09849cba025"
      }
    ],
    "blockNumber": 10149041,
    "cumulativeGasUsed": "10385597",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D625C730018Cfd61C2F4dCe6A338053FDbd9301",
    "0xa3CEF6aF9312C6217643f38D8Bfb16da6D6FEd4d",
    "0x4aFe35da94692D6be34ACD950360455f79066939",
    "500000000000000000",
    "625000000000000000",
    [
      "0xc778417e063141139fce010982780140aa0cd5ab"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "513d71c9d0c126d5b4efd168466082e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokensFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeAssets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeSilo\",\"type\":\"address\"}],\"name\":\"BridgeSiloExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBridgeAsset\",\"type\":\"address\"}],\"name\":\"BridgeAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAssetRemoved\",\"type\":\"address\"}],\"name\":\"BridgeAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"BridgePoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeposits\",\"type\":\"uint256\"}],\"name\":\"DefaultSiloMaxDepositsLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEntryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEntryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolShareFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolShareFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newGuardedLaunchState\",\"type\":\"bool\"}],\"name\":\"GuardedLaunchToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"InterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newLimitedMaxLiquidityState\",\"type\":\"bool\"}],\"name\":\"LimitedMaxLiquidityToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"siloVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeAssets\",\"type\":\"address[]\"}],\"name\":\"NewSilo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newPermissionedSiloCreationState\",\"type\":\"bool\"}],\"name\":\"PermissionedSiloCreationToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"siloLatestVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"siloDefaultVersion\",\"type\":\"uint256\"}],\"name\":\"RegisterSiloVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"siloDefaultVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultVersion\",\"type\":\"uint256\"}],\"name\":\"SiloDefaultVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeposits\",\"type\":\"uint256\"}],\"name\":\"SiloMaxDepositsLimitsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"SiloVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTokensFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokensFactory\",\"type\":\"address\"}],\"name\":\"TokensFactoryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"siloVersion\",\"type\":\"uint256\"}],\"name\":\"UnregisterSiloVersion\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_PREFIX\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFINITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBridgeAsset\",\"type\":\"address\"}],\"name\":\"addBridgeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeAssetsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAssetConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSiloMaxDepositsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getInterestRateModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMaxSiloDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getMaximumLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovedBridgeAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"isSilo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitedMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_siloVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_siloData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oracleData\",\"type\":\"bytes\"}],\"name\":\"newSilo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_siloVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_siloData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oracleData\",\"type\":\"bytes\"}],\"name\":\"newSiloVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionedSiloCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDefault\",\"type\":\"bool\"}],\"name\":\"registerSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAssetToRemove\",\"type\":\"address\"}],\"name\":\"removeBridgeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removedBridgeAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removedBridgeAssetsIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_siloVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_siloData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oracleData\",\"type\":\"bytes\"}],\"name\":\"replaceSilo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\"}],\"name\":\"setAssetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultInterestRateModel\",\"type\":\"address\"}],\"name\":\"setDefaultInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultLiquidationThreshold\",\"type\":\"uint256\"}],\"name\":\"setDefaultLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxLTV\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaximumLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposits\",\"type\":\"uint256\"}],\"name\":\"setDefaultSiloMaxDepositsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultVersion\",\"type\":\"uint256\"}],\"name\":\"setDefaultSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposits\",\"type\":\"uint256\"}],\"name\":\"setSiloMaxDepositsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokensFactory\",\"type\":\"address\"}],\"name\":\"setTokensFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"silo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloDefaultVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"siloFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloLatestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloMaxDepositsLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"siloOffChainVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"siloReverse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGuardedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLimitedMaxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePermissionedSiloCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensFactory\",\"outputs\":[{\"internalType\":\"contract ITokensFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_siloVersion\",\"type\":\"uint256\"}],\"name\":\"unregisterSiloVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"newSilo(address,uint256,bytes,address,bytes)\":{\"details\":\"use this method only when off-chain verification is OFF\",\"params\":{\"_oracle\":\"(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if it is the best one\",\"_oracleData\":\"custom data for oracle initialization\",\"_siloAsset\":\"silo asset\",\"_siloData\":\"(optional) data that may be needed during silo creation\",\"_siloVersion\":\"version of silo implementation\"}},\"newSiloVerified(uint8,bytes32,bytes32,address,uint256,bytes,address,bytes)\":{\"details\":\"use this method only when off-chain verification is ON\",\"params\":{\"_oracle\":\"(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if is is the best one\",\"_oracleData\":\"custom data for oracle initialization\",\"_r\":\"r portion of off-chain verifier signature\",\"_s\":\"s portion of off-chain verifier signature\",\"_siloAsset\":\"silo asset\",\"_siloData\":\"(optional) data that may be needed during silo creation\",\"_siloVersion\":\"version of silo implementation\",\"_v\":\"v portion of off-chain verifier signature\"}},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"replaceSilo(address,uint256,bytes,address,bytes)\":{\"details\":\"use this method to deploy new version of Silo for an asset that already has Silo deployed.      Only owner (DAO) can replace.\",\"params\":{\"_oracle\":\"(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if it is the best one\",\"_oracleData\":\"custom data for oracle initialization\",\"_siloAsset\":\"silo asset\",\"_siloData\":\"(optional) data that may be needed during silo creation\",\"_siloVersion\":\"version of silo implementation. Use 0 for default version which is fine        for 99% of cases.\"}},\"setVerifier(address)\":{\"params\":{\"_verifier\":\"off-chain verifier address, if set to address(0) then verification is off\"}},\"siloOffChainVerification(address,address,uint8,bytes32,bytes32)\":{\"details\":\"checks if off-chain verifier sign allowance to create silo         verifier signature if valid for an indefinite period\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"assetConfigs\":{\"details\":\"maps silo => asset => config\"},\"bridgeAssets\":{\"details\":\"List of bridge assets supported by the protocol\"},\"bridgeAssetsIndex\":{\"details\":\"Index mapping for bridgeAssets array\"},\"defaultAssetConfig\":{\"details\":\"Default values for AssetConfig. Used if values are not configured manually.\"},\"entryFee\":{\"details\":\"one time protocol fee for opening a borrow position in precision points\"},\"protocolLiquidationFee\":{\"details\":\"protocol share in liquidation profit\"},\"protocolShareFee\":{\"details\":\"protocol revenue share in interest paid\"},\"removedBridgeAssets\":{\"details\":\"List of bridge assets removed by the protocol\"},\"removedBridgeAssetsIndexes\":{\"details\":\"Index mapping for removedBridgeAssets array\"},\"silo\":{\"details\":\"maps token address to silo address, asset => silo\"},\"siloDefaultVersion\":{\"details\":\"0 means it is not set\"},\"siloFactory\":{\"details\":\"version => IFactory\"},\"siloLatestVersion\":{\"details\":\"0 means it is not set\"},\"siloReverse\":{\"details\":\"maps token address to silo address, silo => asset\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Repository.sol\":\"Repository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IBaseSilo.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/IRepository.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./Error.sol\\\";\\n\\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    /// @dev is value that used for integer calculations and decimal points for utilisation ratios, LTV, protocol fees\\n    uint256 public constant PRECISION_DECIMALS = 1e18;\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable ASSET_DECIMAL_POINTS;\\n    IRepository immutable public repository;\\n    // asset address for which Silo was created\\n    address public immutable siloAsset;\\n\\n    // asset => AssetStorage\\n    mapping(address => AssetStorage) public state;\\n\\n    modifier onlyExistingAsset(address _asset) {\\n        require(address(state[_asset].collateralToken) != address(0), \\\"BaseSilo: asset does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == repository.router(), \\\"BaseSilo: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier applyInterestsBefore(address _asset) {\\n        _accrueInterest(_asset, block.timestamp);\\n        _;\\n    }\\n\\n    modifier onlyWhenAssetActive(address _asset) {\\n        require(!state[_asset].removed, \\\"BaseSilo: asset removed\\\");\\n        _;\\n    }\\n\\n    modifier siloPositionSolvent(address _user) {\\n        _;\\n        require(isSolvent(_user), \\\"BaseSilo: not solvent in silo position\\\");\\n    }\\n\\n    modifier validateBorrow(address _user) {\\n        _;\\n        require(getLTV(_user) <= calculateUserLTV(_user, true), \\\"BaseSilo: maximumLTV\\\");\\n    }\\n\\n    modifier validateMaxDepositsAfter(address _asset) {\\n        _;\\n\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        require(\\n            oracle.getPrice(_asset) * state[_asset].totalDeposits / (10 ** ERC20(_asset).decimals()) <=\\n            IGuardedLaunch(address(repository)).getMaxSiloDeposits(address(this), _asset),\\n            \\\"BaseSilo: total deposits exceed liquidity limit\\\"\\n        );\\n    }\\n\\n    constructor (address _repository, address _siloAsset) {\\n        repository = IRepository(_repository);\\n        siloAsset = _siloAsset;\\n        ASSET_DECIMAL_POINTS = 10**ERC20(_siloAsset).decimals();\\n    }\\n\\n    function syncBridgeAssets() external {\\n        // sync removed assets\\n        address[] memory removedBridgeAssets = repository.getRemovedBridgeAssets();\\n\\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\\n            // If removed bridge asset is a silo asset for this silo, do not remove it\\n            if (removedBridgeAssets[i] != siloAsset) {\\n                state[removedBridgeAssets[i]].removed = true;\\n            }\\n        }\\n\\n        // init silo asset if needed\\n        if (address(state[siloAsset].collateralToken) == address(0)) {\\n            _initAsset(repository.tokensFactory(), siloAsset, false);\\n        }\\n\\n        // sync active assets\\n        address[] memory bridgeAssets = repository.getBridgeAssets();\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            state[bridgeAssets[i]].removed = false;\\n\\n            // In case a bridge asset is added that already has a Silo,\\n            // do not initiate that asset in its Silo\\n            if (address(state[bridgeAssets[i]].collateralToken) == address(0)) {\\n                _initAsset(repository.tokensFactory(), bridgeAssets[i], true);\\n            }\\n        }\\n    }\\n\\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\\n        return state[_asset];\\n    }\\n\\n    /// @dev Yearly interest rate for borrowing asset token, dynamically calculated for current block timestamp\\n    function interestRateAPY(address _asset) external view returns (uint256) {\\n        return _getModel(_asset).getCurrentInterestRate(\\n            address(this),\\n            _asset,\\n            block.timestamp\\n        );\\n    }\\n\\n    function interestRateTimestamp(address _asset) external view override returns (uint256) {\\n        return state[_asset].interestRateTimestamp;\\n    }\\n\\n    function getUtilization(address _asset) external view override returns (uint256) {\\n        uint256 totalBorrowAmountCached = state[_asset].totalBorrowAmount;\\n        uint256 totalDepositsCached = state[_asset].totalDeposits;\\n        if (totalDepositsCached == 0 || totalBorrowAmountCached == 0) return 0;\\n\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 DP = uint256(_getModel(_asset).DP());\\n        return totalBorrowAmountCached * DP / totalDepositsCached;\\n    }\\n\\n    /// @dev returns total deposits with interest dynamically calculated at current block timestamp\\n    function totalDepositsWithInterest(address _asset) public view returns (uint256 _totalDeposits) {\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRate(address(this), _asset, block.timestamp);\\n\\n        uint256 protocolShareFee = repository.protocolShareFee();\\n        uint256 depositorsShare = PRECISION_DECIMALS - protocolShareFee;\\n        uint256 assetDeposits = state[_asset].totalDeposits;\\n\\n        return assetDeposits + assetDeposits * rcomp * depositorsShare / PRECISION_DECIMALS / PRECISION_DECIMALS;\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        address[] memory bridgeAssets = repository.getBridgeAssets();\\n        address[] memory removedBridgeAssets = repository.getRemovedBridgeAssets();\\n        uint256 allAssetsLength = bridgeAssets.length + removedBridgeAssets.length + 1;\\n        assets = new address[](allAssetsLength);\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            assets[i] = bridgeAssets[i];\\n        }\\n\\n        for (uint256 i = bridgeAssets.length; i < bridgeAssets.length + removedBridgeAssets.length; i++) {\\n            assets[i] = bridgeAssets[i];\\n        }\\n\\n        assets[allAssetsLength - 1] = siloAsset;\\n    }\\n\\n    function isSolvent(address _user) public view override returns (bool) {\\n        require(_user != address(0), \\\"BaseSilo: user != address(0)\\\");\\n\\n        uint256 liquidationThreshold = calculateUserLTV(_user, false);\\n        uint256 ltv = getLTV(_user);\\n        return ltv <= liquidationThreshold;\\n    }\\n\\n    /// Loan-To-Value\\n    function getLTV(address _user) public view override returns (uint256) {\\n        address[] memory assets = getAssets();\\n        uint256 collateralValue;\\n        uint256 borrowAmountValue;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 assetPrice = oracle.getPrice(assets[i]);\\n            uint256 decimals = ERC20(assets[i]).decimals();\\n\\n            uint256 _borrowAmountValue = calculateBorrowValue(_user, assets[i], assetPrice, decimals);\\n\\n            // It should be impossible but never too safe. If a user somehow ends up with debt\\n            // and collateral in single asset, we ignore collateral value of that asset\\n            if (_borrowAmountValue > 0) {\\n                borrowAmountValue += _borrowAmountValue;\\n            } else {\\n                // We allow removed bridge asset to be a collateral, that's why we do not check for:\\n                // !state[assets[i]].removed\\n                // otherwise people may be liquidated right away.\\n                collateralValue += calculateCollateralValue(_user, assets[i], assetPrice, decimals);\\n            }\\n        }\\n\\n        if (borrowAmountValue == 0) return 0;\\n        if (collateralValue == 0) return INFINITY;\\n\\n        return borrowAmountValue * PRECISION_DECIMALS / collateralValue;\\n    }\\n\\n    /// @dev value of collateral (asset) provided by user\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        AssetStorage storage _state = state[_asset];\\n\\n        uint256 assetAmount = _state.collateralToken.balanceOf(_user).toAmount(\\n            totalDepositsWithInterest(_asset),\\n            _state.collateralToken.totalSupply()\\n        );\\n\\n        uint256 assetCollateralOnlyAmount = _state.collateralOnlyToken.balanceOf(_user).toAmount(\\n            _state.collateralOnlyDeposits,\\n            _state.collateralOnlyToken.totalSupply()\\n        );\\n\\n        return (assetAmount + assetCollateralOnlyAmount) * _assetPrice / (10 ** _assetDecimals);\\n    }\\n\\n    /// @dev Amount of token that is available for borrowing.\\n    /// @return Silo liquidity\\n    function liquidity(address _asset) public view returns (uint256) {\\n        return ERC20(_asset).balanceOf(address(this)) - state[_asset].collateralOnlyDeposits;\\n    }\\n\\n    function calcFee(uint256 _amount) public view returns (uint256) {\\n        uint256 entryFee = repository.entryFee();\\n        if (entryFee == 0) return 0; // no fee\\n\\n        return _amount * entryFee / PRECISION_DECIMALS;\\n    }\\n\\n    function calculateBorrowValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 debtAmount = getBorrowAmount(_asset, _user, block.timestamp);\\n        return debtAmount * _assetPrice / (10 ** _assetDecimals);\\n    }\\n\\n    /// @return assetDebtAmount total amount of asset user needs to repay at provided timestamp\\n    function getBorrowAmount(address _asset, address _user, uint256 _timestamp) public view returns (uint256) {\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRate(address(this), _asset, _timestamp);\\n        uint256 totalBorrowAmountCached = state[_asset].totalBorrowAmount;\\n        totalBorrowAmountCached += totalBorrowAmountCached * rcomp / PRECISION_DECIMALS;\\n\\n        return state[_asset].debtToken.balanceOf(_user).toAmount(\\n            totalBorrowAmountCached,\\n            state[_asset].debtToken.totalSupply()\\n        );\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\\n        return state[_asset].debtToken.balanceOf(_depositor) == 0;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\\n        return state[_asset].collateralToken.balanceOf(_borrower) == 0\\n            && state[_asset].collateralOnlyToken.balanceOf(_borrower) == 0;\\n    }\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool useMaximumLTV) public view override returns (uint256) {\\n        uint256 totalCollateralValue;\\n        uint256 totalAvailableToBorrow;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        address[] memory assets = getAssets();\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 assetPrice = oracle.getPrice(assets[i]);\\n            uint256 decimals = ERC20(assets[i]).decimals();\\n\\n            uint256 deposit = state[assets[i]].collateralToken.balanceOf(_user) +\\n            state[assets[i]].collateralOnlyToken.balanceOf(_user);\\n\\n            // do math only if user has collateral deposited for given asset\\n            if (deposit != 0) {\\n                uint256 collateralValue = calculateCollateralValue(_user, assets[i], assetPrice, decimals);\\n                uint256 assetLTV = useMaximumLTV ?\\n                repository.getMaximumLTV(address(this), assets[i]) :\\n                repository.getLiquidationThreshold(address(this), assets[i]);\\n                // value that can be borrowed against the deposit\\n                // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\\n                uint256 availableToBorrow = collateralValue * assetLTV / PRECISION_DECIMALS;\\n\\n                totalCollateralValue += collateralValue;\\n                totalAvailableToBorrow += availableToBorrow;\\n            }\\n        }\\n\\n        if (totalAvailableToBorrow == 0) return 0;\\n        if (totalCollateralValue == 0) return INFINITY;\\n\\n        return totalAvailableToBorrow * PRECISION_DECIMALS / totalCollateralValue;\\n    }\\n\\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\\n        // Naming convention in UNI example:\\n        // - for siloAsset: SiloUNI, Debt-SiloUNI, SiloUNI-collateral-ONLY\\n        // - for bridgeAsset: SiloUNI-ETH, Debt-SiloUNI-ETH, SiloUNI-ETH-collateral-ONLY\\n        string memory collateralName;\\n        string memory debtName;\\n        string memory assetSymbol = ERC20(_asset).symbol();\\n\\n        if (_isBridgeAsset) {\\n            string memory baseSymbol = state[siloAsset].collateralToken.symbol();\\n            collateralName = string(abi.encodePacked(baseSymbol, string(\\\"-\\\"), assetSymbol));\\n        } else {\\n            string memory baseSymbol = \\\"Silo\\\";\\n            collateralName = string(abi.encodePacked(baseSymbol, assetSymbol));\\n        }\\n        string memory collateralOnlyName = string(abi.encodePacked(collateralName, string(\\\"-collateral-ONLY\\\")));\\n\\n        debtName = string(abi.encodePacked(string(\\\"Debt-\\\"), collateralName));\\n\\n        state[_asset].collateralToken = _tokensFactory.createShareCollateralToken(\\n            collateralName, collateralName, _asset\\n        );\\n\\n        state[_asset].collateralOnlyToken = _tokensFactory.createShareCollateralToken(\\n            collateralOnlyName, collateralOnlyName, _asset\\n        );\\n\\n        state[_asset].debtToken = _tokensFactory.createShareDebtToken(debtName, debtName, _asset);\\n    }\\n\\n    function _deposit(\\n        address _asset,\\n        address _from,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant\\n        onlyExistingAsset(_asset)\\n        onlyWhenAssetActive(_asset)\\n        applyInterestsBefore(_asset)\\n        validateMaxDepositsAfter(_asset)\\n    {\\n        if (!depositPossible(_asset, _depositor)) {\\n            revert DepositNotPossible(_asset, _depositor);\\n        }\\n\\n        AssetStorage storage _state = state[_asset];\\n\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\\n\\n        if (_collateralOnly) {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\\n            _state.collateralOnlyToken.mint(_depositor, share);\\n        } else {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\\n            _state.totalDeposits = totalDepositsCached + _amount;\\n            _state.collateralToken.mint(_depositor, share);\\n        }\\n\\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        internal\\n        nonReentrant\\n        onlyExistingAsset(_asset)\\n        onlyWhenAssetActive(_asset)\\n        validateBorrow(_borrower)\\n        applyInterestsBefore(_asset)\\n    {\\n        if (!borrowPossible(_asset, _borrower)) {\\n            revert(\\\"BorrowNotPossible\\\");\\n        }\\n\\n        AssetStorage storage _state = state[_asset];\\n        require(liquidity(_asset) >= _amount, \\\"BaseSilo: deposit shortage\\\");\\n\\n        uint256 fee = calcFee(_amount);\\n        uint256 borrowerShare = (_amount + fee).toShare(_state.totalBorrowAmount, _state.debtToken.totalSupply());\\n\\n        _state.debtToken.mint(_borrower, borrowerShare);\\n        _state.totalBorrowAmount += _amount + fee;\\n        _state.protocolFees += fee;\\n\\n        emit Borrow(_asset, _borrower, _amount);\\n\\n        ERC20(_asset).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function _flashUserLiquidation(address[] memory _allSiloAssets, address _borrower, address _liquidator)\\n        internal\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepaid)\\n    {\\n        uint256 blockTimestamp = block.timestamp;\\n        uint256 assetsLength = _allSiloAssets.length;\\n        receivedCollaterals = new uint256[](assetsLength);\\n        amountsToRepaid = new uint256[](assetsLength);\\n\\n        for (uint256 i = 0; i < assetsLength; i++) {\\n            AssetStorage storage _state = state[_allSiloAssets[i]];\\n\\n            _accrueInterest(_allSiloAssets[i], blockTimestamp);\\n            // we do not allow for partial repayment on liquidation, that's why max\\n            (amountsToRepaid[i],) = _calculateAmountAndShare(_state, _borrower, type(uint256).max);\\n\\n\\n            (, uint256 withdrawnOnlyAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.collateralOnlyDeposits,\\n                type(uint256).max,\\n                _state.collateralOnlyToken,\\n                _borrower,\\n                _liquidator\\n            );\\n\\n            (,uint256 withdrawnAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.totalDeposits,\\n                type(uint256).max,\\n                _state.collateralToken,\\n                _borrower,\\n                _liquidator\\n            );\\n\\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from particular asset\\n    /// @param _asset asset we want to harvest fees from\\n    /// @param _receiver address of fees receiver\\n    function _harvestProtocolFees(address _asset, address _receiver) internal {\\n        AssetStorage storage _state = state[_asset];\\n        uint256 protocolFeesCached = _state.protocolFees;\\n        uint256 availableFees = protocolFeesCached - _state.harvestedProtocolFees;\\n        if (availableFees == 0) return;\\n\\n        _state.harvestedProtocolFees = protocolFeesCached;\\n        ERC20(_asset).safeTransfer(_receiver, availableFees);\\n    }\\n\\n    /// @param _asset address\\n    /// @param _blockTimestamp current timestamp\\n    function _accrueInterest(address _asset, uint256 _blockTimestamp) internal {\\n        AssetStorage storage _state = state[_asset];\\n\\n        if (_blockTimestamp == _state.interestRateTimestamp) {\\n            return;\\n        }\\n\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, _blockTimestamp);\\n        uint256 protocolShareFee = repository.protocolShareFee();\\n\\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\\n\\n        uint256 totalInterest = totalBorrowAmountCached * rcomp / PRECISION_DECIMALS;\\n        uint256 protocolShare = totalInterest * protocolShareFee / PRECISION_DECIMALS;\\n        uint256 depositorsShare = totalInterest - protocolShare;\\n\\n        // update contract state\\n        _state.totalBorrowAmount = totalBorrowAmountCached + totalInterest;\\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\\n        _state.protocolFees = _state.protocolFees + protocolShare;\\n        _state.interestRateTimestamp = _blockTimestamp;\\n    }\\n\\n    function _withdraw(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant // because we transfering tokens\\n        onlyExistingAsset(_asset)\\n        siloPositionSolvent(_depositor)\\n        applyInterestsBefore(_asset)\\n        returns (uint256 amount)\\n    {\\n        AssetStorage storage _state = state[_asset];\\n        uint256 burnedShare;\\n\\n        if (_collateralOnly) {\\n            uint256 collateralOnlyDepositsCached = _state.collateralOnlyDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                collateralOnlyDepositsCached,\\n                _amount,\\n                _state.collateralOnlyToken,\\n                _depositor,\\n                _receiver\\n            );\\n\\n            _state.collateralOnlyDeposits = collateralOnlyDepositsCached - _amount;\\n        } else {\\n            uint256 totalDepositsCached = _state.totalDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                totalDepositsCached,\\n                _amount,\\n                _state.collateralToken,\\n                _depositor,\\n                _receiver\\n            );\\n\\n            _state.totalDeposits = totalDepositsCached - _amount;\\n        }\\n\\n        emit Withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n\\n        return _amount;\\n    }\\n\\n    function _withdrawAsset(\\n        address _asset,\\n        uint256 _assetTotalDeposits,\\n        uint256 _assetAmount,\\n        IShareToken _shareToken,\\n        address _depositor,\\n        address _receiver\\n    )\\n        internal\\n        returns (uint256 burnedShare, uint256 withdrawnAmount)\\n    {\\n        if (_assetAmount == type(uint256).max) {\\n            burnedShare = _shareToken.balanceOf(_depositor);\\n            withdrawnAmount = burnedShare.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\\n        } else {\\n            burnedShare = _assetAmount.toShare(_assetTotalDeposits, _shareToken.totalSupply());\\n            withdrawnAmount = _assetAmount;\\n        }\\n\\n        if (withdrawnAmount == 0) return (0, 0);\\n\\n        _shareToken.burn(_depositor, burnedShare);\\n\\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\\n        ERC20(_asset).safeTransfer(_receiver, withdrawnAmount);\\n    }\\n\\n    /// @dev gets interest rates model object\\n    /// @param _asset asset for which to calculate interest rate\\n    /// @return IInterestRateModel interest rates model object\\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\\n        return IInterestRateModel(repository.getInterestRateModel(address(this), _asset));\\n    }\\n\\n    /// @dev calculates amount to repay based on user shares,\\n    ///         we do not apply virtual balances here, if needed, thay need to be apply beforehand\\n    /// @param _assetStorage asset storage\\n    /// @param _borrower borrower address\\n    /// @param _amount proposed amount to repay, based on that\\n    /// @return amount amount to repay\\n    /// @return repayShare amount to repay as share\\n    function _calculateAmountAndShare(AssetStorage storage _assetStorage, address _borrower, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 amount, uint256 repayShare)\\n    {\\n        uint256 borrowerDebtShare = _assetStorage.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\\n\\n        if (_amount == type(uint256).max) {\\n            repayShare = borrowerDebtShare;\\n            amount = repayShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n        } else {\\n            uint256 maxAmount = borrowerDebtShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n\\n            if (_amount <= maxAmount) {\\n                repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\\n                amount = _amount;\\n            } else {\\n                repayShare = borrowerDebtShare;\\n                amount = maxAmount;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe13989d089acf3618a34231ae1e4ec3a23110ce49902a333f37904d36b50ca2f\",\"license\":\"BUSL-1.1\"},\"contracts/Error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nerror AccessDenied();\\n\\nerror BridgeSiloExists(address bridgeSilo);\\n\\nerror BorrowNotPossible();\\n\\nerror DepositNotPossible(address asset, address depositor);\\n\\nerror ShareTransferNotAllowed();\\n\",\"keccak256\":\"0x3efd4befa380d62701a17a908dab22cb6aa3e5b2f9dadaf555640a7be75c1f4d\",\"license\":\"BUSL-1.1\"},\"contracts/Repository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IRepository.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\n\\nimport \\\"./utils/GuardedLaunch.sol\\\";\\nimport \\\"./Silo.sol\\\";\\nimport \\\"./Error.sol\\\";\\nimport \\\"./interfaces/ITokensFactory.sol\\\";\\n\\n/* solhint-disable max-states-count */\\ncontract Repository is IRepository, GuardedLaunch {\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if a collateral has a LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of ETH in the principal currency for every 1 ETH worth of collateral.\\n        uint256 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        uint256 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        address interestRateModel;\\n    }\\n\\n    /// @dev Default values for AssetConfig. Used if values are not configured manually.\\n    AssetConfig public defaultAssetConfig;\\n\\n    /// @dev List of bridge assets supported by the protocol\\n    address[] public bridgeAssets;\\n\\n    /// @dev List of bridge assets removed by the protocol\\n    address[] public removedBridgeAssets;\\n\\n    /// @dev Index mapping for bridgeAssets array\\n    mapping(address => uint256) public bridgeAssetsIndex;\\n\\n    /// @dev Index mapping for removedBridgeAssets array\\n    mapping(address => uint256) public removedBridgeAssetsIndexes;\\n\\n    /// @dev one time protocol fee for opening a borrow position in precision points\\n    uint256 public override entryFee;\\n    /// @dev protocol revenue share in interest paid\\n    uint256 public override protocolShareFee;\\n    /// @dev protocol share in liquidation profit\\n    uint256 public protocolLiquidationFee;\\n\\n    ITokensFactory public override tokensFactory;\\n    address public override oracle;\\n    address public override router;\\n\\n    /// @dev version => IFactory\\n    mapping(uint256 => IFactory) public override siloFactory;\\n\\n    /// @dev 0 means it is not set\\n    uint256 public siloDefaultVersion;\\n\\n    /// @dev 0 means it is not set\\n    uint256 public siloLatestVersion;\\n\\n    /// @dev maps token address to silo address, asset => silo\\n    mapping(address => address) public override silo;\\n    /// @dev maps token address to silo address, silo => asset\\n    mapping(address => address) public siloReverse;\\n    /// @dev maps silo => asset => config\\n    mapping(address => mapping(address => AssetConfig)) public assetConfigs;\\n\\n    constructor(\\n        address _siloVerifier,\\n        address _factory,\\n        address _tokensFactory,\\n        uint256 _defaultMaxLTV,\\n        uint256 _defaultLiquidationThreshold,\\n        address[] memory _bridgeAssets\\n    ) GuardedLaunch(_siloVerifier) {\\n        require(_factory != address(0), \\\"Repository.constructor: empty factory\\\");\\n        require(_tokensFactory != address(0), \\\"Repository.constructor: empty tokensFactory\\\");\\n        require(_bridgeAssets.length != 0, \\\"Repository.constructor: empty bridgeAssets\\\");\\n\\n        for (uint256 i = 0; i < _bridgeAssets.length; i++) {\\n            // this is instead of checking if address != 0\\n            ERC20(_bridgeAssets[i]).decimals();\\n        }\\n\\n        siloDefaultVersion = 1;\\n        siloLatestVersion = 1;\\n        siloFactory[1] = IFactory(_factory);\\n        tokensFactory = ITokensFactory(_tokensFactory);\\n\\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n        bridgeAssets = _bridgeAssets;\\n    }\\n\\n    function setTokensFactory(address _tokensFactory) external onlyOwner {\\n        require(_tokensFactory != address(0), \\\"Repository.setTokensFactory: empty tokensFactory\\\");\\n\\n        emit TokensFactoryUpdate(address(tokensFactory), _tokensFactory);\\n        tokensFactory = ITokensFactory(_tokensFactory);\\n    }\\n\\n    function setFees(uint256 _entryFee, uint256 _protocolShareFee, uint256 _protocolLiquidationFee) external onlyOwner {\\n        emit FeeUpdate(\\n            entryFee,\\n            _entryFee,\\n            protocolShareFee,\\n            _protocolShareFee,\\n            protocolLiquidationFee,\\n            _protocolLiquidationFee\\n        );\\n\\n        entryFee = _entryFee;\\n        protocolShareFee = _protocolShareFee;\\n        protocolLiquidationFee = _protocolLiquidationFee;\\n    }\\n\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxLoanToValue,\\n        uint256 _liquidationThreshold,\\n        address _interestRateModel\\n    ) external onlyOwner {\\n        assetConfigs[_silo][_asset] = AssetConfig(_maxLoanToValue, _liquidationThreshold, _interestRateModel);\\n    }\\n\\n    function setDefaultInterestRateModel(address _defaultInterestRateModel) external onlyOwner {\\n        require(_defaultInterestRateModel != address(0), \\\"Repository: new defaultInterestRateModel is zero address\\\");\\n        emit InterestRateModel(defaultAssetConfig.interestRateModel, _defaultInterestRateModel);\\n        defaultAssetConfig.interestRateModel = _defaultInterestRateModel;\\n    }\\n\\n    function setDefaultMaximumLTV(uint256 _defaultMaxLTV) external onlyOwner {\\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\\n    }\\n\\n    function setDefaultLiquidationThreshold(uint256 _defaultLiquidationThreshold) external onlyOwner {\\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOwner {\\n        require(_oracle != address(0), \\\"Repository: new oracle is zero address\\\");\\n        emit OracleUpdate(oracle, _oracle);\\n        oracle = _oracle;\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        require(_router != address(0), \\\"Repository: new router is zero address\\\");\\n        emit RouterUpdate(router, _router);\\n        router = _router;\\n    }\\n\\n    function addBridgeAsset(address _newBridgeAsset) external onlyOwner {\\n        if (bridgeAssets.length != 0) {\\n            require(\\n                bridgeAssetsIndex[_newBridgeAsset] == 0 && bridgeAssets[0] != _newBridgeAsset,\\n                \\\"Repository: asset already added\\\"\\n            );\\n        }\\n\\n        bridgeAssetsIndex[_newBridgeAsset] = bridgeAssets.length;\\n        bridgeAssets.push(_newBridgeAsset);\\n        emit BridgeAssetAdded(_newBridgeAsset);\\n\\n        _removeFromArray(removedBridgeAssetsIndexes, removedBridgeAssets, _newBridgeAsset);\\n    }\\n\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external onlyOwner {\\n        if (removedBridgeAssets.length != 0) {\\n            require(\\n                removedBridgeAssetsIndexes[_bridgeAssetToRemove] == 0 &&\\n                removedBridgeAssets[0] != _bridgeAssetToRemove,\\n                \\\"Repository: asset already removed\\\"\\n            );\\n        }\\n\\n        removedBridgeAssetsIndexes[_bridgeAssetToRemove] = removedBridgeAssets.length;\\n        removedBridgeAssets.push(_bridgeAssetToRemove);\\n        emit BridgeAssetRemoved(_bridgeAssetToRemove);\\n\\n        _removeFromArray(bridgeAssetsIndex, bridgeAssets, _bridgeAssetToRemove);\\n    }\\n\\n    /// @inheritdoc IRepository\\n    function newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external override {\\n        require(siloVerifier == address(0), \\\"Repository: use newSiloVerified\\\");\\n\\n        _newSilo(_siloAsset, _siloVersion, _siloData, _oracle, _oracleData, false);\\n    }\\n\\n    /// @inheritdoc IRepository\\n    function newSiloVerified(\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    )\\n        external\\n        override\\n    {\\n        require(\\n            siloOffChainVerification(_siloAsset, ISiloOracleRepository(oracle).quoteToken(), _v, _r, _s),\\n            \\\"Repository: off-chain verification failed\\\"\\n        );\\n\\n        _newSilo(_siloAsset, _siloVersion, _siloData, _oracle, _oracleData, false);\\n    }\\n\\n    /// @inheritdoc IRepository\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external override onlyOwner {\\n        require(siloVerifier == address(0), \\\"Repository: use newSiloVerified\\\");\\n\\n        _newSilo(_siloAsset, _siloVersion, _siloData, _oracle, _oracleData, true);\\n    }\\n\\n    function registerSiloVersion(IFactory _factory, bool _isDefault) external onlyOwner {\\n        uint256 newVersion = siloLatestVersion + 1;\\n        siloLatestVersion = newVersion;\\n        siloFactory[newVersion] = _factory;\\n        if (_isDefault) siloDefaultVersion = newVersion;\\n\\n        emit RegisterSiloVersion(address(_factory), newVersion, siloDefaultVersion);\\n    }\\n\\n    function unregisterSiloVersion(uint256 _siloVersion) external onlyOwner {\\n        emit UnregisterSiloVersion(address(siloFactory[_siloVersion]), _siloVersion);\\n        siloFactory[_siloVersion] = IFactory(address(0));\\n    }\\n\\n    function setDefaultSiloVersion(uint256 _defaultVersion) external onlyOwner {\\n        require(_defaultVersion != 0 && _defaultVersion <= siloLatestVersion, \\\"Repository: version does not exist\\\");\\n        emit SiloDefaultVersion(siloDefaultVersion, _defaultVersion);\\n        siloDefaultVersion = _defaultVersion;\\n    }\\n\\n    function isSilo(address _silo) external view override returns (bool) {\\n        return siloReverse[_silo] != address(0);\\n    }\\n\\n    function getBridgeAssets() external view override returns (address[] memory) {\\n        return bridgeAssets;\\n    }\\n\\n    function getRemovedBridgeAssets() external view override returns (address[] memory) {\\n        return removedBridgeAssets;\\n    }\\n\\n    function getMaximumLTV(address _silo, address _asset) external view override returns (uint256) {\\n        uint256 maxLoanToValue = assetConfigs[_silo][_asset].maxLoanToValue;\\n        if (maxLoanToValue != 0) {\\n            return maxLoanToValue;\\n        }\\n        return defaultAssetConfig.maxLoanToValue;\\n    }\\n\\n    function getInterestRateModel(address _silo, address _asset) external view override returns (address) {\\n        address interestRateModel = assetConfigs[_silo][_asset].interestRateModel;\\n        if (interestRateModel != address(0)) {\\n            return interestRateModel;\\n        }\\n        return defaultAssetConfig.interestRateModel;\\n    }\\n\\n    function getLiquidationThreshold(address _silo, address _asset) external view override returns (uint256) {\\n        uint256 liquidationThreshold = assetConfigs[_silo][_asset].liquidationThreshold;\\n\\n        if (liquidationThreshold != 0) {\\n            return liquidationThreshold;\\n        }\\n\\n        return defaultAssetConfig.liquidationThreshold;\\n    }\\n\\n    function owner() public view override(IRepository, TwoStepOwnable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /// @dev Deploys latest default Silo\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function _newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData,\\n        bool _replace\\n    )\\n        internal\\n        isPermissionedSiloCreation\\n    {\\n        // 0 means default version\\n        if (_siloVersion == 0) _siloVersion = siloDefaultVersion;\\n        address[] memory _bridgeAssets = bridgeAssets;\\n\\n        // if replacing, do not check for duplicates\\n        if (!_replace) _requireNoSiloDuplicates(_bridgeAssets, _siloAsset);\\n\\n        address _silo = siloFactory[_siloVersion].createSilo(_siloAsset, _siloData);\\n        Silo(_silo).syncBridgeAssets();\\n\\n        silo[_siloAsset] = _silo;\\n        siloReverse[_silo] = _siloAsset;\\n        emit NewSilo(_silo, _siloAsset, _siloVersion, _bridgeAssets);\\n\\n        ISiloOracleRepository(oracle).initOracleForAsset(_siloAsset, _oracle, _oracleData);\\n    }\\n\\n    function _removeFromArray(\\n        mapping(address => uint256) storage _indexes,\\n        address[] storage _array,\\n        address _asset\\n    ) internal {\\n        uint256 arrayLength = _array.length;\\n        if (arrayLength == 0) return;\\n\\n        uint256 _assetIndex = _indexes[_asset];\\n        if (_array[_assetIndex] != _asset) return;\\n\\n        uint256 lastIndex = arrayLength - 1;\\n\\n        if (_assetIndex != lastIndex) {\\n            address assetAddr = _array[lastIndex];\\n            _array[_assetIndex] = assetAddr;\\n            _indexes[assetAddr] = _assetIndex;\\n        }\\n\\n        delete _indexes[_asset];\\n        _array.pop();\\n    }\\n\\n    /// @dev Revert if Silo Version is already deployed\\n    function _requireNoSiloDuplicates(address[] memory _bridgeAssets, address _siloAsset) internal view {\\n        // Check if there's more than one bridge asset and if _siloAsset is bridge asset\\n        if (_bridgeAssets.length > 1 && _bridgeAssets[bridgeAssetsIndex[_siloAsset]] == _siloAsset) {\\n            for (uint256 i = 0; i < _bridgeAssets.length; i++) {\\n                // make sure there isn't a bridge assets silo deployed already\\n                if (siloReverse[_bridgeAssets[i]] != address(0)) {\\n                    revert BridgeSiloExists(silo[_bridgeAssets[i]]);\\n                }\\n            }\\n        } else {\\n            require(\\n                bridgeAssets[bridgeAssetsIndex[_siloAsset]] != _siloAsset,\\n                \\\"Repository: cannot create Silo for single bridge asset\\\"\\n            );\\n        }\\n\\n        require(silo[_siloAsset] == address(0), \\\"Repository: silo exists\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf3fdcef9963cf4b7745946872685f07f9339e5695c12e8baa5370e5e53b8b8b2\",\"license\":\"BUSL-1.1\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./BaseSilo.sol\\\";\\n\\ncontract Silo is ISilo, BaseSilo {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    constructor (address _repository, address _siloAsset) BaseSilo(_repository, _siloAsset) {}\\n\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external override onlyRouter {\\n        _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address of the collateral tokens source account\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    function borrow(address _asset, uint256 _amount) external override {\\n        _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address of the debt tokens receiver\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repay(address _asset, uint256 _amount) external override {\\n        _repay(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repayFor(address _asset, address _borrower, uint256 _amount) external override {\\n        require(!isSolvent(_borrower), \\\"Silo.repayFor: borrower is solvent\\\");\\n\\n        _repay(_asset, _borrower, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        override\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepay\\n        )\\n    {\\n        assets = getAssets();\\n        uint256 usersLength = _users.length;\\n        receivedCollaterals = new uint256[][](usersLength);\\n        shareAmountsToRepay = new uint256[][](usersLength);\\n\\n        for (uint256 i = 0; i < usersLength; i++) {\\n            (\\n                receivedCollaterals[i],\\n                shareAmountsToRepay[i]\\n            ) = _userLiquidation(assets, _users[i], _liquidator, _flashReceiver, _flashReceiverData);\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @param _assets array of assets we want to harvest fees from\\n    function harvestProtocolFees(address[] calldata _assets) external {\\n        address repositoryOwner = repository.owner();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            _harvestProtocolFees(_assets[i], repositoryOwner);\\n        }\\n    }\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    function accrueInterest(address _asset) public {\\n        _accrueInterest(_asset, block.timestamp);\\n    }\\n\\n    /// @param _assets all currant assets, this is optimisation, so we don't have to read it from storage few times\\n    /// @param _user user to liquidate\\n    /// @param _liquidator address which will get all collaterals\\n    /// @param _flashReceiver address which will be notified once collaterals will be send\\n    /// @param _flashReceiverData custom data to forward to receiver\\n    /// @return receivedCollaterals amounts of collaterals transfered to liquidator\\n    /// @return shareAmountsToRepay expected amounts to repay\\n    function _userLiquidation(\\n        address[] memory _assets,\\n        address _user,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        internal\\n        nonReentrant // because of _flashReceiver.siloLiquidationCallback\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\\n    {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) {\\n            uint256[] memory empty = new uint256[](_assets.length);\\n            return (empty, empty);\\n        }\\n\\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, _liquidator);\\n\\n        // _flashReceiver needs to repayFor user\\n        _flashReceiver.siloLiquidationCallback(\\n            _user,\\n            _assets,\\n            receivedCollaterals,\\n            shareAmountsToRepay,\\n            _flashReceiverData\\n        );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\\n            }\\n        }\\n\\n        require(isSolvent(_user), \\\"Silo: user not solvent\\\");\\n    }\\n\\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\\n        internal\\n        onlyExistingAsset(_asset)\\n        applyInterestsBefore(_asset)\\n        returns (uint256)\\n    {\\n        AssetStorage storage _assetStorage = state[_asset];\\n        uint256 repayShare;\\n\\n        (_amount, repayShare) = _calculateAmountAndShare(_assetStorage, _borrower, _amount);\\n\\n        if (repayShare == 0) {\\n            return 0;\\n        }\\n\\n        emit Repay(_asset, _borrower, _amount);\\n\\n        // we checking balances in case of fee on transfer tokens or any other weird stuff\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n        require(balanceAfter - balanceBefore >= _amount, \\\"Silo: transferred amount is lower that required amount\\\");\\n\\n        // we do not using reentrancy, so just in case change status about debt after token transfer\\n        _assetStorage.debtToken.burn(_borrower, repayShare);\\n        _assetStorage.totalBorrowAmount -= _amount;\\n\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e72fa261ba24efafdb8b9bf2bd7635580c86930851e9d79f7ad478eb88df526\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Liquidate(address indexed asset, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f10a064de5d9f67cb6730af6287410335201becab000dea6588cee0e05f10\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IFactory {\\n    /// @param _siloAsset silo asset\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n}\\n\",\"keccak256\":\"0x9a643f4989007ea17ff7565a83604b1cbed5ea33db01cb21ded8b75f64038ce3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IGuardedLaunch {\\n    function getMaxSiloDeposits(address silo, address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbea7830574e57ec0a33ea020e0fee77dd0253403d16c9f0b089f33c1cd106c84\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x5909b480d87f4147e8c83c6b60a0c5b7c3b8af53de402823b44396acc8fe4f6d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\n\\ninterface IRepository {\\n    event NewSilo(address indexed silo, address indexed asset, uint256 siloVersion, address[] bridgeAssets);\\n\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    event InterestRateModel(address oldModel, address newModel);\\n\\n    event BridgePoolUpdate(address oldPool, address newPool);\\n\\n    event OracleUpdate(address oldOracle, address newOracle);\\n\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    event RegisterSiloVersion(address factory, uint256 siloLatestVersion, uint256 siloDefaultVersion);\\n\\n    event UnregisterSiloVersion(address factory, uint256 siloVersion);\\n\\n    event SiloDefaultVersion(uint256 siloDefaultVersion, uint256 defaultVersion);\\n\\n    event FeeUpdate(\\n        uint256 oldEntryFee,\\n        uint256 newEntryFee,\\n        uint256 oldProtocolShareFee,\\n        uint256 newProtocolShareFee,\\n        uint256 oldProtocolLiquidationFee,\\n        uint256 newProtocolLiquidationFee\\n    );\\n\\n    /// @dev use this method only when off-chain verification is OFF\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    ///      Only owner (DAO) can replace.\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    ///        for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method only when off-chain verification is ON\\n    /// @param _v v portion of off-chain verifier signature\\n    /// @param _r r portion of off-chain verifier signature\\n    /// @param _s s portion of off-chain verifier signature\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSiloVerified(\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address asset) external view returns (address);\\n    function siloFactory(uint256 siloVersion) external view returns (IFactory);\\n    function tokensFactory() external view returns (ITokensFactory);\\n    function router() external view returns (address);\\n    function getBridgeAssets() external view returns (address[] memory);\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n    function oracle() external view returns (address);\\n    function owner() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getInterestRateModel(address silo, address asset) external view returns (address);\\n    function getMaximumLTV(address silo, address asset) external view returns (uint256);\\n    function getLiquidationThreshold(address silo, address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x986e8172608e2a866c1cf43f21305c6ce59610b82c8c986710d55c5cd2480c74\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc1931b12d3f8c39887ce79bc191603ef2e0be0b5836968d68976760d139c9399\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n\\n    /// @param _asset asset address\\n    /// @param _rawSearch boolean\\n    ///         - if FALSE, it performs search with all requirements, for example, TWAP readiness\\n    ///         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)\\n    ///           that needs to be done for guarded silo creations\\n    function findBestOracle(address _asset, bool _rawSearch) external view returns (address);\\n\\n    /// @return price TWAP price of a token\\n    function getPrice(address token) external view returns (uint256 price);\\n\\n    /// @param _asset address\\n    /// @return oracle address assigned for asset\\n    function assetsOracles(address _asset) external view returns (address oracle);\\n\\n    function quoteToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6734db1e43519390a7b4247bfe0bae80b5c23cfc88bb0b041604a6bd85f5c8dd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n}\\n\",\"keccak256\":\"0xcdb6f1a6c67d6f9ab29276e9577701ae6efbf8076ab31c1ac5963aff1385292b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0xbbec207b8ca3ebf7f952fa30fa0a9361d6091d3fc9e64c0d82685cb4d87ee39f\",\"license\":\"BUSL-1.1\"},\"contracts/utils/GuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./TwoStepOwnable.sol\\\";\\n\\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnable {\\n    uint256 public constant INFINITY = type(uint256).max;\\n    bytes constant public ETH_PREFIX = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n\\n    /// @dev flag for guarded functionality\\n    bool public guardedLaunch;\\n    /// @dev flag to limit permissionless Silo creation\\n    bool public permissionedSiloCreation;\\n    /// @dev flag to limit max liquidity on Silos\\n    bool public limitedMaxLiquidity;\\n    /// @dev default value represents maximum allowed deposit limit\\n    uint256 public defaultSiloMaxDepositsLimit;\\n\\n    /// @dev this wallet provides signature, that means, all required off-chain checks are done for new silo\\n    address public siloVerifier;\\n\\n    /// @dev siloMaxDepositsLimits maps silo => asset => maximum allowed deposit limit\\n    mapping(address => mapping(address => uint256)) public siloMaxDepositsLimits;\\n\\n    event SiloVerifier(address verifier);\\n    event GuardedLaunchToggled(bool newGuardedLaunchState);\\n    event PermissionedSiloCreationToggled(bool newPermissionedSiloCreationState);\\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\\n\\n    modifier isPermissionedSiloCreation() {\\n        require(!(guardedLaunch && permissionedSiloCreation) || owner() == msg.sender, \\\"Silo:only owner can perform\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _siloVerifier) {\\n        require(_siloVerifier != address(0), \\\"empty siloVerifier\\\");\\n\\n        siloVerifier = _siloVerifier;\\n\\n        /// @dev All guarded launch flags are turned ON by default\\n        guardedLaunch = true;\\n        permissionedSiloCreation = true;\\n        limitedMaxLiquidity = true;\\n\\n        /// @dev Default value for defaultSiloMaxDepositsLimit is 50 ETH\\n        defaultSiloMaxDepositsLimit = 50 ether;\\n    }\\n\\n    /// @param _verifier off-chain verifier address, if set to address(0) then verification is off\\n    function setVerifier(address _verifier) external onlyOwner {\\n        siloVerifier = _verifier;\\n        emit SiloVerifier(_verifier);\\n    }\\n\\n    function toggleGuardedLaunch() external onlyOwner {\\n        guardedLaunch = !guardedLaunch;\\n        emit GuardedLaunchToggled(guardedLaunch);\\n    }\\n\\n    function togglePermissionedSiloCreation() external onlyOwner {\\n        permissionedSiloCreation = !permissionedSiloCreation;\\n        emit PermissionedSiloCreationToggled(permissionedSiloCreation);\\n    }\\n\\n    function toggleLimitedMaxLiquidity() external onlyOwner {\\n        limitedMaxLiquidity = !limitedMaxLiquidity;\\n        emit LimitedMaxLiquidityToggled(limitedMaxLiquidity);\\n    }\\n\\n    function setDefaultSiloMaxDepositsLimit(\\n        uint256 _maxDeposits\\n    ) external onlyOwner {\\n        defaultSiloMaxDepositsLimit = _maxDeposits;\\n        emit DefaultSiloMaxDepositsLimitUpdate(_maxDeposits);\\n    }\\n\\n    function setSiloMaxDepositsLimit(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxDeposits\\n    ) external onlyOwner {\\n        siloMaxDepositsLimits[_silo][_asset] = _maxDeposits;\\n        emit SiloMaxDepositsLimitsUpdate(_silo, _asset, _maxDeposits);\\n    }\\n\\n    function getMaxSiloDeposits(address _silo, address _asset) external view override returns (uint256) {\\n        if (guardedLaunch && limitedMaxLiquidity) {\\n            uint256 maxDeposits = siloMaxDepositsLimits[_silo][_asset];\\n            if (maxDeposits != 0) {\\n                return maxDeposits;\\n            }\\n            return defaultSiloMaxDepositsLimit;\\n        }\\n        return INFINITY;\\n    }\\n\\n    /// @dev checks if off-chain verifier sign allowance to create silo\\n    ///         verifier signature if valid for an indefinite period\\n    function siloOffChainVerification(\\n        address _asset,\\n        address _quote,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public view returns (bool) {\\n        return recoverSigner(_asset, _quote, _v, _r, _s) == siloVerifier;\\n    }\\n\\n    function recoverSigner(address _asset, address _quote, uint8 _v, bytes32 _r, bytes32 _s)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        bytes32 message = keccak256(abi.encodePacked(_asset, _quote));\\n        bytes32 hash = keccak256(abi.encodePacked(ETH_PREFIX, message));\\n        return ecrecover(hash, _v, _r, _s);\\n    }\\n}\\n\",\"keccak256\":\"0xdb13b90fed1c61827e7f13315643c4005758cb7990d3821ec0c408b6bfab04ac\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nabstract contract TwoStepOwnable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfd0a3e3ea8ab0fb749f9b8a6481ed04204dd6de0869400a8b59d498fac79ab06\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200334038038062003340833981016040819052620000349162000431565b85620000403362000343565b6001600160a01b038116620000915760405162461bcd60e51b815260206004820152601260248201527132b6b83a3c9039b4b637ab32b934b334b2b960711b60448201526064015b60405180910390fd5b600380546001600160a01b0319166001600160a01b039283161790556001805462ffffff60a01b19166201010160a01b1790556802b5e3af16b188000060025585166200012f5760405162461bcd60e51b815260206004820152602560248201527f5265706f7369746f72792e636f6e7374727563746f723a20656d70747920666160448201526463746f727960d81b606482015260840162000088565b6001600160a01b0384166200019b5760405162461bcd60e51b815260206004820152602b60248201527f5265706f7369746f72792e636f6e7374727563746f723a20656d70747920746f60448201526a6b656e73466163746f727960a81b606482015260840162000088565b8051620001fe5760405162461bcd60e51b815260206004820152602a60248201527f5265706f7369746f72792e636f6e7374727563746f723a20656d7074792062726044820152696964676541737365747360b01b606482015260840162000088565b60005b8151811015620002b257818181518110620002205762000220620005ae565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200026157600080fd5b505afa15801562000276573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029c919062000558565b5080620002a98162000584565b91505062000201565b50600160138190556014819055600052601260209081527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a380546001600160a01b038089166001600160a01b031992831617909255600f80549288169290911691909117905560058490556006839055815162000336916008919084019062000393565b50505050505050620005da565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620003eb579160200282015b82811115620003eb57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003b4565b50620003f9929150620003fd565b5090565b5b80821115620003f95760008155600101620003fe565b80516001600160a01b03811681146200042c57600080fd5b919050565b60008060008060008060c087890312156200044b57600080fd5b620004568762000414565b955060206200046781890162000414565b9550620004776040890162000414565b606089015160808a015160a08b015192975090955093506001600160401b0380821115620004a457600080fd5b818a0191508a601f830112620004b957600080fd5b815181811115620004ce57620004ce620005c4565b8060051b604051601f19603f83011681018181108582111715620004f657620004f6620005c4565b604052828152858101935084860182860187018f10156200051657600080fd5b600095505b8386101562000544576200052f8162000414565b8552600195909501949386019386016200051b565b508096505050505050509295509295509295565b6000602082840312156200056b57600080fd5b815160ff811681146200057d57600080fd5b9392505050565b6000600019821415620005a757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b612d5680620005ea6000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c806373c3a67a116101f4578063c94606f71161011a578063ed4c8bb3116100ad578063f887ea401161007c578063f887ea40146108e3578063fa2a0639146108f6578063fb6131a014610909578063fbb8d6021461091c57600080fd5b8063ed4c8bb3146108a2578063ee306a34146108b5578063f2727bb8146108bd578063f2fde38b146108d057600080fd5b8063d6d6e3f8116100e9578063d6d6e3f814610877578063d80c3eda1461087f578063e30c397814610888578063eafecffa1461089957600080fd5b8063c94606f71461082a578063c9993b0d1461083d578063cc1fdf1614610851578063cec10c111461086457600080fd5b8063ab675dd111610192578063c0d7865511610161578063c0d78655146107d1578063c279f21d146107e4578063c2fa7494146107f7578063c44ec1921461080a57600080fd5b8063ab675dd11461076c578063ac40caf41461077f578063b64ddd92146107aa578063b8fb7399146107bd57600080fd5b80637adbf973116101ce5780637adbf973146107225780637dc0d1d0146107355780638da5cb5b146107485780638ebeda2a1461075957600080fd5b806373c3a67a146106d1578063791183d1146106f157806379ba50971461071a57600080fd5b806339502956116102e45780636465dfa611610277578063685f628a11610246578063685f628a1461069a5780636d39a6cc146106ad57806370243c7d146106b6578063715018a6146106c957600080fd5b80636465dfa61461065957806364eba57e1461066c57806364f7a8d31461067f578063671a249c1461068757600080fd5b80635437988d116102b35780635437988d1461061757806356fecf1a1461062a5780635d3207671461063d5780635f48f44b1461065057600080fd5b806339502956146105d557806348b3eabc146105de5780634c3baec5146105f15780634fbc58951461060457600080fd5b80631e11d9371161035c5780632cd5f3171161032b5780632cd5f317146105735780633278c6941461058657806332936c441461059957806337f9a6bd146105ac57600080fd5b80631e11d9371461050457806324c89a491461050c57806325ed3d4414610555578063296041ea1461055e57600080fd5b8063095513831161039857806309551383146104835780630b9290581461049657806312f0dcd8146104b157806319afb898146104ef57600080fd5b806301d6b813146103bf578063072ea61c1461042b57806307e9303314610442575b600080fd5b6104026103cd3660046127b4565b60176020908152600092835260408084209091529082529020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b0316908201526060015b60405180910390f35b610434600c5481565b604051908152602001610422565b61046b6104503660046129b4565b6012602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610422565b61046b6104913660046129b4565b610930565b6005546006546007546104029291906001600160a01b031683565b6104df6104bf366004612773565b6001600160a01b0390811660009081526016602052604090205416151590565b6040519015158152602001610422565b6105026104fd366004612773565b61095a565b005b610502610af1565b6105486040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525081565b6040516104229190612bd8565b610434600d5481565b610566610b90565b6040516104229190612bc5565b610502610581366004612773565b610bf2565b610502610594366004612773565b610d73565b6104346105a73660046127b4565b610e1f565b61046b6105ba366004612773565b6015602052600090815260409020546001600160a01b031681565b61043460135481565b61046b6105ec3660046127b4565b610e63565b61046b6105ff3660046129b4565b610eb1565b610502610612366004612981565b610ec1565b610502610625366004612773565b610f96565b6105026106383660046129b4565b611024565b61050261064b3660046129b4565b611092565b61043460001981565b6105026106673660046129b4565b6110d0565b61046b61067a36600461288d565b61110e565b61050261121d565b60035461046b906001600160a01b031681565b6105026106a8366004612773565b6112b1565b61043460145481565b6105026106c436600461282e565b6113cf565b610502611471565b6104346106df366004612773565b600a6020526000908152604090205481565b61046b6106ff366004612773565b6016602052600090815260409020546001600160a01b031681565b6105026114b6565b610502610730366004612773565b61154c565b60105461046b906001600160a01b031681565b6000546001600160a01b031661046b565b6105026107673660046128e6565b611653565b61050261077a3660046129b4565b6116fd565b61043461078d3660046127b4565b600460209081526000928352604080842090915290825290205481565b6104346107b83660046127b4565b6117df565b6001546104df90600160a81b900460ff1681565b6105026107df366004612773565b611850565b6105026107f23660046129b4565b611957565b6104346108053660046127b4565b611a01565b610434610818366004612773565b600b6020526000908152604090205481565b6105026108383660046128e6565b611a41565b6001546104df90600160b01b900460ff1681565b600f5461046b906001600160a01b031681565b6105026108723660046129cd565b611aaa565b610502611b4e565b61043460025481565b6001546001600160a01b031661046b565b610434600e5481565b6105026108b0366004612773565b611be3565b610566611cf4565b6104df6108cb36600461288d565b611d54565b6105026108de366004612773565b611d84565b60115461046b906001600160a01b031681565b6105026109043660046127ed565b611e2b565b6105026109173660046129f9565b611ec5565b6001546104df90600160a01b900460ff1681565b6009818154811061094057600080fd5b6000918252602090912001546001600160a01b0316905081565b3361096d6000546001600160a01b031690565b6001600160a01b03161461099c5760405162461bcd60e51b815260040161099390612beb565b60405180910390fd5b60095415610a51576001600160a01b0381166000908152600b60205260409020541580156109fb5750806001600160a01b031660096000815481106109e3576109e3612cdf565b6000918252602090912001546001600160a01b031614155b610a515760405162461bcd60e51b815260206004820152602160248201527f5265706f7369746f72793a20617373657420616c72656164792072656d6f76656044820152601960fa1b6064820152608401610993565b600980546001600160a01b0383166000818152600b60209081526040808320859055600185018655949091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b0319168217905591519182527f780c06b06ab07a0d47596bc3082bbd3f7ecc1907ff035c3ea0e2a1602876a52b910160405180910390a1610aee600a600883611fd0565b50565b33610b046000546001600160a01b031690565b6001600160a01b031614610b2a5760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160a81b808304821615810260ff60a81b1990931692909217928390556040517f0a5b76e624ee06d344a0b42e72adaefbec1739a56a72313432656fce4467124893610b869390049091161515815260200190565b60405180910390a1565b60606009805480602002602001604051908101604052809291908181526020018280548015610be857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bca575b5050505050905090565b33610c056000546001600160a01b031690565b6001600160a01b031614610c2b5760405162461bcd60e51b815260040161099390612beb565b60085415610cd6576001600160a01b0381166000908152600a6020526040902054158015610c8a5750806001600160a01b03166008600081548110610c7257610c72612cdf565b6000918252602090912001546001600160a01b031614155b610cd65760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20617373657420616c7265616479206164646564006044820152606401610993565b600880546001600160a01b0383166000818152600a60209081526040808320859055600185018655949091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390920180546001600160a01b0319168217905591519182527fda0511750b81a254e0b084c2c863785e3d1c5b2b989afd8ac0e884f8ee2e033c910160405180910390a1610aee600b600983611fd0565b33610d866000546001600160a01b031690565b6001600160a01b031614610dac5760405162461bcd60e51b815260040161099390612beb565b806001600160a01b0316610dc86000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380831660009081526017602090815260408083209385168352929052908120600101548015610e57579050610e5d565b50506006545b92915050565b6001600160a01b03808316600090815260176020908152604080832085851684529091528120600201549091168015610e9d579050610e5d565b50506007546001600160a01b031692915050565b6008818154811061094057600080fd5b33610ed46000546001600160a01b031690565b6001600160a01b031614610efa5760405162461bcd60e51b815260040161099390612beb565b60006014546001610f0b9190612c39565b6014819055600081815260126020526040902080546001600160a01b0319166001600160a01b03861617905590508115610f455760138190555b601354604080516001600160a01b03861681526020810184905280820192909252517f2472fc33db7884be9fd5000f5270b3154d839ee38cca410ba5fb1cc816ab33249181900360600190a1505050565b33610fa96000546001600160a01b031690565b6001600160a01b031614610fcf5760405162461bcd60e51b815260040161099390612beb565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a632eb7c07d65f761e1454f53b162e097033c03ba5e57b7398f1df16518da1e906020015b60405180910390a150565b336110376000546001600160a01b031690565b6001600160a01b03161461105d5760405162461bcd60e51b815260040161099390612beb565b60028190556040518181527f5b71e2324e73b2492a36b7c5f86de1bd745d891c29c3fa39e1ed97960a259eb390602001611019565b336110a56000546001600160a01b031690565b6001600160a01b0316146110cb5760405162461bcd60e51b815260040161099390612beb565b600655565b336110e36000546001600160a01b031690565b6001600160a01b0316146111095760405162461bcd60e51b815260040161099390612beb565b600555565b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b166034820152600090819060480160405160208183030381529060405280519060200120905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508260405160200161119e929190612b2b565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8916918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015611206573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b336112306000546001600160a01b031690565b6001600160a01b0316146112565760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160b01b808304821615810260ff60b01b1990931692909217928390556040517eace7bfa8dc4895fea42b63dd0304a5b26ee0982b8d764257b6b106b11a454193610b869390049091161515815260200190565b336112c46000546001600160a01b031690565b6001600160a01b0316146112ea5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166113665760405162461bcd60e51b815260206004820152603860248201527f5265706f7369746f72793a206e65772064656661756c74496e7465726573745260448201527f6174654d6f64656c206973207a65726f206164647265737300000000000000006064820152608401610993565b600754604080516001600160a01b03928316815291831660208301527f1248f8750c9f60e1f800102d9248fa767877fba538403657d414e2d25b6025ce910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b336113e26000546001600160a01b031690565b6001600160a01b0316146114085760405162461bcd60e51b815260040161099390612beb565b6040805160608101825293845260208085019384526001600160a01b039283168583019081529683166000908152601782528281209684168152959052909320915182555160018201559151600290920180546001600160a01b03191692909116919091179055565b336114846000546001600160a01b031690565b6001600160a01b0316146114aa5760405162461bcd60e51b815260040161099390612beb565b6114b46000612119565b565b6001546001600160a01b031633146115205760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b6064820152608401610993565b61153a6115356001546001600160a01b031690565b612119565b600180546001600160a01b0319169055565b3361155f6000546001600160a01b031690565b6001600160a01b0316146115855760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166115ea5760405162461bcd60e51b815260206004820152602660248201527f5265706f7369746f72793a206e6577206f7261636c65206973207a65726f206160448201526564647265737360d01b6064820152608401610993565b601054604080516001600160a01b03928316815291831660208301527f93450534569bdbb3109b44eef77c9b236897f4caa4f201be10252d6462a56937910160405180910390a1601080546001600160a01b0319166001600160a01b0392909216919091179055565b336116666000546001600160a01b031690565b6001600160a01b03161461168c5760405162461bcd60e51b815260040161099390612beb565b6003546001600160a01b0316156116e55760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20757365206e657753696c6f5665726966696564006044820152606401610993565b6116f58686868686866001612169565b505050505050565b336117106000546001600160a01b031690565b6001600160a01b0316146117365760405162461bcd60e51b815260040161099390612beb565b801580159061174757506014548111155b61179e5760405162461bcd60e51b815260206004820152602260248201527f5265706f7369746f72793a2076657273696f6e20646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610993565b60135460408051918252602082018390527fcfc71314f29348b844c29f0a4f4f6d0f144f481ec1eaa6cb42bf0ea2e57eba8b910160405180910390a1601355565b600154600090600160a01b900460ff1680156118045750600154600160b01b900460ff165b15611846576001600160a01b03808416600090815260046020908152604080832093861683529290522054801561183c579050610e5d565b5050600254610e5d565b5060001992915050565b336118636000546001600160a01b031690565b6001600160a01b0316146118895760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166118ee5760405162461bcd60e51b815260206004820152602660248201527f5265706f7369746f72793a206e657720726f75746572206973207a65726f206160448201526564647265737360d01b6064820152608401610993565b601154604080516001600160a01b03928316815291831660208301527f363beda10ebf02584eda9ab4ca38e353bc57591b50714ba84692ed584280672d910160405180910390a1601180546001600160a01b0319166001600160a01b0392909216919091179055565b3361196a6000546001600160a01b031690565b6001600160a01b0316146119905760405162461bcd60e51b815260040161099390612beb565b6000818152601260209081526040918290205482516001600160a01b0390911681529081018390527fece8d432375a07b21c9502092d92ae0f34e76a35f8c4c69e062cd7c2dbe0279e910160405180910390a1600090815260126020526040902080546001600160a01b0319169055565b6001600160a01b0380831660009081526017602090815260408083209385168352929052908120548015611a36579050610e5d565b505060055492915050565b6003546001600160a01b031615611a9a5760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20757365206e657753696c6f5665726966696564006044820152606401610993565b6116f58686868686866000612169565b33611abd6000546001600160a01b031690565b6001600160a01b031614611ae35760405162461bcd60e51b815260040161099390612beb565b600c54600d54600e54604080519384526020840187905283019190915260608201849052608082015260a081018290527fa3f1bea221509c108990ce42d4e5863cfc867e2278ddb0866dec442c2082fdcf9060c00160405180910390a1600c92909255600d55600e55565b33611b616000546001600160a01b031690565b6001600160a01b031614611b875760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160a01b808304821615810260ff60a01b1990931692909217928390556040517fe7d69a5901cea312ff408411a66d0131bbad02de0314b7c56d140d58d11b029f93610b869390049091161515815260200190565b33611bf66000546001600160a01b031690565b6001600160a01b031614611c1c5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b038116611c8b5760405162461bcd60e51b815260206004820152603060248201527f5265706f7369746f72792e736574546f6b656e73466163746f72793a20656d7060448201526f747920746f6b656e73466163746f727960801b6064820152608401610993565b600f54604080516001600160a01b03928316815291831660208301527fa5aca89bc6f8378bfe19e0816667b4810c29cf7f5a908eab9eb3a98ef1089e08910160405180910390a1600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60606008805480602002602001604051908101604052809291908181526020018280548015610be8576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610bca575050505050905090565b6003546000906001600160a01b0316611d70878787878761110e565b6001600160a01b0316149695505050505050565b33611d976000546001600160a01b031690565b6001600160a01b031614611dbd5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b038116611e225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610993565b610aee81612119565b33611e3e6000546001600160a01b031690565b6001600160a01b031614611e645760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f25c16b7d0bcf048ed0d91eb5e50591eb538c034fd4ebee6cac8b7c9cf77c770b910160405180910390a3505050565b611f5786601060009054906101000a90046001600160a01b03166001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612797565b8b8b8b611d54565b611fb55760405162461bcd60e51b815260206004820152602960248201527f5265706f7369746f72793a206f66662d636861696e20766572696669636174696044820152681bdb8819985a5b195960ba1b6064820152608401610993565b611fc58686868686866000612169565b505050505050505050565b815480611fdd5750505050565b6001600160a01b038216600081815260208690526040902054845490919085908390811061200d5761200d612cdf565b6000918252602090912001546001600160a01b03161461202e575050505050565b600061203b600184612c51565b90508082146120c557600085828154811061205857612058612cdf565b9060005260206000200160009054906101000a90046001600160a01b031690508086848154811061208b5761208b612cdf565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290879052604090208290555b6001600160a01b03841660009081526020879052604081205584548590806120ef576120ef612cc9565b600082815260209020810160001990810180546001600160a01b0319169055019055505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600154600160a01b900460ff16801561218b5750600154600160a81b900460ff165b15806121b05750336121a56000546001600160a01b031690565b6001600160a01b0316145b6121fc5760405162461bcd60e51b815260206004820152601b60248201527f53696c6f3a6f6e6c79206f776e65722063616e20706572666f726d00000000006044820152606401610993565b856122075760135495505b6000600880548060200260200160405190810160405280929190818152602001828054801561225f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612241575b505050505090508161227557612275818961244f565b60008781526012602052604080822054905163130a1df960e01b81526001600160a01b039091169063130a1df9906122b3908c908b90600401612b99565b602060405180830381600087803b1580156122cd57600080fd5b505af11580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123059190612797565b9050806001600160a01b031663a388991b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b5050506001600160a01b03808b16600081815260156020908152604080832080549588166001600160a01b0319968716811790915580845260169092529182902080549094168317909355519092507fef22a38629aecbdaabba139ab30c8087ef835f0abedf24d57db792f55bca15d5906123d4908c908790612c20565b60405180910390a360105460405163332f3c2160e01b81526001600160a01b039091169063332f3c2190612412908c908a908a908a90600401612b4d565b600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b50505050505050505050505050565b6001825111801561249a57506001600160a01b0381166000818152600a60205260409020548351849190811061248757612487612cdf565b60200260200101516001600160a01b0316145b1561256b5760005b82518110156125655760006001600160a01b0316601660008584815181106124cc576124cc612cdf565b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541614612553576015600084838151811061250f5761250f612cdf565b6020908102919091018101516001600160a01b03908116835290820192909252604090810160002054905163caa5c69360e01b815291166004820152602401610993565b8061255d81612c98565b9150506124a2565b5061261b565b6001600160a01b0381166000818152600a602052604090205460088054909190811061259957612599612cdf565b6000918252602090912001546001600160a01b0316141561261b5760405162461bcd60e51b815260206004820152603660248201527f5265706f7369746f72793a2063616e6e6f74206372656174652053696c6f20666044820152751bdc881cda5b99db1948189c9a5919d948185cdcd95d60521b6064820152608401610993565b6001600160a01b0381811660009081526015602052604090205416156126835760405162461bcd60e51b815260206004820152601760248201527f5265706f7369746f72793a2073696c6f206578697374730000000000000000006044820152606401610993565b5050565b60008083601f84011261269957600080fd5b50813567ffffffffffffffff8111156126b157600080fd5b6020830191508360208285010111156126c957600080fd5b9250929050565b600082601f8301126126e157600080fd5b813567ffffffffffffffff808211156126fc576126fc612cf5565b604051601f8301601f19908116603f0116810190828211818310171561272457612724612cf5565b8160405283815286602085880101111561273d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461276e57600080fd5b919050565b60006020828403121561278557600080fd5b813561279081612d0b565b9392505050565b6000602082840312156127a957600080fd5b815161279081612d0b565b600080604083850312156127c757600080fd5b82356127d281612d0b565b915060208301356127e281612d0b565b809150509250929050565b60008060006060848603121561280257600080fd5b833561280d81612d0b565b9250602084013561281d81612d0b565b929592945050506040919091013590565b600080600080600060a0868803121561284657600080fd5b853561285181612d0b565b9450602086013561286181612d0b565b93506040860135925060608601359150608086013561287f81612d0b565b809150509295509295909350565b600080600080600060a086880312156128a557600080fd5b85356128b081612d0b565b945060208601356128c081612d0b565b93506128ce6040870161275d565b94979396509394606081013594506080013592915050565b60008060008060008060a087890312156128ff57600080fd5b863561290a81612d0b565b955060208701359450604087013567ffffffffffffffff8082111561292e57600080fd5b61293a8a838b016126d0565b95506060890135915061294c82612d0b565b9093506080880135908082111561296257600080fd5b5061296f89828a01612687565b979a9699509497509295939492505050565b6000806040838503121561299457600080fd5b823561299f81612d0b565b9150602083013580151581146127e257600080fd5b6000602082840312156129c657600080fd5b5035919050565b6000806000606084860312156129e257600080fd5b505081359360208301359350604090920135919050565b60008060008060008060008060006101008a8c031215612a1857600080fd5b612a218a61275d565b985060208a0135975060408a0135965060608a0135612a3f81612d0b565b955060808a0135945060a08a013567ffffffffffffffff80821115612a6357600080fd5b612a6f8d838e016126d0565b955060c08c01359150612a8182612d0b565b90935060e08b01359080821115612a9757600080fd5b50612aa48c828d01612687565b915080935050809150509295985092959850929598565b600081518084526020808501945080840160005b83811015612af45781516001600160a01b031687529582019590820190600101612acf565b509495945050505050565b60008151808452612b17816020860160208601612c68565b601f01601f19169290920160200192915050565b60008351612b3d818460208801612c68565b9190910191825250602001919050565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6001600160a01b0383168152604060208201819052600090612bbd90830184612aff565b949350505050565b6020815260006127906020830184612abb565b6020815260006127906020830184612aff565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b828152604060208201526000612bbd6040830184612abb565b60008219821115612c4c57612c4c612cb3565b500190565b600082821015612c6357612c63612cb3565b500390565b60005b83811015612c83578181015183820152602001612c6b565b83811115612c92576000848401525b50505050565b6000600019821415612cac57612cac612cb3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aee57600080fdfea2646970667358221220ba8dd43513f5ff5476ffd321b55cd8eb188173d8357a5c94e874eea10b6c9d1664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c806373c3a67a116101f4578063c94606f71161011a578063ed4c8bb3116100ad578063f887ea401161007c578063f887ea40146108e3578063fa2a0639146108f6578063fb6131a014610909578063fbb8d6021461091c57600080fd5b8063ed4c8bb3146108a2578063ee306a34146108b5578063f2727bb8146108bd578063f2fde38b146108d057600080fd5b8063d6d6e3f8116100e9578063d6d6e3f814610877578063d80c3eda1461087f578063e30c397814610888578063eafecffa1461089957600080fd5b8063c94606f71461082a578063c9993b0d1461083d578063cc1fdf1614610851578063cec10c111461086457600080fd5b8063ab675dd111610192578063c0d7865511610161578063c0d78655146107d1578063c279f21d146107e4578063c2fa7494146107f7578063c44ec1921461080a57600080fd5b8063ab675dd11461076c578063ac40caf41461077f578063b64ddd92146107aa578063b8fb7399146107bd57600080fd5b80637adbf973116101ce5780637adbf973146107225780637dc0d1d0146107355780638da5cb5b146107485780638ebeda2a1461075957600080fd5b806373c3a67a146106d1578063791183d1146106f157806379ba50971461071a57600080fd5b806339502956116102e45780636465dfa611610277578063685f628a11610246578063685f628a1461069a5780636d39a6cc146106ad57806370243c7d146106b6578063715018a6146106c957600080fd5b80636465dfa61461065957806364eba57e1461066c57806364f7a8d31461067f578063671a249c1461068757600080fd5b80635437988d116102b35780635437988d1461061757806356fecf1a1461062a5780635d3207671461063d5780635f48f44b1461065057600080fd5b806339502956146105d557806348b3eabc146105de5780634c3baec5146105f15780634fbc58951461060457600080fd5b80631e11d9371161035c5780632cd5f3171161032b5780632cd5f317146105735780633278c6941461058657806332936c441461059957806337f9a6bd146105ac57600080fd5b80631e11d9371461050457806324c89a491461050c57806325ed3d4414610555578063296041ea1461055e57600080fd5b8063095513831161039857806309551383146104835780630b9290581461049657806312f0dcd8146104b157806319afb898146104ef57600080fd5b806301d6b813146103bf578063072ea61c1461042b57806307e9303314610442575b600080fd5b6104026103cd3660046127b4565b60176020908152600092835260408084209091529082529020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b0316908201526060015b60405180910390f35b610434600c5481565b604051908152602001610422565b61046b6104503660046129b4565b6012602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610422565b61046b6104913660046129b4565b610930565b6005546006546007546104029291906001600160a01b031683565b6104df6104bf366004612773565b6001600160a01b0390811660009081526016602052604090205416151590565b6040519015158152602001610422565b6105026104fd366004612773565b61095a565b005b610502610af1565b6105486040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525081565b6040516104229190612bd8565b610434600d5481565b610566610b90565b6040516104229190612bc5565b610502610581366004612773565b610bf2565b610502610594366004612773565b610d73565b6104346105a73660046127b4565b610e1f565b61046b6105ba366004612773565b6015602052600090815260409020546001600160a01b031681565b61043460135481565b61046b6105ec3660046127b4565b610e63565b61046b6105ff3660046129b4565b610eb1565b610502610612366004612981565b610ec1565b610502610625366004612773565b610f96565b6105026106383660046129b4565b611024565b61050261064b3660046129b4565b611092565b61043460001981565b6105026106673660046129b4565b6110d0565b61046b61067a36600461288d565b61110e565b61050261121d565b60035461046b906001600160a01b031681565b6105026106a8366004612773565b6112b1565b61043460145481565b6105026106c436600461282e565b6113cf565b610502611471565b6104346106df366004612773565b600a6020526000908152604090205481565b61046b6106ff366004612773565b6016602052600090815260409020546001600160a01b031681565b6105026114b6565b610502610730366004612773565b61154c565b60105461046b906001600160a01b031681565b6000546001600160a01b031661046b565b6105026107673660046128e6565b611653565b61050261077a3660046129b4565b6116fd565b61043461078d3660046127b4565b600460209081526000928352604080842090915290825290205481565b6104346107b83660046127b4565b6117df565b6001546104df90600160a81b900460ff1681565b6105026107df366004612773565b611850565b6105026107f23660046129b4565b611957565b6104346108053660046127b4565b611a01565b610434610818366004612773565b600b6020526000908152604090205481565b6105026108383660046128e6565b611a41565b6001546104df90600160b01b900460ff1681565b600f5461046b906001600160a01b031681565b6105026108723660046129cd565b611aaa565b610502611b4e565b61043460025481565b6001546001600160a01b031661046b565b610434600e5481565b6105026108b0366004612773565b611be3565b610566611cf4565b6104df6108cb36600461288d565b611d54565b6105026108de366004612773565b611d84565b60115461046b906001600160a01b031681565b6105026109043660046127ed565b611e2b565b6105026109173660046129f9565b611ec5565b6001546104df90600160a01b900460ff1681565b6009818154811061094057600080fd5b6000918252602090912001546001600160a01b0316905081565b3361096d6000546001600160a01b031690565b6001600160a01b03161461099c5760405162461bcd60e51b815260040161099390612beb565b60405180910390fd5b60095415610a51576001600160a01b0381166000908152600b60205260409020541580156109fb5750806001600160a01b031660096000815481106109e3576109e3612cdf565b6000918252602090912001546001600160a01b031614155b610a515760405162461bcd60e51b815260206004820152602160248201527f5265706f7369746f72793a20617373657420616c72656164792072656d6f76656044820152601960fa1b6064820152608401610993565b600980546001600160a01b0383166000818152600b60209081526040808320859055600185018655949091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b0319168217905591519182527f780c06b06ab07a0d47596bc3082bbd3f7ecc1907ff035c3ea0e2a1602876a52b910160405180910390a1610aee600a600883611fd0565b50565b33610b046000546001600160a01b031690565b6001600160a01b031614610b2a5760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160a81b808304821615810260ff60a81b1990931692909217928390556040517f0a5b76e624ee06d344a0b42e72adaefbec1739a56a72313432656fce4467124893610b869390049091161515815260200190565b60405180910390a1565b60606009805480602002602001604051908101604052809291908181526020018280548015610be857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bca575b5050505050905090565b33610c056000546001600160a01b031690565b6001600160a01b031614610c2b5760405162461bcd60e51b815260040161099390612beb565b60085415610cd6576001600160a01b0381166000908152600a6020526040902054158015610c8a5750806001600160a01b03166008600081548110610c7257610c72612cdf565b6000918252602090912001546001600160a01b031614155b610cd65760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20617373657420616c7265616479206164646564006044820152606401610993565b600880546001600160a01b0383166000818152600a60209081526040808320859055600185018655949091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390920180546001600160a01b0319168217905591519182527fda0511750b81a254e0b084c2c863785e3d1c5b2b989afd8ac0e884f8ee2e033c910160405180910390a1610aee600b600983611fd0565b33610d866000546001600160a01b031690565b6001600160a01b031614610dac5760405162461bcd60e51b815260040161099390612beb565b806001600160a01b0316610dc86000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380831660009081526017602090815260408083209385168352929052908120600101548015610e57579050610e5d565b50506006545b92915050565b6001600160a01b03808316600090815260176020908152604080832085851684529091528120600201549091168015610e9d579050610e5d565b50506007546001600160a01b031692915050565b6008818154811061094057600080fd5b33610ed46000546001600160a01b031690565b6001600160a01b031614610efa5760405162461bcd60e51b815260040161099390612beb565b60006014546001610f0b9190612c39565b6014819055600081815260126020526040902080546001600160a01b0319166001600160a01b03861617905590508115610f455760138190555b601354604080516001600160a01b03861681526020810184905280820192909252517f2472fc33db7884be9fd5000f5270b3154d839ee38cca410ba5fb1cc816ab33249181900360600190a1505050565b33610fa96000546001600160a01b031690565b6001600160a01b031614610fcf5760405162461bcd60e51b815260040161099390612beb565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f7a632eb7c07d65f761e1454f53b162e097033c03ba5e57b7398f1df16518da1e906020015b60405180910390a150565b336110376000546001600160a01b031690565b6001600160a01b03161461105d5760405162461bcd60e51b815260040161099390612beb565b60028190556040518181527f5b71e2324e73b2492a36b7c5f86de1bd745d891c29c3fa39e1ed97960a259eb390602001611019565b336110a56000546001600160a01b031690565b6001600160a01b0316146110cb5760405162461bcd60e51b815260040161099390612beb565b600655565b336110e36000546001600160a01b031690565b6001600160a01b0316146111095760405162461bcd60e51b815260040161099390612beb565b600555565b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b166034820152600090819060480160405160208183030381529060405280519060200120905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152508260405160200161119e929190612b2b565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8916918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015611206573d6000803e3d6000fd5b5050604051601f1901519998505050505050505050565b336112306000546001600160a01b031690565b6001600160a01b0316146112565760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160b01b808304821615810260ff60b01b1990931692909217928390556040517eace7bfa8dc4895fea42b63dd0304a5b26ee0982b8d764257b6b106b11a454193610b869390049091161515815260200190565b336112c46000546001600160a01b031690565b6001600160a01b0316146112ea5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166113665760405162461bcd60e51b815260206004820152603860248201527f5265706f7369746f72793a206e65772064656661756c74496e7465726573745260448201527f6174654d6f64656c206973207a65726f206164647265737300000000000000006064820152608401610993565b600754604080516001600160a01b03928316815291831660208301527f1248f8750c9f60e1f800102d9248fa767877fba538403657d414e2d25b6025ce910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b336113e26000546001600160a01b031690565b6001600160a01b0316146114085760405162461bcd60e51b815260040161099390612beb565b6040805160608101825293845260208085019384526001600160a01b039283168583019081529683166000908152601782528281209684168152959052909320915182555160018201559151600290920180546001600160a01b03191692909116919091179055565b336114846000546001600160a01b031690565b6001600160a01b0316146114aa5760405162461bcd60e51b815260040161099390612beb565b6114b46000612119565b565b6001546001600160a01b031633146115205760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b6064820152608401610993565b61153a6115356001546001600160a01b031690565b612119565b600180546001600160a01b0319169055565b3361155f6000546001600160a01b031690565b6001600160a01b0316146115855760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166115ea5760405162461bcd60e51b815260206004820152602660248201527f5265706f7369746f72793a206e6577206f7261636c65206973207a65726f206160448201526564647265737360d01b6064820152608401610993565b601054604080516001600160a01b03928316815291831660208301527f93450534569bdbb3109b44eef77c9b236897f4caa4f201be10252d6462a56937910160405180910390a1601080546001600160a01b0319166001600160a01b0392909216919091179055565b336116666000546001600160a01b031690565b6001600160a01b03161461168c5760405162461bcd60e51b815260040161099390612beb565b6003546001600160a01b0316156116e55760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20757365206e657753696c6f5665726966696564006044820152606401610993565b6116f58686868686866001612169565b505050505050565b336117106000546001600160a01b031690565b6001600160a01b0316146117365760405162461bcd60e51b815260040161099390612beb565b801580159061174757506014548111155b61179e5760405162461bcd60e51b815260206004820152602260248201527f5265706f7369746f72793a2076657273696f6e20646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610993565b60135460408051918252602082018390527fcfc71314f29348b844c29f0a4f4f6d0f144f481ec1eaa6cb42bf0ea2e57eba8b910160405180910390a1601355565b600154600090600160a01b900460ff1680156118045750600154600160b01b900460ff165b15611846576001600160a01b03808416600090815260046020908152604080832093861683529290522054801561183c579050610e5d565b5050600254610e5d565b5060001992915050565b336118636000546001600160a01b031690565b6001600160a01b0316146118895760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0381166118ee5760405162461bcd60e51b815260206004820152602660248201527f5265706f7369746f72793a206e657720726f75746572206973207a65726f206160448201526564647265737360d01b6064820152608401610993565b601154604080516001600160a01b03928316815291831660208301527f363beda10ebf02584eda9ab4ca38e353bc57591b50714ba84692ed584280672d910160405180910390a1601180546001600160a01b0319166001600160a01b0392909216919091179055565b3361196a6000546001600160a01b031690565b6001600160a01b0316146119905760405162461bcd60e51b815260040161099390612beb565b6000818152601260209081526040918290205482516001600160a01b0390911681529081018390527fece8d432375a07b21c9502092d92ae0f34e76a35f8c4c69e062cd7c2dbe0279e910160405180910390a1600090815260126020526040902080546001600160a01b0319169055565b6001600160a01b0380831660009081526017602090815260408083209385168352929052908120548015611a36579050610e5d565b505060055492915050565b6003546001600160a01b031615611a9a5760405162461bcd60e51b815260206004820152601f60248201527f5265706f7369746f72793a20757365206e657753696c6f5665726966696564006044820152606401610993565b6116f58686868686866000612169565b33611abd6000546001600160a01b031690565b6001600160a01b031614611ae35760405162461bcd60e51b815260040161099390612beb565b600c54600d54600e54604080519384526020840187905283019190915260608201849052608082015260a081018290527fa3f1bea221509c108990ce42d4e5863cfc867e2278ddb0866dec442c2082fdcf9060c00160405180910390a1600c92909255600d55600e55565b33611b616000546001600160a01b031690565b6001600160a01b031614611b875760405162461bcd60e51b815260040161099390612beb565b6001805460ff600160a01b808304821615810260ff60a01b1990931692909217928390556040517fe7d69a5901cea312ff408411a66d0131bbad02de0314b7c56d140d58d11b029f93610b869390049091161515815260200190565b33611bf66000546001600160a01b031690565b6001600160a01b031614611c1c5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b038116611c8b5760405162461bcd60e51b815260206004820152603060248201527f5265706f7369746f72792e736574546f6b656e73466163746f72793a20656d7060448201526f747920746f6b656e73466163746f727960801b6064820152608401610993565b600f54604080516001600160a01b03928316815291831660208301527fa5aca89bc6f8378bfe19e0816667b4810c29cf7f5a908eab9eb3a98ef1089e08910160405180910390a1600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60606008805480602002602001604051908101604052809291908181526020018280548015610be8576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610bca575050505050905090565b6003546000906001600160a01b0316611d70878787878761110e565b6001600160a01b0316149695505050505050565b33611d976000546001600160a01b031690565b6001600160a01b031614611dbd5760405162461bcd60e51b815260040161099390612beb565b6001600160a01b038116611e225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610993565b610aee81612119565b33611e3e6000546001600160a01b031690565b6001600160a01b031614611e645760405162461bcd60e51b815260040161099390612beb565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f25c16b7d0bcf048ed0d91eb5e50591eb538c034fd4ebee6cac8b7c9cf77c770b910160405180910390a3505050565b611f5786601060009054906101000a90046001600160a01b03166001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190612797565b8b8b8b611d54565b611fb55760405162461bcd60e51b815260206004820152602960248201527f5265706f7369746f72793a206f66662d636861696e20766572696669636174696044820152681bdb8819985a5b195960ba1b6064820152608401610993565b611fc58686868686866000612169565b505050505050505050565b815480611fdd5750505050565b6001600160a01b038216600081815260208690526040902054845490919085908390811061200d5761200d612cdf565b6000918252602090912001546001600160a01b03161461202e575050505050565b600061203b600184612c51565b90508082146120c557600085828154811061205857612058612cdf565b9060005260206000200160009054906101000a90046001600160a01b031690508086848154811061208b5761208b612cdf565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290879052604090208290555b6001600160a01b03841660009081526020879052604081205584548590806120ef576120ef612cc9565b600082815260209020810160001990810180546001600160a01b0319169055019055505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600154600160a01b900460ff16801561218b5750600154600160a81b900460ff165b15806121b05750336121a56000546001600160a01b031690565b6001600160a01b0316145b6121fc5760405162461bcd60e51b815260206004820152601b60248201527f53696c6f3a6f6e6c79206f776e65722063616e20706572666f726d00000000006044820152606401610993565b856122075760135495505b6000600880548060200260200160405190810160405280929190818152602001828054801561225f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612241575b505050505090508161227557612275818961244f565b60008781526012602052604080822054905163130a1df960e01b81526001600160a01b039091169063130a1df9906122b3908c908b90600401612b99565b602060405180830381600087803b1580156122cd57600080fd5b505af11580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123059190612797565b9050806001600160a01b031663a388991b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b5050506001600160a01b03808b16600081815260156020908152604080832080549588166001600160a01b0319968716811790915580845260169092529182902080549094168317909355519092507fef22a38629aecbdaabba139ab30c8087ef835f0abedf24d57db792f55bca15d5906123d4908c908790612c20565b60405180910390a360105460405163332f3c2160e01b81526001600160a01b039091169063332f3c2190612412908c908a908a908a90600401612b4d565b600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b50505050505050505050505050565b6001825111801561249a57506001600160a01b0381166000818152600a60205260409020548351849190811061248757612487612cdf565b60200260200101516001600160a01b0316145b1561256b5760005b82518110156125655760006001600160a01b0316601660008584815181106124cc576124cc612cdf565b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541614612553576015600084838151811061250f5761250f612cdf565b6020908102919091018101516001600160a01b03908116835290820192909252604090810160002054905163caa5c69360e01b815291166004820152602401610993565b8061255d81612c98565b9150506124a2565b5061261b565b6001600160a01b0381166000818152600a602052604090205460088054909190811061259957612599612cdf565b6000918252602090912001546001600160a01b0316141561261b5760405162461bcd60e51b815260206004820152603660248201527f5265706f7369746f72793a2063616e6e6f74206372656174652053696c6f20666044820152751bdc881cda5b99db1948189c9a5919d948185cdcd95d60521b6064820152608401610993565b6001600160a01b0381811660009081526015602052604090205416156126835760405162461bcd60e51b815260206004820152601760248201527f5265706f7369746f72793a2073696c6f206578697374730000000000000000006044820152606401610993565b5050565b60008083601f84011261269957600080fd5b50813567ffffffffffffffff8111156126b157600080fd5b6020830191508360208285010111156126c957600080fd5b9250929050565b600082601f8301126126e157600080fd5b813567ffffffffffffffff808211156126fc576126fc612cf5565b604051601f8301601f19908116603f0116810190828211818310171561272457612724612cf5565b8160405283815286602085880101111561273d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461276e57600080fd5b919050565b60006020828403121561278557600080fd5b813561279081612d0b565b9392505050565b6000602082840312156127a957600080fd5b815161279081612d0b565b600080604083850312156127c757600080fd5b82356127d281612d0b565b915060208301356127e281612d0b565b809150509250929050565b60008060006060848603121561280257600080fd5b833561280d81612d0b565b9250602084013561281d81612d0b565b929592945050506040919091013590565b600080600080600060a0868803121561284657600080fd5b853561285181612d0b565b9450602086013561286181612d0b565b93506040860135925060608601359150608086013561287f81612d0b565b809150509295509295909350565b600080600080600060a086880312156128a557600080fd5b85356128b081612d0b565b945060208601356128c081612d0b565b93506128ce6040870161275d565b94979396509394606081013594506080013592915050565b60008060008060008060a087890312156128ff57600080fd5b863561290a81612d0b565b955060208701359450604087013567ffffffffffffffff8082111561292e57600080fd5b61293a8a838b016126d0565b95506060890135915061294c82612d0b565b9093506080880135908082111561296257600080fd5b5061296f89828a01612687565b979a9699509497509295939492505050565b6000806040838503121561299457600080fd5b823561299f81612d0b565b9150602083013580151581146127e257600080fd5b6000602082840312156129c657600080fd5b5035919050565b6000806000606084860312156129e257600080fd5b505081359360208301359350604090920135919050565b60008060008060008060008060006101008a8c031215612a1857600080fd5b612a218a61275d565b985060208a0135975060408a0135965060608a0135612a3f81612d0b565b955060808a0135945060a08a013567ffffffffffffffff80821115612a6357600080fd5b612a6f8d838e016126d0565b955060c08c01359150612a8182612d0b565b90935060e08b01359080821115612a9757600080fd5b50612aa48c828d01612687565b915080935050809150509295985092959850929598565b600081518084526020808501945080840160005b83811015612af45781516001600160a01b031687529582019590820190600101612acf565b509495945050505050565b60008151808452612b17816020860160208601612c68565b601f01601f19169290920160200192915050565b60008351612b3d818460208801612c68565b9190910191825250602001919050565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6001600160a01b0383168152604060208201819052600090612bbd90830184612aff565b949350505050565b6020815260006127906020830184612abb565b6020815260006127906020830184612aff565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b828152604060208201526000612bbd6040830184612abb565b60008219821115612c4c57612c4c612cb3565b500190565b600082821015612c6357612c63612cb3565b500390565b60005b83811015612c83578181015183820152602001612c6b565b83811115612c92576000848401525b50505050565b6000600019821415612cac57612cac612cb3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aee57600080fdfea2646970667358221220ba8dd43513f5ff5476ffd321b55cd8eb188173d8357a5c94e874eea10b6c9d1664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "newSilo(address,uint256,bytes,address,bytes)": {
        "details": "use this method only when off-chain verification is OFF",
        "params": {
          "_oracle": "(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if it is the best one",
          "_oracleData": "custom data for oracle initialization",
          "_siloAsset": "silo asset",
          "_siloData": "(optional) data that may be needed during silo creation",
          "_siloVersion": "version of silo implementation"
        }
      },
      "newSiloVerified(uint8,bytes32,bytes32,address,uint256,bytes,address,bytes)": {
        "details": "use this method only when off-chain verification is ON",
        "params": {
          "_oracle": "(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if is is the best one",
          "_oracleData": "custom data for oracle initialization",
          "_r": "r portion of off-chain verifier signature",
          "_s": "s portion of off-chain verifier signature",
          "_siloAsset": "silo asset",
          "_siloData": "(optional) data that may be needed during silo creation",
          "_siloVersion": "version of silo implementation",
          "_v": "v portion of off-chain verifier signature"
        }
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "replaceSilo(address,uint256,bytes,address,bytes)": {
        "details": "use this method to deploy new version of Silo for an asset that already has Silo deployed.      Only owner (DAO) can replace.",
        "params": {
          "_oracle": "(optional) if provided, asset will be initialised on that oracle        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,        it could be chosen, if it is the best one",
          "_oracleData": "custom data for oracle initialization",
          "_siloAsset": "silo asset",
          "_siloData": "(optional) data that may be needed during silo creation",
          "_siloVersion": "version of silo implementation. Use 0 for default version which is fine        for 99% of cases."
        }
      },
      "setVerifier(address)": {
        "params": {
          "_verifier": "off-chain verifier address, if set to address(0) then verification is off"
        }
      },
      "siloOffChainVerification(address,address,uint8,bytes32,bytes32)": {
        "details": "checks if off-chain verifier sign allowance to create silo         verifier signature if valid for an indefinite period"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "assetConfigs": {
        "details": "maps silo => asset => config"
      },
      "bridgeAssets": {
        "details": "List of bridge assets supported by the protocol"
      },
      "bridgeAssetsIndex": {
        "details": "Index mapping for bridgeAssets array"
      },
      "defaultAssetConfig": {
        "details": "Default values for AssetConfig. Used if values are not configured manually."
      },
      "entryFee": {
        "details": "one time protocol fee for opening a borrow position in precision points"
      },
      "protocolLiquidationFee": {
        "details": "protocol share in liquidation profit"
      },
      "protocolShareFee": {
        "details": "protocol revenue share in interest paid"
      },
      "removedBridgeAssets": {
        "details": "List of bridge assets removed by the protocol"
      },
      "removedBridgeAssetsIndexes": {
        "details": "Index mapping for removedBridgeAssets array"
      },
      "silo": {
        "details": "maps token address to silo address, asset => silo"
      },
      "siloDefaultVersion": {
        "details": "0 means it is not set"
      },
      "siloFactory": {
        "details": "version => IFactory"
      },
      "siloLatestVersion": {
        "details": "0 means it is not set"
      },
      "siloReverse": {
        "details": "maps token address to silo address, silo => asset"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19953,
        "contract": "contracts/Repository.sol:Repository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19955,
        "contract": "contracts/Repository.sol:Repository",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 19312,
        "contract": "contracts/Repository.sol:Repository",
        "label": "guardedLaunch",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 19315,
        "contract": "contracts/Repository.sol:Repository",
        "label": "permissionedSiloCreation",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 19318,
        "contract": "contracts/Repository.sol:Repository",
        "label": "limitedMaxLiquidity",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 19321,
        "contract": "contracts/Repository.sol:Repository",
        "label": "defaultSiloMaxDepositsLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19324,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19331,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloMaxDepositsLimits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11888,
        "contract": "contracts/Repository.sol:Repository",
        "label": "defaultAssetConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AssetConfig)11884_storage"
      },
      {
        "astId": 11892,
        "contract": "contracts/Repository.sol:Repository",
        "label": "bridgeAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11896,
        "contract": "contracts/Repository.sol:Repository",
        "label": "removedBridgeAssets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11901,
        "contract": "contracts/Repository.sol:Repository",
        "label": "bridgeAssetsIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11906,
        "contract": "contracts/Repository.sol:Repository",
        "label": "removedBridgeAssetsIndexes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11910,
        "contract": "contracts/Repository.sol:Repository",
        "label": "entryFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11914,
        "contract": "contracts/Repository.sol:Repository",
        "label": "protocolShareFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11917,
        "contract": "contracts/Repository.sol:Repository",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11921,
        "contract": "contracts/Repository.sol:Repository",
        "label": "tokensFactory",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(ITokensFactory)16406"
      },
      {
        "astId": 11924,
        "contract": "contracts/Repository.sol:Repository",
        "label": "oracle",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 11927,
        "contract": "contracts/Repository.sol:Repository",
        "label": "router",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 11934,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloFactory",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_contract(IFactory)15716)"
      },
      {
        "astId": 11937,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloDefaultVersion",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 11940,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloLatestVersion",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 11946,
        "contract": "contracts/Repository.sol:Repository",
        "label": "silo",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11951,
        "contract": "contracts/Repository.sol:Repository",
        "label": "siloReverse",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11959,
        "contract": "contracts/Repository.sol:Repository",
        "label": "assetConfigs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(AssetConfig)11884_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFactory)15716": {
        "encoding": "inplace",
        "label": "contract IFactory",
        "numberOfBytes": "20"
      },
      "t_contract(ITokensFactory)16406": {
        "encoding": "inplace",
        "label": "contract ITokensFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(AssetConfig)11884_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Repository.AssetConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AssetConfig)11884_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AssetConfig)11884_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Repository.AssetConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetConfig)11884_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(IFactory)15716)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IFactory)",
        "numberOfBytes": "32",
        "value": "t_contract(IFactory)15716"
      },
      "t_struct(AssetConfig)11884_storage": {
        "encoding": "inplace",
        "label": "struct Repository.AssetConfig",
        "members": [
          {
            "astId": 11877,
            "contract": "contracts/Repository.sol:Repository",
            "label": "maxLoanToValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11880,
            "contract": "contracts/Repository.sol:Repository",
            "label": "liquidationThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11883,
            "contract": "contracts/Repository.sol:Repository",
            "label": "interestRateModel",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}