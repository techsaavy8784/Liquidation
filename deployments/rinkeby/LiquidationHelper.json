{
  "address": "0xbFF323c7a4CaFEBf7d560C7D6364BE9988C83b89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lens",
          "type": "address"
        },
        {
          "internalType": "contract IOracle[]",
          "name": "_oraclesWithSwapOption",
          "type": "address[]"
        },
        {
          "internalType": "contract ISwapper[]",
          "name": "_swappers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAmountFromCollaterals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "quoteLeftAfterRepay",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasSpend",
          "type": "uint256"
        }
      ],
      "name": "LiquidationBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SWAP_AMOUNT_IN_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_AMOUNT_OUT_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "contract ISilo[]",
          "name": "_silos",
          "type": "address[]"
        }
      ],
      "name": "checkDebt",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "contract ISilo[]",
          "name": "_silos",
          "type": "address[]"
        }
      ],
      "name": "checkSolvency",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "contract ISilo",
          "name": "_silo",
          "type": "address"
        }
      ],
      "name": "executeLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "findBestOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lens",
      "outputs": [
        {
          "internalType": "contract SiloLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oraclesWithSwapOption",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclesWithSwapOptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repository",
      "outputs": [
        {
          "internalType": "contract IRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract ISwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_receivedCollaterals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shareAmountsToRepaid",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_flashReceiverData",
          "type": "bytes"
        }
      ],
      "name": "siloLiquidationCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "swapForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "swapForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x831d225ba171049706c896d111f95d495b9cc23bd7a668cf5f775ccbff01c7a9",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xbFF323c7a4CaFEBf7d560C7D6364BE9988C83b89",
    "transactionIndex": 20,
    "gasUsed": "1966269",
    "logsBloom": "0x
    "blockHash": "0xcc27f220e10ccc30e7281064f39ae4342558dadf0bd9c89ca45c9bc73f1cd8cc",
    "transactionHash": "0x831d225ba171049706c896d111f95d495b9cc23bd7a668cf5f775ccbff01c7a9",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 10149054,
        "transactionHash": "0x831d225ba171049706c896d111f95d495b9cc23bd7a668cf5f775ccbff01c7a9",
        "address": "0xbFF323c7a4CaFEBf7d560C7D6364BE9988C83b89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0xcc27f220e10ccc30e7281064f39ae4342558dadf0bd9c89ca45c9bc73f1cd8cc"
      }
    ],
    "blockNumber": 10149054,
    "cumulativeGasUsed": "17882321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD50B297f657aE1da36E342df8a8E122C915d6b97",
    "0x2393d7c9DFD5d5Ad46b8933f3e7353c299c216b7",
    [
      "0x95612e5A9D8d6B92a1882E764f00e1f3fCe3A9FA",
      "0xE74763bA8A1a4333dE6fa24eAC31688c82154c63"
    ],
    [
      "0xdCefDF65e6Ccc57D55aC1CA84C56AFfA4229e9Af",
      "0xa29eb4ed7A9F55aD0aC4D2fECEAE0b4aB5f01FB5"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "513d71c9d0c126d5b4efd168466082e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lens\",\"type\":\"address\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"_oraclesWithSwapOption\",\"type\":\"address[]\"},{\"internalType\":\"contract ISwapper[]\",\"name\":\"_swappers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAmountFromCollaterals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"quoteLeftAfterRepay\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasSpend\",\"type\":\"uint256\"}],\"name\":\"LiquidationBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_AMOUNT_IN_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_AMOUNT_OUT_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"contract ISilo[]\",\"name\":\"_silos\",\"type\":\"address[]\"}],\"name\":\"checkDebt\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"contract ISilo[]\",\"name\":\"_silos\",\"type\":\"address[]\"}],\"name\":\"checkSolvency\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"contract ISilo\",\"name\":\"_silo\",\"type\":\"address\"}],\"name\":\"executeLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"findBestOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lens\",\"outputs\":[{\"internalType\":\"contract SiloLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oraclesWithSwapOption\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesWithSwapOptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"contract IRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_receivedCollaterals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shareAmountsToRepaid\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_flashReceiverData\",\"type\":\"bytes\"}],\"name\":\"siloLiquidationCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/silo-finance/liquidation#readme for details how liquidation process should looks like\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"siloLiquidationCallback(address,address[],uint256[],uint256[],bytes)\":{\"details\":\"this is working example of how to perform liquidation, this method will be called by Silo         Keep in mind, that this helper might NOT choose the best swap option.         For best results (highest earnings) you probably want to implement your own callback and maybe use some         dex aggregators.\"},\"swapForAsset(address,uint256)\":{\"details\":\"it swaps quote token for asset\",\"params\":{\"_amount\":\"exact amount OUT, what we want to receive\",\"_asset\":\"address\"},\"returns\":{\"_0\":\"amount of quote token used for swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/LiquidationHelper.sol\":\"LiquidationHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SiloLens.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./lib/EasyMath.sol\\\";\\n\\n\\ncontract SiloLens {\\n    using EasyMath for uint256;\\n\\n    function totalDeposits(ISilo _silo, address _asset) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).totalDeposits;\\n    }\\n\\n    function collateralOnlyDeposits(ISilo _silo, address _asset) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).collateralOnlyDeposits;\\n    }\\n\\n    function totalBorrowAmount(ISilo _silo, address _asset) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).totalBorrowAmount;\\n    }\\n\\n    function protocolFees(ISilo _silo, address _asset) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).protocolFees;\\n    }\\n\\n    function totalBorrowShare(ISilo _silo, address _asset) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).debtToken.totalSupply();\\n    }\\n\\n    function borrowShare(ISilo _silo, address _asset, address _user) external view returns (uint256) {\\n        return _silo.assetStorage(_asset).debtToken.balanceOf(_user);\\n    }\\n\\n    function collateralBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\\n\\n        return balanceOfUnderlying(_state.totalDeposits, _state.collateralToken, _user) +\\n            balanceOfUnderlying(_state.collateralOnlyDeposits, _state.collateralOnlyToken, _user);\\n    }\\n\\n    function debtBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\\n\\n        return balanceOfUnderlying(_state.totalBorrowAmount, _state.debtToken, _user);\\n    }\\n\\n    /// @dev calculate combined Liquidation Threshold based on user deposits\\n    /// @return liquidation threshold of given user\\n    function getUserLiquidationThreshold(ISilo _silo, address _user) external view returns (uint256) {\\n        return _silo.calculateUserLTV(_user, false);\\n    }\\n\\n    /// @dev calculate combined Maximum Loan-To-Value of user\\n    /// @return maximumLTV Maximum Loan-To-Value of given user\\n    function getUserMaximumLTV(ISilo _silo, address _user) external view returns (uint256) {\\n        return _silo.calculateUserLTV(_user, true);\\n    }\\n\\n    /// @dev check if user is in debt\\n    /// @return TRUE if user borrowed any amount of any asset, otherwise FALSE\\n    function inDebt(ISilo _silo, address _user) external view returns (bool) {\\n        address[] memory allAssets = _silo.getAssets();\\n\\n        for (uint256 i; i < allAssets.length; i++) {\\n            if (_silo.assetStorage(allAssets[i]).debtToken.balanceOf(_user) != 0) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function balanceOfUnderlying(uint256 _assetTotalDeposits, IShareToken _shareToken, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 share = _shareToken.balanceOf(_user);\\n        return share.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0xce1ad7051f65ee38f2dc5b61d1197015f6b365e74e158fa20b8a53421b79e2d4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Liquidate(address indexed asset, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f10a064de5d9f67cb6730af6287410335201becab000dea6588cee0e05f10\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IFactory {\\n    /// @param _siloAsset silo asset\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n}\\n\",\"keccak256\":\"0x9a643f4989007ea17ff7565a83604b1cbed5ea33db01cb21ded8b75f64038ce3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo oracles\\ninterface IOracle {\\n    /// @notice initAsset can be used to do custom setup for new asset\\n    /// @dev Should be used for initialisation of asset for oracle (if initialisation is needed).\\n    ///      It sets all necessary data that are require to call `getPrice` for the asset.\\n    ///      Throws if initialisation fail.\\n    ///      When called multiple times it does not override better settings and it might throws.\\n    ///      e.g.: if with current settings we getting higher liquidity pool, initialisation should have no effect\\n    /// @param _asset token address (base token) for which we initialising oracle\\n    /// @param _data additional data (optional) that is required for initialisation process\\n    function initAsset(address _asset, bytes calldata _data) external;\\n\\n    /// @notice when changing oracle, notify that we start using it for asset.\\n    /// @dev It is used when we discover, that this oracle is better for asset.\\n    ///      If we need to setup anything in additional, in order to use this oracle for asset, it should be done\\n    ///      inside this method. At this point asset should be initialised (so we have all necessary data for it).\\n    ///      Throws if this oracle can not be use for provided asset.\\n    /// @param _asset token address (base token) for which this oracle will be used from now on.\\n    function notifyAboutChoice(address _asset) external;\\n\\n    /// @dev calculates TWAP price for asset/quote\\n    ///         It unifies all tokens decimal to 18, examples:\\n    ///         - if asses == quote it returns 1e18\\n    ///         - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18\\n    /// @return price of asses with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Informs if oracle has all required settings for asset and can provide data for it\\n    /// @dev It is not always a case, that asset must be initialized before it can be use by oracle.\\n    ///      Some oracles implementations can work out of the box for any assets.\\n    ///      If asset is not supported, it does not mean it can not be used,\\n    ///      it might need initialization to become supported.\\n    /// @param _asset token address\\n    /// @return true is oracle is able to provide price for asset\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    // TODO should we have minimalRequiredLiquidity?\\n\\n    /// @notice Search for highest possible liquidity for quote token.\\n    ///         This method is used to establish, if pool is better (not less liquidity) or worse (less liquidity)\\n    /// @dev For some oracles, asset must be initialized in order to be able to run this method\\n    ///      or there might be some additional (dedicated to oracle) settings, that must be set up in order search works\\n    ///      Implementation of this method must be dome in a way, that when asset is initialized and we have\\n    ///      any additional required settings in place, it will highest existing liquidity pool for asset.\\n    ///      It is possible, that it will throw on invalid data or uninitialized asset.\\n    /// @return liquidity of quote token for specified asset\\n    function getQuoteLiquidity(address _asset) external view returns (uint256 liquidity);\\n\\n    /// @dev protocol should NOT use this method\\n    ///         this is only for off-chain checks for raw liquidity\\n    ///         NOTICE: sometimes it might be required to setup oracle, so it can find required pool\\n    ///         eg. for UniswapV3, if new pool will be created with new fee that is not present in oracle contract\\n    ///         you have to add this new fee, then the pool can be found and `getQuoteLiquidityRaw` can be used\\n    function getQuoteLiquidityRaw(address _asset) external view returns (uint256 liquidity);\\n\\n    /// @return address of quote token that must be a copy of SiloBridgePool.asset\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is SiloOracle\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    ///      but this should NOT be treated as security check\\n    /// @return always true\\n    function isSiloOracle() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x575f292f66e6c82c42fc0a3ab7bf9b2d032401a3635f1ebaf6848ed860a20732\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\n\\ninterface IRepository {\\n    event NewSilo(address indexed silo, address indexed asset, uint256 siloVersion, address[] bridgeAssets);\\n\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    event InterestRateModel(address oldModel, address newModel);\\n\\n    event BridgePoolUpdate(address oldPool, address newPool);\\n\\n    event OracleUpdate(address oldOracle, address newOracle);\\n\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    event RegisterSiloVersion(address factory, uint256 siloLatestVersion, uint256 siloDefaultVersion);\\n\\n    event UnregisterSiloVersion(address factory, uint256 siloVersion);\\n\\n    event SiloDefaultVersion(uint256 siloDefaultVersion, uint256 defaultVersion);\\n\\n    event FeeUpdate(\\n        uint256 oldEntryFee,\\n        uint256 newEntryFee,\\n        uint256 oldProtocolShareFee,\\n        uint256 newProtocolShareFee,\\n        uint256 oldProtocolLiquidationFee,\\n        uint256 newProtocolLiquidationFee\\n    );\\n\\n    /// @dev use this method only when off-chain verification is OFF\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    ///      Only owner (DAO) can replace.\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    ///        for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method only when off-chain verification is ON\\n    /// @param _v v portion of off-chain verifier signature\\n    /// @param _r r portion of off-chain verifier signature\\n    /// @param _s s portion of off-chain verifier signature\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSiloVerified(\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address asset) external view returns (address);\\n    function siloFactory(uint256 siloVersion) external view returns (IFactory);\\n    function tokensFactory() external view returns (ITokensFactory);\\n    function router() external view returns (address);\\n    function getBridgeAssets() external view returns (address[] memory);\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n    function oracle() external view returns (address);\\n    function owner() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getInterestRateModel(address silo, address asset) external view returns (address);\\n    function getMaximumLTV(address silo, address asset) external view returns (uint256);\\n    function getLiquidationThreshold(address silo, address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x986e8172608e2a866c1cf43f21305c6ce59610b82c8c986710d55c5cd2480c74\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc1931b12d3f8c39887ce79bc191603ef2e0be0b5836968d68976760d139c9399\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n\\n    /// @param _asset asset address\\n    /// @param _rawSearch boolean\\n    ///         - if FALSE, it performs search with all requirements, for example, TWAP readiness\\n    ///         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)\\n    ///           that needs to be done for guarded silo creations\\n    function findBestOracle(address _asset, bool _rawSearch) external view returns (address);\\n\\n    /// @return price TWAP price of a token\\n    function getPrice(address token) external view returns (uint256 price);\\n\\n    /// @param _asset address\\n    /// @return oracle address assigned for asset\\n    function assetsOracles(address _asset) external view returns (address oracle);\\n\\n    function quoteToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6734db1e43519390a7b4247bfe0bae80b5c23cfc88bb0b041604a6bd85f5c8dd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISwapper {\\n    /// @dev swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\\n    /// @return amountOut amount of _tokenOut received\\n    function swapAmountIn(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        address _siloOracle,\\n        address _siloAsset\\n    ) external returns (uint256 amountOut);\\n\\n    /// @dev swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\\n    /// @return amountIn amount of _tokenIn spend\\n    function swapAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOut,\\n        address _siloOracle,\\n        address _siloAsset\\n    ) external returns (uint256 amountIn);\\n\\n    /// @return address that needs to have approval to spend tokens to execute a swap\\n    function spenderToApprove() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7cf66bb1054b9fbdca5786b38d6ceca281bd291b1b6553fa07c1e4c8f76a1eb4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n}\\n\",\"keccak256\":\"0xcdb6f1a6c67d6f9ab29276e9577701ae6efbf8076ab31c1ac5963aff1385292b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0xbbec207b8ca3ebf7f952fa30fa0a9361d6091d3fc9e64c0d82685cb4d87ee39f\",\"license\":\"BUSL-1.1\"},\"contracts/liquidation/LiquidationHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../SiloLens.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/ISwapper.sol\\\";\\nimport \\\"../interfaces/IRepository.sol\\\";\\nimport \\\"../interfaces/ISiloOracleRepository.sol\\\";\\n\\ninterface IWrappedNativeToken is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\\n/// @dev see https://github.com/silo-finance/liquidation#readme for details how liquidation process should looks like\\ncontract LiquidationHelper is IFlashLiquidationReceiver, Ownable {\\n    bytes4 constant public SWAP_AMOUNT_IN_SELECTOR =\\n        bytes4(keccak256(\\\"swapAmountIn(address,address,uint256,address,address)\\\"));\\n\\n    bytes4 constant public SWAP_AMOUNT_OUT_SELECTOR =\\n        bytes4(keccak256(\\\"swapAmountOut(address,address,uint256,address,address)\\\"));\\n\\n    IRepository public immutable repository;\\n    SiloLens public immutable lens;\\n    IERC20 public immutable quoteToken;\\n\\n    mapping(address => uint256) public earnings;\\n    mapping(IOracle => ISwapper) public swappers;\\n\\n    IOracle[] public oraclesWithSwapOption;\\n\\n    event LiquidationBalance(\\n        address user,\\n        uint256 quoteAmountFromCollaterals,\\n        int256 quoteLeftAfterRepay,\\n        uint256 gasSpend\\n    );\\n\\n    constructor (\\n        address _repository,\\n        address _lens,\\n        IOracle[] memory _oraclesWithSwapOption,\\n        ISwapper[] memory _swappers\\n    ) {\\n        require(_repository != address(0), \\\"empty repository\\\");\\n        require(_lens != address(0), \\\"empty lens\\\");\\n        require(_swappers.length == _oraclesWithSwapOption.length, \\\"swappers != oracles\\\");\\n\\n        repository = IRepository(_repository);\\n        lens = SiloLens(_lens);\\n\\n        for (uint256 i = 0; i < _swappers.length; i++) {\\n            swappers[_oraclesWithSwapOption[i]] = _swappers[i];\\n        }\\n\\n        oraclesWithSwapOption = _oraclesWithSwapOption;\\n\\n        ISiloOracleRepository oracleRepo = ISiloOracleRepository(IRepository(_repository).oracle());\\n        quoteToken = IERC20(oracleRepo.quoteToken());\\n    }\\n\\n    function withdraw() external {\\n        uint256 amount = earnings[msg.sender];\\n        if (amount == 0) return;\\n\\n        earnings[msg.sender] = 0;\\n        quoteToken.transfer(msg.sender, amount);\\n    }\\n\\n    function withdrawEth() external {\\n        uint256 amount = earnings[msg.sender];\\n        if (amount == 0) return;\\n\\n        earnings[msg.sender] = 0;\\n        IWrappedNativeToken(address(quoteToken)).withdraw(amount);\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function executeLiquidation(address[] memory _users, ISilo _silo) external {\\n        uint256 gasStart = gasleft();\\n        _silo.flashLiquidate(_users, address(this), IFlashLiquidationReceiver(this), abi.encode(gasStart));\\n    }\\n\\n    function setSwapper(IOracle _oracle, ISwapper _swapper) external onlyOwner {\\n        swappers[_oracle] = _swapper;\\n    }\\n\\n    /// @dev this is working example of how to perform liquidation, this method will be called by Silo\\n    ///         Keep in mind, that this helper might NOT choose the best swap option.\\n    ///         For best results (highest earnings) you probably want to implement your own callback and maybe use some\\n    ///         dex aggregators.\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external override {\\n        uint256 gasStart = abi.decode(_flashReceiverData, (uint256));\\n\\n        ISilo silo = ISilo(msg.sender);\\n        require(repository.isSilo(address(silo)), \\\"not a Silo\\\");\\n\\n        uint256 quoteAmountFromCollaterals;\\n\\n        // swap all for quote token\\n        unchecked {\\n            for (uint256 i = 0; i < _assets.length; i++) {\\n                quoteAmountFromCollaterals += swapForQuote(_assets[i], _receivedCollaterals[i]);\\n            }\\n        }\\n\\n        uint256 quoteSpendOnRepay;\\n\\n        // repay\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (_shareAmountsToRepaid[i] == 0) continue;\\n\\n            unchecked {\\n                quoteSpendOnRepay += swapForAsset(_assets[i], _shareAmountsToRepaid[i]);\\n            }\\n\\n            IERC20(_assets[i]).approve(address(silo), _shareAmountsToRepaid[i]);\\n            silo.repayFor(_assets[i], _user, _shareAmountsToRepaid[i]);\\n        }\\n\\n        int256 quoteLeftAfterRepay = int256(quoteAmountFromCollaterals) - int256(quoteSpendOnRepay);\\n        address _owner = owner();\\n\\n        earnings[_owner] = quoteLeftAfterRepay < 0\\n            ? earnings[_owner] - uint256(-1 * quoteLeftAfterRepay)\\n            : earnings[_owner] + uint256(quoteLeftAfterRepay);\\n\\n        uint256 gasSpend = gasleft() - gasStart - 21000;\\n        emit LiquidationBalance(_user, quoteAmountFromCollaterals, quoteLeftAfterRepay, gasSpend);\\n    }\\n\\n    function oraclesWithSwapOptionCount() external view returns (uint256) {\\n        return oraclesWithSwapOption.length;\\n    }\\n\\n    function checkSolvency(address[] memory _users, ISilo[] memory _silos) external view returns (bool[] memory) {\\n        require(_users.length == _silos.length, \\\"oops\\\");\\n\\n        bool[] memory solvency = new bool[](_users.length);\\n\\n        for (uint256 i; i < _users.length; i++) {\\n            solvency[i] = _silos[i].isSolvent(_users[i]);\\n        }\\n\\n        return solvency;\\n    }\\n\\n    function checkDebt(address[] memory _users, ISilo[] memory _silos) external view returns (bool[] memory) {\\n        bool[] memory hasDebt = new bool[](_users.length);\\n\\n        for (uint256 i; i < _users.length; i++) {\\n            hasDebt[i] = lens.inDebt(_silos[i], _users[i]);\\n        }\\n\\n        return hasDebt;\\n    }\\n\\n    function swapForQuote(address _asset, uint256 _amount) public returns (uint256) {\\n        if (_amount == 0 || _asset == address(quoteToken)) return _amount;\\n\\n        IOracle oracle = findBestOracle(_asset);\\n        ISwapper swapper = swappers[oracle];\\n\\n        bytes memory callData = abi.encodeWithSelector(\\n            SWAP_AMOUNT_IN_SELECTOR,\\n                _asset,\\n                quoteToken,\\n                _amount,\\n                oracle,\\n                _asset\\n        );\\n\\n        // no need for safe approval, because we always using 100%\\n        IERC20(_asset).approve(swapper.spenderToApprove(), _amount);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = address(swapper).delegatecall(callData);\\n        require(success, \\\"swapAmountIn failed\\\");\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev it swaps quote token for asset\\n    /// @param _asset address\\n    /// @param _amount exact amount OUT, what we want to receive\\n    /// @return amount of quote token used for swap\\n    function swapForAsset(address _asset, uint256 _amount) public returns (uint256) {\\n        if (_amount == 0 || address(quoteToken) == _asset) return _amount;\\n\\n        IOracle oracle = findBestOracle(_asset);\\n        ISwapper swapper = swappers[oracle];\\n\\n        bytes memory callData = abi.encodeWithSelector(\\n            SWAP_AMOUNT_OUT_SELECTOR,\\n            quoteToken,\\n            _asset,\\n            _amount,\\n            oracle,\\n            _asset\\n        );\\n\\n        address spender = swapper.spenderToApprove();\\n        IERC20(quoteToken).approve(spender, type(uint256).max);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = address(swapper).delegatecall(callData);\\n        require(success, \\\"swapAmountOut failed\\\");\\n        IERC20(quoteToken).approve(spender, 0);\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function findBestOracle(address _asset) public view returns (IOracle) {\\n        IOracle[] memory oracles = oraclesWithSwapOption;\\n        uint256 maxLiquidity;\\n        IOracle bestOracle;\\n\\n        for (uint256 i = 0; i < oracles.length; i++) {\\n            IOracle oracle = oracles[i];\\n            uint256 quoteLiquidity = oracle.getQuoteLiquidityRaw(_asset);\\n\\n            if (quoteLiquidity > maxLiquidity) {\\n                bestOracle = oracle;\\n                maxLiquidity = quoteLiquidity;\\n            }\\n        }\\n\\n        return bestOracle;\\n    }\\n}\\n\",\"keccak256\":\"0x5185047abafda84a2bf026a6d4a0d67f337b7dd750cf6a201b1e44c09a375743\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638d46a1fa116100b8578063dde643031161007c578063dde643031461031e578063e7b43da514610331578063e9176c6014610344578063e996db2b1461036b578063effca70514610373578063f2fde38b1461038657600080fd5b80638d46a1fa146102cc5780638da5cb5b146102df578063a0ef91df146102f0578063bf0cbdb7146102f8578063c424ec771461030b57600080fd5b80634cee966a1161010a5780634cee966a14610220578063543fd31314610233578063639e7d2314610261578063715018a614610288578063801ef100146102905780638cad7fbe146102a357600080fd5b806303a69c9a14610147578063112666b714610170578063217a4b70146101af57806329bee73d146101d65780633ccfd60b14610216575b600080fd5b61015a610155366004611aa8565b610399565b6040516101679190611ced565b60405180910390f35b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610167565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101fd7f9cffaf6fb5a9865a918eb304cffc7751c01747ee00e8e35a30144c35b800d32e81565b6040516001600160e01b03199091168152602001610167565b61021e610512565b005b61019761022e366004611825565b6105e2565b610253610241366004611825565b60016020526000908152604090205481565b604051908152602001610167565b6101fd7f168c66b4ef41014cf231456cf6fce893ddb0a4a9bbef08aa50af66187c72fa1c81565b61021e61071e565b61019761029e366004611c15565b61075d565b6101976102b1366004611825565b6002602052600090815260409020546001600160a01b031681565b6102536102da36600461198c565b610787565b6000546001600160a01b0316610197565b61021e610af5565b61021e610306366004611b73565b610bc6565b61025361031936600461198c565b610c7c565b61015a61032c366004611aa8565b610f1e565b61021e61033f366004611866565b61109f565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b600354610253565b61021e610381366004611be7565b61152f565b61021e610394366004611825565b611587565b60606000835167ffffffffffffffff8111156103b7576103b7611f27565b6040519080825280602002602001820160405280156103e0578160200160208202803683370190505b50905060005b8451811015610508577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638705c35985838151811061043057610430611f11565b602002602001015187848151811061044a5761044a611f11565b60200260200101516040518363ffffffff1660e01b81526004016104849291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561049c57600080fd5b505afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190611bc5565b8282815181106104e6576104e6611f11565b911515602092830291909101909101528061050081611ee0565b9150506103e6565b5090505b92915050565b336000908152600160205260409020548061052a5750565b33600081815260016020526040808220919091555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190611bc5565b5050565b600080600380548060200260200160405190810160405280929190818152602001828054801561063b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161061d575b5050505050905060008060005b835181101561071557600084828151811061066557610665611f11565b6020908102919091010151604051631befe8b360e21b81526001600160a01b038981166004830152919250600091831690636fbfa2cc9060240160206040518083038186803b1580156106b757600080fd5b505afa1580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190611c2e565b905084811115610700578193508094505b5050808061070d90611ee0565b915050610648565b50949350505050565b6000546001600160a01b031633146107515760405162461bcd60e51b815260040161074890611d33565b60405180910390fd5b61075b6000611622565b565b6003818154811061076d57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008115806107c75750826001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316145b156107d357508061050c565b60006107de846105e2565b6001600160a01b0381811660008181526002602090815260408083205481517f0000000000000000000000000000000000000000000000000000000000000000871660248201528b871660448201819052606482018c9052608482019690965260a4808201969096528251808203909601865260c401825284830180516001600160e01b03166305a319ad60e21b1790528151636d9b759760e11b815291519697509094169492939192859263db36eb2e926004808301939192829003018186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190611849565b60405163095ea7b360e01b81526001600160a01b03808316600483015260001960248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190611bc5565b50600080846001600160a01b0316846040516109a89190611c47565b600060405180830381855af49150503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b509150915081610a315760405162461bcd60e51b81526020600482015260146024820152731cddd85c105b5bdd5b9d13dd5d0819985a5b195960621b6044820152606401610748565b60405163095ea7b360e01b81526001600160a01b038481166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015610a9b57600080fd5b505af1158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611bc5565b5080806020019051810190610ae89190611c2e565b9998505050505050505050565b3360009081526001602052604090205480610b0d5750565b336000908152600160205260408082209190915551632e1a7d4d60e01b8152600481018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90602401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b505060405133925083156108fc02915083906000818181858888f193505050501580156105de573d6000803e3d6000fd5b60005a9050816001600160a01b03166309e6d0cf84303085604051602001610bf091815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610c1e9493929190611c63565b600060405180830381600087803b158015610c3857600080fd5b505af1158015610c4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c7491908101906119b8565b505050505050565b6000811580610cbc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b15610cc857508061050c565b6000610cd3846105e2565b6001600160a01b038181166000818152600260209081526040918290205482518a8616602482018190527f000000000000000000000000000000000000000000000000000000000000000087166044830152606482018b9052608482019590955260a48082018690528451808303909101815260c4909101845280830180516001600160e01b0316639cffaf6f60e01b1790528351636d9b759760e11b8152935196975094169463095ea7b392869263db36eb2e92600480840193829003018186803b158015610da257600080fd5b505afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda9190611849565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101889052604401602060405180830381600087803b158015610e2257600080fd5b505af1158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190611bc5565b50600080836001600160a01b031683604051610e769190611c47565b600060405180830381855af49150503d8060008114610eb1576040519150601f19603f3d011682016040523d82523d6000602084013e610eb6565b606091505b509150915081610efe5760405162461bcd60e51b81526020600482015260136024820152721cddd85c105b5bdd5b9d125b8819985a5b1959606a1b6044820152606401610748565b80806020019051810190610f129190611c2e565b98975050505050505050565b60608151835114610f5a5760405162461bcd60e51b8152600401610748906020808252600490820152636f6f707360e01b604082015260600190565b6000835167ffffffffffffffff811115610f7657610f76611f27565b604051908082528060200260200182016040528015610f9f578160200160208202803683370190505b50905060005b845181101561050857838181518110610fc057610fc0611f11565b60200260200101516001600160a01b03166338b51ce1868381518110610fe857610fe8611f11565b60200260200101516040518263ffffffff1660e01b815260040161101b91906001600160a01b0391909116815260200190565b60206040518083038186803b15801561103357600080fd5b505afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611bc5565b82828151811061107d5761107d611f11565b911515602092830291909101909101528061109781611ee0565b915050610fa5565b6000818060200190518101906110b59190611c2e565b60405163025e1b9b60e31b815233600482018190529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906312f0dcd89060240160206040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190611bc5565b61118a5760405162461bcd60e51b815260206004820152600a6024820152696e6f7420612053696c6f60b01b6044820152606401610748565b6000805b898110156111ea576111de8b8b838181106111ab576111ab611f11565b90506020020160208101906111c09190611825565b8a8a848181106111d2576111d2611f11565b90506020020135610c7c565b9091019060010161118e565b506000805b8a8110156114045787878281811061120957611209611f11565b905060200201356000141561121d576113f2565b6112658c8c8381811061123257611232611f11565b90506020020160208101906112479190611825565b89898481811061125957611259611f11565b90506020020135610787565b820191508b8b8281811061127b5761127b611f11565b90506020020160208101906112909190611825565b6001600160a01b031663095ea7b3858a8a858181106112b1576112b1611f11565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381600087803b15801561130057600080fd5b505af1158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190611bc5565b50836001600160a01b031663976ce4958d8d8481811061135a5761135a611f11565b905060200201602081019061136f9190611825565b8f8b8b8681811061138257611382611f11565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050505b806113fc81611ee0565b9150506111ef565b5060006114118284611e5a565b905060006114276000546001600160a01b031690565b90506000821261145a576001600160a01b038116600090815260016020526040902054611455908390611dbd565b611489565b61146682600019611dd5565b6001600160a01b0382166000908152600160205260409020546114899190611e99565b6001600160a01b038216600090815260016020526040812091909155615208875a6114b49190611e99565b6114be9190611e99565b90507f6e1a737bede5a157b5cc67b23d86a07ed1b1529f80df499c7808cc7c2fa8052f8f86858460405161151694939291906001600160a01b0394909416845260208401929092526040830152606082015260800190565b60405180910390a1505050505050505050505050505050565b6000546001600160a01b031633146115595760405162461bcd60e51b815260040161074890611d33565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146115b15760405162461bcd60e51b815260040161074890611d33565b6001600160a01b0381166116165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610748565b61161f81611622565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261168457600080fd5b50813567ffffffffffffffff81111561169c57600080fd5b6020830191508360208260051b85010111156116b757600080fd5b9250929050565b600082601f8301126116cf57600080fd5b813560206116e46116df83611d99565b611d68565b80838252828201915082860187848660051b890101111561170457600080fd5b60005b8581101561172c57813561171a81611f3d565b84529284019290840190600101611707565b5090979650505050505050565b600082601f83011261174a57600080fd5b8151602061175a6116df83611d99565b82815281810190858301600585811b8801850189101561177957600080fd5b60005b8681101561181757825167ffffffffffffffff81111561179b57600080fd5b8901603f81018b136117ac57600080fd5b8681015160406117be6116df83611d99565b808382528a820191508285018f84868a1b88010111156117dd57600080fd5b600095505b84861015611800578051835260019590950194918b01918b016117e2565b50895250505094860194509185019160010161177c565b509198975050505050505050565b60006020828403121561183757600080fd5b813561184281611f3d565b9392505050565b60006020828403121561185b57600080fd5b815161184281611f3d565b60008060008060008060008060a0898b03121561188257600080fd5b883561188d81611f3d565b975060208981013567ffffffffffffffff808211156118ab57600080fd5b6118b78d838e01611672565b909a50985060408c01359150808211156118d057600080fd5b6118dc8d838e01611672565b909850965060608c01359150808211156118f557600080fd5b6119018d838e01611672565b909650945060808c013591508082111561191a57600080fd5b818c0191508c601f83011261192e57600080fd5b81358181111561194057611940611f27565b611952601f8201601f19168501611d68565b91508082528d8482850101111561196857600080fd5b80848401858401376000848284010152508093505050509295985092959890939650565b6000806040838503121561199f57600080fd5b82356119aa81611f3d565b946020939093013593505050565b6000806000606084860312156119cd57600080fd5b835167ffffffffffffffff808211156119e557600080fd5b818601915086601f8301126119f957600080fd5b81516020611a096116df83611d99565b8083825282820191508286018b848660051b8901011115611a2957600080fd5b600096505b84871015611a55578051611a4181611f3d565b835260019690960195918301918301611a2e565b5091890151919750909350505080821115611a6f57600080fd5b611a7b87838801611739565b93506040860151915080821115611a9157600080fd5b50611a9e86828701611739565b9150509250925092565b60008060408385031215611abb57600080fd5b823567ffffffffffffffff80821115611ad357600080fd5b611adf868387016116be565b9350602091508185013581811115611af657600080fd5b85019050601f81018613611b0957600080fd5b8035611b176116df82611d99565b80828252848201915084840189868560051b8701011115611b3757600080fd5b600094505b83851015611b63578035611b4f81611f3d565b835260019490940193918501918501611b3c565b5080955050505050509250929050565b60008060408385031215611b8657600080fd5b823567ffffffffffffffff811115611b9d57600080fd5b611ba9858286016116be565b9250506020830135611bba81611f3d565b809150509250929050565b600060208284031215611bd757600080fd5b8151801515811461184257600080fd5b60008060408385031215611bfa57600080fd5b8235611c0581611f3d565b91506020830135611bba81611f3d565b600060208284031215611c2757600080fd5b5035919050565b600060208284031215611c4057600080fd5b5051919050565b60008251611c59818460208701611eb0565b9190910192915050565b6080808252855190820181905260009060209060a0840190828901845b82811015611ca55781516001600160a01b031684529284019290840190600101611c80565b5050506001600160a01b03878116858401528616604085015283810360608501528451808252611cda81838501888601611eb0565b601f01601f191601019695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d27578351151583529284019291840191600101611d09565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d9157611d91611f27565b604052919050565b600067ffffffffffffffff821115611db357611db3611f27565b5060051b60200190565b60008219821115611dd057611dd0611efb565b500190565b60006001600160ff1b0381841382841380821686840486111615611dfb57611dfb611efb565b600160ff1b6000871282811687830589121615611e1a57611e1a611efb565b60008712925087820587128484161615611e3657611e36611efb565b87850587128184161615611e4c57611e4c611efb565b505050929093029392505050565b60008083128015600160ff1b850184121615611e7857611e78611efb565b6001600160ff1b0384018313811615611e9357611e93611efb565b50500390565b600082821015611eab57611eab611efb565b500390565b60005b83811015611ecb578181015183820152602001611eb3565b83811115611eda576000848401525b50505050565b6000600019821415611ef457611ef4611efb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461161f57600080fdfea2646970667358221220865dd666b1083bdde83103d2eb9778edfd66f322eaf3696df271069826ac71c264736f6c63430008070033",
  "devdoc": {
    "details": "see https://github.com/silo-finance/liquidation#readme for details how liquidation process should looks like",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "siloLiquidationCallback(address,address[],uint256[],uint256[],bytes)": {
        "details": "this is working example of how to perform liquidation, this method will be called by Silo         Keep in mind, that this helper might NOT choose the best swap option.         For best results (highest earnings) you probably want to implement your own callback and maybe use some         dex aggregators."
      },
      "swapForAsset(address,uint256)": {
        "details": "it swaps quote token for asset",
        "params": {
          "_amount": "exact amount OUT, what we want to receive",
          "_asset": "address"
        },
        "returns": {
          "_0": "amount of quote token used for swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/liquidation/LiquidationHelper.sol:LiquidationHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17819,
        "contract": "contracts/liquidation/LiquidationHelper.sol:LiquidationHelper",
        "label": "earnings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17825,
        "contract": "contracts/liquidation/LiquidationHelper.sol:LiquidationHelper",
        "label": "swappers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IOracle)15909,t_contract(ISwapper)16378)"
      },
      {
        "astId": 17829,
        "contract": "contracts/liquidation/LiquidationHelper.sol:LiquidationHelper",
        "label": "oraclesWithSwapOption",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IOracle)15909)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IOracle)15909)dyn_storage": {
        "base": "t_contract(IOracle)15909",
        "encoding": "dynamic_array",
        "label": "contract IOracle[]",
        "numberOfBytes": "32"
      },
      "t_contract(IOracle)15909": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapper)16378": {
        "encoding": "inplace",
        "label": "contract ISwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IOracle)15909,t_contract(ISwapper)16378)": {
        "encoding": "mapping",
        "key": "t_contract(IOracle)15909",
        "label": "mapping(contract IOracle => contract ISwapper)",
        "numberOfBytes": "32",
        "value": "t_contract(ISwapper)16378"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}