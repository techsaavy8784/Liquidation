{
  "address": "0x653558D47154cf6EBb05Da16A994E75411A6093a",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "indexed": false,
          "internalType": "struct IInterestRateModel.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DP",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RCOMP_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "X_MAX",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_c",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "_u",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateCompoundInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "ri",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Tcrit",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_c",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "_u",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateCurrentInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcur",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [
        {
          "internalType": "int256",
          "name": "uopt",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ucrit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ulow",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ki",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "kcrit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "klow",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "klin",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "beta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ri",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Tcrit",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCompoundInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCompoundInterestRateAndUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcomp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getCurrentInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rcur",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_silo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "uopt",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ucrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ulow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ki",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "kcrit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klow",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "klin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "beta",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ri",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "Tcrit",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateModel.Config",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67aaec5317a230b677079eff9dc924a291a4ad33b2d042f8e5134e2c50056500",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0x653558D47154cf6EBb05Da16A994E75411A6093a",
    "transactionIndex": 40,
    "gasUsed": "2295593",
    "logsBloom": "0x
    "blockHash": "0xe36c508afcdebc092ea317ac8fc9b7c396ac0d1db0fc0885c332688b645d354b",
    "transactionHash": "0x67aaec5317a230b677079eff9dc924a291a4ad33b2d042f8e5134e2c50056500",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 10149044,
        "transactionHash": "0x67aaec5317a230b677079eff9dc924a291a4ad33b2d042f8e5134e2c50056500",
        "address": "0x653558D47154cf6EBb05Da16A994E75411A6093a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0xe36c508afcdebc092ea317ac8fc9b7c396ac0d1db0fc0885c332688b645d354b"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 10149044,
        "transactionHash": "0x67aaec5317a230b677079eff9dc924a291a4ad33b2d042f8e5134e2c50056500",
        "address": "0x653558D47154cf6EBb05Da16A994E75411A6093a",
        "topics": [
          "0xf254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df458",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000853a0d2313c0000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000b334000000000000000000000000000000000000000000000000000000127520915700000000000000000000000000000000000000000000000000000007620d06ef00000000000000000000000000000000000000000000000000000000ec41a0dd00000000000000000000000000000000000000000000000000007e5196e2ae3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 108,
        "blockHash": "0xe36c508afcdebc092ea317ac8fc9b7c396ac0d1db0fc0885c332688b645d354b"
      }
    ],
    "blockNumber": 10149044,
    "cumulativeGasUsed": "11616924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "uopt": "200000000000000000",
      "ucrit": "600000000000000000",
      "ulow": "100000000000000000",
      "ki": "45876",
      "kcrit": "79274479959",
      "klow": "31709791983",
      "klin": "3963723997",
      "beta": "138888888888888",
      "ri": "0",
      "Tcrit": "0"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "513d71c9d0c126d5b4efd168466082e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DP\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RCOMP_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"X_MAX\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_c\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"_u\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateCompoundInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_c\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"_u\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcur\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCompoundInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCompoundInterestRateAndUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcomp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getCurrentInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rcur\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"uopt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ucrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ulow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ki\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"kcrit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klow\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"klin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ri\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Tcrit\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateModel.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"calculateCompoundInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)\":{\"details\":\"pure function that calculates interest rate based on raw input data\",\"params\":{\"_blockTimestamp\":\"current block timestamp\",\"_c\":\"configuration object, InterestRateModel.Config\",\"_interestRateTimestamp\":\"timestamp of last interest rate update\",\"_u\":\"asset untilization\"},\"returns\":{\"Tcrit\":\"time during which the utilization exceeds the critical value\",\"rcomp\":\"compounded interest rate from last update until now\",\"ri\":\"current integral part of the rate\"}},\"calculateCurrentInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)\":{\"details\":\"pure function that calculates current annual interest rate\",\"params\":{\"_blockTimestamp\":\"current block timestamp\",\"_c\":\"configuration object, InterestRateModel.Config\",\"_interestRateTimestamp\":\"timestamp of last interest rate update\",\"_u\":\"asset untilization\"},\"returns\":{\"rcur\":\"current annual interest rate\"}},\"getCompoundInterestRate(address,address,uint256)\":{\"details\":\"get compound interest rate\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\",\"_silo\":\"address of Silo\"},\"returns\":{\"rcomp\":\"compounded interest rate from last update until now\"}},\"getCompoundInterestRateAndUpdate(address,uint256)\":{\"details\":\"get compound interest rate and update model storage\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\"},\"returns\":{\"rcomp\":\"compounded interest rate from last update until now\"}},\"getCurrentInterestRate(address,address,uint256)\":{\"details\":\"get current annual interest rate\",\"params\":{\"_asset\":\"address of an asset in Silo for which interest rate should be calculated\",\"_blockTimestamp\":\"current block timestamp\",\"_silo\":\"address of Silo\"},\"returns\":{\"rcur\":\"current annual interest rate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"DP\":{\"details\":\"DP is 18 decimal points used for integer calculations\"},\"RCOMP_MAX\":{\"details\":\"maximum value of compound interest teh model will return\"},\"X_MAX\":{\"details\":\"maximum value of X for which, RCOMP_MAX should be returned\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateModel.sol\":\"InterestRateModel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./lib/PRBMathSD59x18.sol\\\";\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./utils/TwoStepOwnable.sol\\\";\\n\\ncontract InterestRateModel is IInterestRateModel, TwoStepOwnable {\\n    using PRBMathSD59x18 for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev DP is 18 decimal points used for integer calculations\\n    int256 public override constant DP = 1e18;\\n\\n    /// @dev maximum value of compound interest teh model will return\\n    uint256 public constant RCOMP_MAX = 340282366920938463220434743172917753976000000000000000000;\\n\\n    /// @dev maximum value of X for which, RCOMP_MAX should be returned\\n    int256 public constant X_MAX = 88722839111672999627;\\n\\n    // Silo => asset => ModelData\\n    mapping(address => mapping(address => Config)) public config;\\n\\n    event ConfigUpdate(address indexed silo, address indexed asset, Config config);\\n\\n    constructor(Config memory _config) {\\n        _setConfig(address(0), address(0), _config);\\n    }\\n\\n    function setConfig(address _silo, address _asset, Config calldata _config) external onlyOwner {\\n        _setConfig(_silo, _asset, _config);\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external override returns (uint256 rcomp) {\\n        // assume that caller is Silo\\n        address silo = msg.sender;\\n\\n        (rcomp, config[silo][_asset].ri, config[silo][_asset].Tcrit) = calculateCompoundInterestRate(\\n            getConfig(silo, _asset),\\n            ISilo(silo).getUtilization(_asset).toInt256(),\\n            ISilo(silo).interestRateTimestamp(_asset),\\n            _blockTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view override returns (uint256 rcomp) {\\n        (rcomp,,) = calculateCompoundInterestRate(\\n            getConfig(_silo, _asset),\\n            ISilo(_silo).getUtilization(_asset).toInt256(),\\n            ISilo(_silo).interestRateTimestamp(_asset),\\n            _blockTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view override returns (uint256 rcur) {\\n        rcur = calculateCurrentInterestRate(\\n            getConfig(_silo, _asset),\\n            ISilo(_silo).getUtilization(_asset).toInt256(),\\n            ISilo(_silo).interestRateTimestamp(_asset),\\n            _blockTimestamp\\n        );\\n    }\\n\\n    function getConfig(address _silo, address _asset) public view returns (Config memory) {\\n        if (config[_silo][_asset].uopt != 0) {\\n            return config[_silo][_asset];\\n        }\\n\\n        // use default config\\n        Config memory c = config[address(0)][address(0)];\\n\\n        // model data is always stored for each silo and asset so default values must be replaced\\n        c.ri = config[_silo][_asset].ri;\\n        c.Tcrit = config[_silo][_asset].Tcrit;\\n        return c;\\n    }\\n\\n    /* solhint-disable */\\n\\n    /// @inheritdoc IInterestRateModel\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) public pure override returns (uint256 rcur) {\\n        // T := t1 - t0 # length of time period in seconds\\n        int256 T = (_blockTimestamp - _interestRateTimestamp).toInt256();\\n\\n        int256 rp;\\n        if (_u > _c.ucrit) {\\n            // rp := kcrit *(1 + Tcrit + beta *T)*( u0 - ucrit )\\n            rp = _c.kcrit * (DP + _c.Tcrit + _c.beta * T) * (_u - _c.ucrit) / DP / DP;\\n        } else {\\n            // rp := min (0, klow * (u0 - ulow ))\\n            rp = _min(0, _c.klow * (_u - _c.ulow) / DP);\\n        }\\n\\n        // rlin := klin * u0 # lower bound between t0 and t1\\n        int256 rlin = _c.klin * _u / DP;\\n        // ri := max(ri , rlin )\\n        int256 ri = _max(_c.ri, rlin);\\n        // ri := max(ri + ki * (u0 - uopt ) * T, rlin )\\n        ri = _max(ri + _c.ki * (_u - _c.uopt) * T / DP, rlin);\\n        // rcur := max (ri + rp , rlin ) # current per second interest rate\\n        rcur = (_max(ri + rp, rlin)).toUint256();\\n        rcur *= 365 days;\\n    }\\n\\n    struct LocalVars {\\n        int256 T;\\n        int256 slopei;\\n        int256 rp;\\n        int256 slope;\\n        int256 r0;\\n        int256 rlin;\\n        int256 r1;\\n        int256 x;\\n        int256 rlin1;\\n        int256 rcomp;\\n    }\\n\\n    /// @inheritdoc IInterestRateModel\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) public pure override returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit\\n    ) {\\n        ri = _c.ri;\\n        Tcrit = _c.Tcrit;\\n\\n        // struct for local vars to avoid \\\"Stack too deep\\\"\\n        LocalVars memory _l = LocalVars(0,0,0,0,0,0,0,0,0,0);\\n\\n        // length of time period in seconds\\n        _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\\n\\n        // slopei := ki * (u0 - uopt )\\n        _l.slopei = _c.ki * (_u - _c.uopt) / DP;\\n\\n        if (_u > _c.ucrit) {\\n            // rp := kcrit * (1 + Tcrit) * (u0 - ucrit )\\n            _l.rp = _c.kcrit * (DP + Tcrit) * (_u - _c.ucrit) / DP / DP;\\n            // slope := slopei + kcrit * beta * (u0 - ucrit )\\n            _l.slope = _l.slopei + _c.kcrit * _c.beta * (_u - _c.ucrit) / DP / DP;\\n            // Tcrit := Tcrit + beta * T\\n            Tcrit = Tcrit + _c.beta * _l.T;\\n        } else {\\n            // rp := min (0, klow * (u0 - ulow ))\\n            _l.rp = _min(0, _c.klow * (_u - _c.ulow) / DP);\\n            // slope := slopei\\n            _l.slope = _l.slopei;\\n            // Tcrit := max (0, Tcrit - beta * T)\\n            Tcrit = _max(0, Tcrit - _c.beta * _l.T);\\n        }\\n\\n        // rlin := klin * u0 # lower bound between t0 and t1\\n        _l.rlin = _c.klin * _u / DP;\\n        // ri := max(ri , rlin )\\n        ri = _max(ri , _l.rlin);\\n        // r0 := ri + rp # interest rate at t0 ignoring lower bound\\n        _l.r0 = ri + _l.rp;\\n        // r1 := r0 + slope *T # what interest rate would be at t1 ignoring lower bound\\n        _l.r1 = _l.r0 + _l.slope * _l.T;\\n\\n        // Calculating the compound interest\\n\\n        if (_l.r0 >= _l.rlin && _l.r1 >= _l.rlin) {\\n            // lower bound isn\\u2019t activated\\n            // rcomp := exp (( r0 + r1) * T / 2) - 1\\n            _l.x = (_l.r0 + _l.r1) * _l.T / 2;\\n        } else if (_l.r0 < _l.rlin && _l.r1 < _l.rlin) {\\n            // lower bound is active during the whole time\\n            // rcomp := exp( rlin * T) - 1\\n            _l.x = _l.rlin * _l.T;\\n        } else if (_l.r0 >= _l.rlin && _l.r1 < _l.rlin) {\\n            // lower bound is active after some time\\n            // rcomp := exp( rlin *T - (r0 - rlin )^2/ slope /2) - 1\\n            _l.x = _l.rlin * _l.T - (_l.r0 - _l.rlin)**2 / _l.slope / 2;\\n        } else {\\n            // lower bound is active before some time\\n            // rcomp := exp( rlin *T + (r1 - rlin )^2/ slope /2) - 1\\n            _l.x = _l.rlin * _l.T + (_l.r1 - _l.rlin)**2 / _l.slope / 2;\\n        }\\n\\n        if (_l.x >= X_MAX) {\\n            rcomp = RCOMP_MAX;\\n        } else {\\n            _l.rcomp = _l.x.exp() - DP;\\n            rcomp = _l.rcomp > 0 ? _l.rcomp.toUint256() : 0;\\n        }\\n\\n        // ri := max(ri + slopei * T, rlin )\\n        ri = _max(ri + _l.slopei * _l.T, _l.rlin);\\n    }\\n\\n    /* solhint-enable */\\n\\n    function _setConfig(address _silo, address _asset, Config memory _config) internal {\\n        config[_silo][_asset] = _config;\\n        emit ConfigUpdate(_silo, _asset, _config);\\n    }\\n\\n    /// @dev Returns the largest of two numbers.\\n    function _max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function _min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xd18e7c423b4819d95cd60fa32b85c6d910fb739ca97232dc14667c9f4c8a10b9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Liquidate(address indexed asset, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f10a064de5d9f67cb6730af6287410335201becab000dea6588cee0e05f10\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x5909b480d87f4147e8c83c6b60a0c5b7c3b8af53de402823b44396acc8fe4f6d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc1931b12d3f8c39887ce79bc191603ef2e0be0b5836968d68976760d139c9399\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PRBMathCommon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\n/* solhint-disable */\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\\n/// @author Paul Razvan Berg\\nlibrary PRBMathCommon {\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\\n            // may get very close to 2^256, which doesn't fit in int256.\\n            result = 0x80000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\\n\\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\\n            // by two when we set the result equal to 0.5 above.\\n            result = result << ((x >> 128) + 1);\\n\\n            // Convert the result to the signed 60.18-decimal fixed-point format.\\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x52c1172138c7a10ae0a175ce2e295ba5c06c571173d3afd5f96ccac585977143\",\"license\":\"BUSL-1.1\"},\"contracts/lib/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nimport \\\"./PRBMathCommon.sol\\\";\\n\\n/* solhint-disable */\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math. It works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 88722839111672999628.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59794705707972522261.\\n        if (x < -41446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 128e18.\\n        require(x < 88722839111672999628);\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 128e18 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^-x = 1/2^x.\\n        if (x < 0) {\\n            // 2**59.794705707972522262 is the maximum number whose inverse does not equal zero.\\n            if (x < -59794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked { result = 1e36 / exp2(-x); }\\n            return result;\\n        } else {\\n            // 2**128 doesn't fit within the 128.128-bit fixed-point representation.\\n            require(x < 128e18);\\n\\n            unchecked {\\n                // Convert x to the 128.128-bit fixed-point format.\\n                uint256 x128x128 = (uint256(x) << 128) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 128e18.\\n                result = int256(PRBMathCommon.exp2(x128x128));\\n            }\\n        }\\n    }\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x7b6f1e0a50804362a9b9e214027bf49a29b8cd91f17fd4eb12665e5eb69530c4\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nabstract contract TwoStepOwnable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfd0a3e3ea8ab0fb749f9b8a6481ed04204dd6de0869400a8b59d498fac79ab06\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002747380380620027478339810160408190526200003491620001d6565b6200003f3362000054565b6200004d60008083620000a4565b5062000298565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600081815260026020818152604080842095881680855295825292839020865181559086015160018201558286015191810191909155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e085015160078201556101008501516008820155610120850151600990910155517ff254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df45890620001c9908590600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60405180910390a3505050565b60006101408284031215620001ea57600080fd5b620001f462000260565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b60405161014081016001600160401b03811182821017156200029257634e487b7160e01b600052604160045260246000fd5b60405290565b61249f80620002a86000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806379ba5097116100a2578063bbdcbed611610071578063bbdcbed614610219578063cbf75c9a14610239578063e076a551146102f2578063e30c397814610311578063f2fde38b1461032257600080fd5b806379ba5097146101c957806381b51e0c146101d15780638da5cb5b146101e1578063b1e017651461020657600080fd5b80633a191482116100de5780633a191482146101715780636bcc82161461019f578063715018a6146101ae57806374a3e924146101b657600080fd5b806303dc12fc14610110578063071962ff146101365780630d26ee9b146101495780633278c6941461015c575b600080fd5b61012361011e366004612006565b610335565b6040519081526020015b60405180910390f35b610123610144366004611fca565b61048a565b61012361015736600461204d565b610553565b61016f61016a366004611f2b565b6106f6565b005b61018461017f36600461204d565b6107ab565b6040805193845260208401929092529082015260600161012d565b610123670de0b6b3a764000081565b61016f610c35565b61016f6101c4366004611f79565b610c7a565b61016f610cd1565b6101236804cf46d8192b672ecb81565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161012d565b610123610214366004611fca565b610d67565b61022c610227366004611f46565b610e33565b60405161012d91906120d9565b6102a8610247366004611f46565b600260205281600052604060002060205280600052604060002060009150915050806000015490806001015490806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400161012d565b610123770de0b6b3a763ffff493b7bec438eaf141b844d2356e0000081565b6001546001600160a01b03166101ee565b61016f610330366004611f2b565b611128565b6000336104486103458286610e33565b60405163fdce864360e01b81526001600160a01b0387811660048301526103c9919085169063fdce8643906024015b60206040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c4919061208b565b6111d2565b60405163011d3b9960e41b81526001600160a01b0388811660048301528516906311d3b9909060240160206040518083038186803b15801561040a57600080fd5b505afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610442919061208b565b866107ab565b6001600160a01b039384166000908152600260209081526040808320999096168252979097529290952060098101929092556008909101939093555090919050565b600061054b6104998585610e33565b60405163fdce864360e01b81526001600160a01b0386811660048301526104cc919088169063fdce864390602401610374565b60405163011d3b9960e41b81526001600160a01b0387811660048301528816906311d3b9909060240160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061208b565b85610553565b949350505050565b6000806105636103c48585612426565b9050600086602001518613156105f357670de0b6b3a76400008088602001518861058d91906123e7565b848a60e0015161059d9190612343565b6101208b01516105b590670de0b6b3a7640000612182565b6105bf9190612182565b8a608001516105ce9190612343565b6105d89190612343565b6105e291906121c3565b6105ec91906121c3565b9050610632565b61062f6000670de0b6b3a764000089604001518961061191906123e7565b8a60a001516106209190612343565b61062a91906121c3565b611240565b90505b6000670de0b6b3a7640000878960c0015161064d9190612343565b61065791906121c3565b9050600061066a89610100015183611258565b90506106bc670de0b6b3a7640000858b600001518b61068991906123e7565b8c606001516106989190612343565b6106a29190612343565b6106ac91906121c3565b6106b69083612182565b83611258565b90506106d96106d46106ce8584612182565b84611258565b611267565b94506106e96301e13380866123c8565b9998505050505050505050565b336107096000546001600160a01b031690565b6001600160a01b0316146107385760405162461bcd60e51b815260040161072f906120a4565b60405180910390fd5b806001600160a01b03166107546000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008661010001519150866101200151905060006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250905061082386866103c49190612426565b81528751670de0b6b3a76400009061083b90896123e7565b896060015161084a9190612343565b61085491906121c3565b60208083019190915288015187131561094857670de0b6b3a76400008089602001518961088191906123e7565b61089385670de0b6b3a7640000612182565b8b608001516108a29190612343565b6108ac9190612343565b6108b691906121c3565b6108c091906121c3565b60408201526020880151670de0b6b3a76400009081906108e0908a6123e7565b8a60e001518b608001516108f49190612343565b6108fe9190612343565b61090891906121c3565b61091291906121c3565b81602001516109219190612182565b6060820152805160e08901516109379190612343565b6109419083612182565b91506109ae565b6109756000670de0b6b3a76400008a604001518a61096691906123e7565b8b60a001516106209190612343565b604082015260208101516060820152805160e08901516109ab9160009161099c9190612343565b6109a690856123e7565b611258565b91505b670de0b6b3a7640000878960c001516109c79190612343565b6109d191906121c3565b60a082018190526109e3908490611258565b92508060400151836109f59190612182565b608082015280516060820151610a0b9190612343565b8160800151610a1a9190612182565b60c082015260a0810151608082015112801590610a3f57508060a001518160c0015112155b15610a7b57805160c0820151608083015160029291610a5d91612182565b610a679190612343565b610a7191906121c3565b60e0820152610b85565b8060a001518160800151128015610a9957508060a001518160c00151125b15610aaf57805160a0820151610a719190612343565b8060a00151816080015112158015610ace57508060a001518160c00151125b15610b29576002816060015160028360a001518460800151610af091906123e7565b610afa9190612334565b610b0491906121c3565b610b0e91906121c3565b815160a0830151610b1f9190612343565b610a7191906123e7565b6002816060015160028360a001518460c00151610b4691906123e7565b610b509190612334565b610b5a91906121c3565b610b6491906121c3565b815160a0830151610b759190612343565b610b7f9190612182565b60e08201525b6804cf46d8192b672ecb8160e0015112610bb957770de0b6b3a763ffff493b7bec438eaf141b844d2356e000009350610c00565b670de0b6b3a7640000610bcf8260e001516112b9565b610bd991906123e7565b6101208201819052600012610bef576000610bfd565b610bfd816101200151611267565b93505b80516020820151610c2891610c1491612343565b610c1e9085612182565b8260a00151611258565b9250509450945094915050565b33610c486000546001600160a01b031690565b6001600160a01b031614610c6e5760405162461bcd60e51b815260040161072f906120a4565b610c786000611312565b565b33610c8d6000546001600160a01b031690565b6001600160a01b031614610cb35760405162461bcd60e51b815260040161072f906120a4565b610ccc8383610cc736859003850185612030565b611362565b505050565b6001546001600160a01b03163314610d3b5760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161072f565b610d55610d506001546001600160a01b031690565b611312565b600180546001600160a01b0319169055565b6000610e28610d768585610e33565b60405163fdce864360e01b81526001600160a01b038681166004830152610da9919088169063fdce864390602401610374565b60405163011d3b9960e41b81526001600160a01b0387811660048301528816906311d3b9909060240160206040518083038186803b158015610dea57600080fd5b505afa158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e22919061208b565b856107ab565b509095945050505050565b610e89604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0380841660009081526002602090815260408083209386168352929052205415610f4f57506001600160a01b0380831660009081526002602081815260408084209486168452938152918390208351610140810185528154815260018201549381019390935290810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820152600990910154610120820152611122565b5060408051610140810182527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ad5481527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668ae546020828101919091527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668af54828401527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b05460608301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b15460808301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b25460a08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b35460c08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b45460e08301527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b55461010083019081527f6ee3efecae883df2d7ccda22610b4ca771a299e707cb0d65c4ec97dc4e6668b65461012084019081526001600160a01b0387811660009081526002855286812091881680825282865296812060088101549094529590955293909152600901549091525b92915050565b3361113b6000546001600160a01b031690565b6001600160a01b0316146111615760405162461bcd60e51b815260040161072f906120a4565b6001600160a01b0381166111c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072f565b6111cf81611312565b50565b60006001600160ff1b0382111561123c5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161072f565b5090565b600081831261124f5781611251565b825b9392505050565b600081831361124f5781611251565b60008082121561123c5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161072f565b600068023f2fa8f6da5b9d31198212156112d557506000919050565b6804cf46d8192b672ecc82126112ea57600080fd5b6714057b7ef767814f8202611251670de0b6b3a76400006706f05b59d3b20000830105611427565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600081815260026020818152604080842095881680855295825292839020865181559086015160018201558286015191810191909155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e085015160078201556101008501516008820155610120850151600990910155517ff254631d9ea3e3ab061b1c56e1215a268abf5ff28a460b255f308aac112df4589061141a9085906120d9565b60405180910390a3505050565b60008082121561147b5768033dd1780914b971141982121561144b57506000919050565b61145782600003611427565b6ec097ce7bc90715b34b9f10000000008161147457611474612453565b0592915050565b6806f05b59d3b2000000821261149057600080fd5b670de0b6b3a7640000608083901b04611251816114ad565b919050565b6001607f1b818116156114d15770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6001607e1b8216156114f4577001306fe0a31b7152de8d5a46305c85eded0260801c5b6001607d1b821615611517577001172b83c7d517adcdf7c8c50eb14a79200260801c5b6001607c1b82161561153a5770010b5586cf9890f6298b92b71842a983640260801c5b6001607b1b82161561155d577001059b0d31585743ae7c548eb68ca417fe0260801c5b6001607a1b82161561158057700102c9a3e778060ee6f7caca4f7a29bde90260801c5b600160791b8216156115a35770010163da9fb33356d84a66ae336dcdfa400260801c5b600160781b8216156115c657700100b1afa5abcbed6129ab13ec11dc95440260801c5b600160771b8216156115e95770010058c86da1c09ea1ff19d294cf2f679c0260801c5b600160761b82161561160c577001002c605e2e8cec506d21bfc89a23a0110260801c5b600160751b82161561162f57700100162f3904051fa128bca9c55c31e5e00260801c5b600160741b821615611652577001000b175effdc76ba38e31671ca9397260260801c5b600160731b82161561167557700100058ba01fb9f96d6cacd4b180917c3e0260801c5b600160721b8216156116985770010002c5cc37da9491d0985c348c68e7b40260801c5b600160711b8216156116bb577001000162e525ee054754457d59952920270260801c5b600160701b8216156116de5770010000b17255775c040618bf4a4ade83fd0260801c5b6001606f1b821615611701577001000058b91b5bc9ae2eed81e9b7d4cfac0260801c5b6001606e1b82161561172457700100002c5c89d5ec6ca4d7c8acc017b7ca0260801c5b6001606d1b8216156117475770010000162e43f4f831060e02d839a9d16d0260801c5b6001606c1b82161561176a57700100000b1721bcfc99d9f890ea069117630260801c5b6001606b1b82161561178d5770010000058b90cf1e6d97f9ca14dbcc16290260801c5b6001606a1b8216156117b0577001000002c5c863b73f016468f6bac5ca2c0260801c5b600160691b8216156117d357700100000162e430e5a18f6119e3c02282a60260801c5b600160681b8216156117f6577001000000b1721835514b86e6d96efd1bff0260801c5b600160671b82161561181957700100000058b90c0b48c6be5df846c5b2f00260801c5b600160661b82161561183c5770010000002c5c8601cc6b9e94213c72737b0260801c5b600160651b82161561185f577001000000162e42fff037df38aa2b219f070260801c5b600160641b8216156118825770010000000b17217fba9c739aa5819f44fa0260801c5b600160631b8216156118a5577001000000058b90bfcdee5acd3c1cedc8240260801c5b600160621b8216156118c857700100000002c5c85fe31f35a6a30da1be510260801c5b600160611b8216156118eb5770010000000162e42ff0999ce3541b9fffd00260801c5b600160601b82161561190e57700100000000b17217f80f4ef5aadda455540260801c5b6001605f1b8216156119315770010000000058b90bfbf8479bd5a81b51ae0260801c5b6001605e1b821615611954577001000000002c5c85fdf84bd62ae30a74cd0260801c5b6001605d1b82161561197757700100000000162e42fefb2fed257559bdaa0260801c5b6001605c1b82161561199a577001000000000b17217f7d5a7716bba4a9af0260801c5b6001605b1b8216156119bd57700100000000058b90bfbe9ddbac5e109ccf0260801c5b6001605a1b8216156119e05770010000000002c5c85fdf4b15de6f17eb0e0260801c5b600160591b821615611a03577001000000000162e42fefa494f1478fde050260801c5b600160581b821615611a265770010000000000b17217f7d20cf927c8e94d0260801c5b600160571b821615611a49577001000000000058b90bfbe8f71cb4e4b33e0260801c5b600160561b821615611a6c57700100000000002c5c85fdf477b662b269460260801c5b600160551b821615611a8f5770010000000000162e42fefa3ae53369388d0260801c5b600160541b821615611ab257700100000000000b17217f7d1d351a389d410260801c5b600160531b821615611ad55770010000000000058b90bfbe8e8b2d3d4edf0260801c5b600160521b821615611af8577001000000000002c5c85fdf4741bea6e77f0260801c5b600160511b821615611b1b57700100000000000162e42fefa39fe95583c30260801c5b600160501b821615611b3e577001000000000000b17217f7d1cfb72b45e30260801c5b6980000000000000000000821615611b6757700100000000000058b90bfbe8e7cc35c3f20260801c5b6940000000000000000000821615611b905770010000000000002c5c85fdf473e242ea390260801c5b6920000000000000000000821615611bb9577001000000000000162e42fefa39f02b772c0260801c5b6910000000000000000000821615611be25770010000000000000b17217f7d1cf7d83c1a0260801c5b6908000000000000000000821615611c0b577001000000000000058b90bfbe8e7bdcbe2e0260801c5b6904000000000000000000821615611c3457700100000000000002c5c85fdf473dea871f0260801c5b6902000000000000000000821615611c5d5770010000000000000162e42fefa39ef44d920260801c5b6901000000000000000000821615611c8657700100000000000000b17217f7d1cf79e9490260801c5b68800000000000000000821615611cae5770010000000000000058b90bfbe8e7bce5450260801c5b68400000000000000000821615611cd6577001000000000000002c5c85fdf473de6eca0260801c5b68200000000000000000821615611cfe57700100000000000000162e42fefa39ef366f0260801c5b68100000000000000000821615611d26577001000000000000000b17217f7d1cf79afa0260801c5b68080000000000000000821615611d4e57700100000000000000058b90bfbe8e7bcd6e0260801c5b68040000000000000000821615611d765770010000000000000002c5c85fdf473de6b30260801c5b68020000000000000000821615611d9e577001000000000000000162e42fefa39ef3590260801c5b68010000000000000000821615611dc65770010000000000000000b17217f7d1cf79ac0260801c5b6001608083901c011b61112281670de0b6b3a7640000600160801b600080806000198587098587029250828110838203039150508060001415611e1b5760008411611e1057600080fd5b508290049050611251565b808411611e2757600080fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b03811681146114a857600080fd5b60006101408284031215611eb957600080fd5b611ec161214a565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b600060208284031215611f3d57600080fd5b61125182611e8f565b60008060408385031215611f5957600080fd5b611f6283611e8f565b9150611f7060208401611e8f565b90509250929050565b6000806000838503610180811215611f9057600080fd5b611f9985611e8f565b9350611fa760208601611e8f565b9250610140603f1982011215611fbc57600080fd5b506040840190509250925092565b600080600060608486031215611fdf57600080fd5b611fe884611e8f565b9250611ff660208501611e8f565b9150604084013590509250925092565b6000806040838503121561201957600080fd5b61202283611e8f565b946020939093013593505050565b6000610140828403121561204357600080fd5b6112518383611ea6565b6000806000806101a0858703121561206457600080fd5b61206e8686611ea6565b966101408601359650610160860135956101800135945092505050565b60006020828403121561209d57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b604051610140810167ffffffffffffffff8111828210171561217c57634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b03849003851316156121a4576121a461243d565b600160ff1b83900384128116156121bd576121bd61243d565b50500190565b6000826121e057634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156121fa576121fa61243d565b500590565b80825b60018086116122115750612244565b6001600160ff1b0382900482111561222b5761222b61243d565b8086161561223857918102915b9490941c938002612202565b935093915050565b6000828015612262576001811461226c57612275565b6001915050611122565b82915050611122565b508161228357506000611122565b5060016000821380821461229c5780156122bb576122d5565b6001600160ff1b038390048311156122b6576122b661243d565b6122d5565b6001600160ff1b038390058312156122d5576122d561243d565b50808316156122e15750805b6122f18360011c838402836121ff565b600082136001600160ff1b03829004831116156123105761231061243d565b60008212600160ff1b8290058312161561232c5761232c61243d565b029392505050565b600061125160ff84168361224c565b60006001600160ff1b03818413828413808216868404861116156123695761236961243d565b600160ff1b60008712828116878305891216156123885761238861243d565b600087129250878205871284841616156123a4576123a461243d565b878505871281841616156123ba576123ba61243d565b505050929093029392505050565b60008160001904831182151516156123e2576123e261243d565b500290565b60008083128015600160ff1b8501841216156124055761240561243d565b6001600160ff1b03840183138116156124205761242061243d565b50500390565b6000828210156124385761243861243d565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220c6793673940963fd6fd59efe138de624139f1eb09ec043183902c87bd08980e364736f6c63430008070033",
  "deployedBytecode": "",
  "libraries": {
    "PRBMathSD59x18": "0x7155E418c504Ba314629a2607EF0858482F35300"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "calculateCompoundInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)": {
        "details": "pure function that calculates interest rate based on raw input data",
        "params": {
          "_blockTimestamp": "current block timestamp",
          "_c": "configuration object, InterestRateModel.Config",
          "_interestRateTimestamp": "timestamp of last interest rate update",
          "_u": "asset untilization"
        },
        "returns": {
          "Tcrit": "time during which the utilization exceeds the critical value",
          "rcomp": "compounded interest rate from last update until now",
          "ri": "current integral part of the rate"
        }
      },
      "calculateCurrentInterestRate((int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),int256,uint256,uint256)": {
        "details": "pure function that calculates current annual interest rate",
        "params": {
          "_blockTimestamp": "current block timestamp",
          "_c": "configuration object, InterestRateModel.Config",
          "_interestRateTimestamp": "timestamp of last interest rate update",
          "_u": "asset untilization"
        },
        "returns": {
          "rcur": "current annual interest rate"
        }
      },
      "getCompoundInterestRate(address,address,uint256)": {
        "details": "get compound interest rate",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp",
          "_silo": "address of Silo"
        },
        "returns": {
          "rcomp": "compounded interest rate from last update until now"
        }
      },
      "getCompoundInterestRateAndUpdate(address,uint256)": {
        "details": "get compound interest rate and update model storage",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp"
        },
        "returns": {
          "rcomp": "compounded interest rate from last update until now"
        }
      },
      "getCurrentInterestRate(address,address,uint256)": {
        "details": "get current annual interest rate",
        "params": {
          "_asset": "address of an asset in Silo for which interest rate should be calculated",
          "_blockTimestamp": "current block timestamp",
          "_silo": "address of Silo"
        },
        "returns": {
          "rcur": "current annual interest rate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "DP": {
        "details": "DP is 18 decimal points used for integer calculations"
      },
      "RCOMP_MAX": {
        "details": "maximum value of compound interest teh model will return"
      },
      "X_MAX": {
        "details": "maximum value of X for which, RCOMP_MAX should be returned"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19953,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19955,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11025,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "config",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Config)15772_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Config)15772_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IInterestRateModel.Config))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Config)15772_storage)"
      },
      "t_mapping(t_address,t_struct(Config)15772_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInterestRateModel.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)15772_storage"
      },
      "t_struct(Config)15772_storage": {
        "encoding": "inplace",
        "label": "struct IInterestRateModel.Config",
        "members": [
          {
            "astId": 15753,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "uopt",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 15755,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ucrit",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 15757,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ulow",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 15759,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ki",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 15761,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "kcrit",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 15763,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "klow",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 15765,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "klin",
            "offset": 0,
            "slot": "6",
            "type": "t_int256"
          },
          {
            "astId": 15767,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "beta",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 15769,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "ri",
            "offset": 0,
            "slot": "8",
            "type": "t_int256"
          },
          {
            "astId": 15771,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "Tcrit",
            "offset": 0,
            "slot": "9",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "320"
      }
    }
  }
}