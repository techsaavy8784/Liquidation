{
  "address": "0xe68eE371243E9e9C004ca2d1A321aAF158a41e44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "NewSiloCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "silo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3994614549441d0ecd89d1182c6553cb15ba854b261eeb12cf04c4fb8415f1d7",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xe68eE371243E9e9C004ca2d1A321aAF158a41e44",
    "transactionIndex": 21,
    "gasUsed": "5024705",
    "logsBloom": "0x
    "blockHash": "0x83c9f7ac563e5f1cbe4ef01480f0d1a4d9732492529b78dad62202f57827e722",
    "transactionHash": "0x3994614549441d0ecd89d1182c6553cb15ba854b261eeb12cf04c4fb8415f1d7",
    "logs": [],
    "blockNumber": 10029860,
    "cumulativeGasUsed": "11376380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d6576ae3fa601a437e270afc679efa62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NewSiloCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSilo(address,bytes)\":{\"params\":{\"_data\":\"(optional) data that may be needed during silo creation\",\"_siloAsset\":\"silo asset\"},\"returns\":{\"silo\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IBaseSilo.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/IRepository.sol\\\";\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./Error.sol\\\";\\n\\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    /// @dev is value that used for integer calculations and decimal points for utilisation ratios, LTV, protocol fees\\n    uint256 public constant PRECISION_DECIMALS = 1e18;\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 public immutable ASSET_DECIMAL_POINTS;\\n    IRepository immutable public repository;\\n    // asset address for which Silo was created\\n    address public immutable siloAsset;\\n\\n    // asset => AssetStorage\\n    mapping(address => AssetStorage) public state;\\n\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n    event Liquidate(address indexed asset, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    modifier onlyExistingAsset(address _asset) {\\n        require(address(state[_asset].collateralToken) != address(0), \\\"BaseSilo: asset does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == repository.router(), \\\"BaseSilo: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier applyInterestsBefore(address _asset) {\\n        _accrueInterest(_asset, block.timestamp);\\n        _;\\n    }\\n\\n    modifier onlyWhenAssetActive(address _asset) {\\n        require(!state[_asset].removed, \\\"BaseSilo: asset removed\\\");\\n        _;\\n    }\\n\\n    modifier siloPositionSolvent(address _user) {\\n        _;\\n        require(isSolvent(_user), \\\"BaseSilo: not solvent in silo position\\\");\\n    }\\n\\n    modifier validateBorrow(address _user) {\\n        _;\\n        require(getLTV(_user) <= calculateUserLTV(_user, true), \\\"BaseSilo: maximumLTV\\\");\\n    }\\n\\n    modifier validateMaxDepositsAfter(address _asset) {\\n        _;\\n\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        // TODO: refactor getMaxSiloBridgeDeposits\\n        require(\\n            oracle.getPrice(_asset) * state[_asset].totalDeposits / (10 ** ERC20(_asset).decimals()) <=\\n            IGuardedLaunch(address(repository)).getMaxSiloBridgeDeposits(address(this)),\\n            \\\"BaseSilo: total deposits exceed liquidity limit\\\"\\n        );\\n    }\\n\\n    constructor (address _repository, address _siloAsset) {\\n        repository = IRepository(_repository);\\n        siloAsset = _siloAsset;\\n        ASSET_DECIMAL_POINTS = 10**ERC20(_siloAsset).decimals();\\n    }\\n\\n    function syncBridgeAssets() external {\\n        // sync removed assets\\n        address[] memory removedBridgeAssets = repository.getRemovedBridgeAssets();\\n\\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\\n            // If removed bridge asset is a silo asset for this silo, do not remove it\\n            if (removedBridgeAssets[i] != siloAsset) {\\n                state[removedBridgeAssets[i]].removed = true;\\n            }\\n        }\\n\\n        // init silo asset if needed\\n        if (address(state[siloAsset].collateralToken) == address(0)) {\\n            _initAsset(repository.tokensFactory(), siloAsset, false);\\n        }\\n\\n        // sync active assets\\n        address[] memory bridgeAssets = repository.getBridgeAssets();\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            state[bridgeAssets[i]].removed = false;\\n\\n            // In case a bridge asset is added that already has a Silo,\\n            // do not initiate that asset in its Silo\\n            if (address(state[bridgeAssets[i]].collateralToken) == address(0)) {\\n                _initAsset(repository.tokensFactory(), bridgeAssets[i], true);\\n            }\\n        }\\n    }\\n\\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\\n        return state[_asset];\\n    }\\n\\n    /// @dev Yearly interest rate for borrowing asset token, dynamically calculated for current block timestamp\\n    function interestRateAPY(address _asset) external view returns (uint256) {\\n        return _getModel(_asset).getCurrentInterestRate(\\n            address(this),\\n            _asset,\\n            block.timestamp\\n        );\\n    }\\n\\n    function interestRateTimestamp(address _asset) external view override returns (uint256) {\\n        return state[_asset].interestRateTimestamp;\\n    }\\n\\n    function getUtilization(address _asset) external view override returns (uint256) {\\n        uint256 totalBorrowAmountCached = state[_asset].totalBorrowAmount;\\n        uint256 totalDepositsCached = state[_asset].totalDeposits;\\n        if (totalDepositsCached == 0 || totalBorrowAmountCached == 0) return 0;\\n\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 DP = uint256(_getModel(_asset).DP());\\n        return totalBorrowAmountCached * DP / totalDepositsCached;\\n    }\\n\\n    /// @dev returns total deposits with interest dynamically calculated at current block timestamp\\n    function totalDepositsWithInterest(address _asset) public view returns (uint256 _totalDeposits) {\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRate(address(this), _asset, block.timestamp);\\n\\n        uint256 protocolShareFee = repository.protocolShareFee();\\n        uint256 depositorsShare = PRECISION_DECIMALS - protocolShareFee;\\n        uint256 assetDeposits = state[_asset].totalDeposits;\\n\\n        return assetDeposits + assetDeposits * rcomp * depositorsShare / PRECISION_DECIMALS / PRECISION_DECIMALS;\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        address[] memory bridgeAssets = repository.getBridgeAssets();\\n        address[] memory removedBridgeAssets = repository.getRemovedBridgeAssets();\\n        uint256 allAssetsLength = bridgeAssets.length + removedBridgeAssets.length + 1;\\n        assets = new address[](allAssetsLength);\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            assets[i] = bridgeAssets[i];\\n        }\\n\\n        for (uint256 i = bridgeAssets.length; i < bridgeAssets.length + removedBridgeAssets.length; i++) {\\n            assets[i] = bridgeAssets[i];\\n        }\\n\\n        assets[allAssetsLength - 1] = siloAsset;\\n    }\\n\\n    function isSolvent(address _user) public view override returns (bool) {\\n        require(_user != address(0), \\\"BaseSilo: user != address(0)\\\");\\n\\n        uint256 liquidationThreshold = calculateUserLTV(_user, false);\\n        uint256 ltv = getLTV(_user);\\n        return ltv <= liquidationThreshold;\\n    }\\n\\n    /// Loan-To-Value\\n    function getLTV(address _user) public view override returns (uint256) {\\n        address[] memory assets = getAssets();\\n        uint256 collateralValue;\\n        uint256 borrowAmountValue;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 assetPrice = oracle.getPrice(assets[i]);\\n            uint256 decimals = ERC20(assets[i]).decimals();\\n\\n            uint256 _borrowAmountValue = calculateBorrowValue(_user, assets[i], assetPrice, decimals);\\n\\n            // It should be impossible but never too safe. If a user somehow ends up with debt\\n            // and collateral in single asset, we ignore collateral value of that asset\\n            if (_borrowAmountValue > 0) {\\n                borrowAmountValue += _borrowAmountValue;\\n            } else {\\n                // We allow removed bridge asset to be a collateral, that's why we do not check for:\\n                // !state[assets[i]].removed\\n                // otherwise people may be liquidated right away.\\n                collateralValue += calculateCollateralValue(_user, assets[i], assetPrice, decimals);\\n            }\\n        }\\n\\n        if (borrowAmountValue == 0) return 0;\\n        if (collateralValue == 0) return INFINITY;\\n\\n        return borrowAmountValue * PRECISION_DECIMALS / collateralValue;\\n    }\\n\\n    /// @dev value of collateral (asset) provided by user\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        AssetStorage storage _state = state[_asset];\\n\\n        uint256 assetAmount = _state.collateralToken.balanceOf(_user).toAmount(\\n            totalDepositsWithInterest(_asset),\\n            _state.collateralToken.totalSupply()\\n        );\\n\\n        uint256 assetCollateralOnlyAmount = _state.collateralOnlyToken.balanceOf(_user).toAmount(\\n            _state.collateralOnlyDeposits,\\n            _state.collateralOnlyToken.totalSupply()\\n        );\\n\\n        return (assetAmount + assetCollateralOnlyAmount) * _assetPrice / (10 ** _assetDecimals);\\n    }\\n\\n    /// @dev Amount of token that is available for borrowing.\\n    /// @return Silo liquidity\\n    function liquidity(address _asset) public view returns (uint256) {\\n        return ERC20(_asset).balanceOf(address(this)) - state[_asset].collateralOnlyDeposits;\\n    }\\n\\n    function calcFee(uint256 _amount) public view returns (uint256) {\\n        uint256 entryFee = repository.entryFee();\\n        if (entryFee == 0) return 0; // no fee\\n\\n        return _amount * entryFee / PRECISION_DECIMALS;\\n    }\\n\\n    function calculateBorrowValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 debtAmount = getBorrowAmount(_asset, _user, block.timestamp);\\n        return debtAmount * _assetPrice / (10 ** _assetDecimals);\\n    }\\n\\n    /// @return assetDebtAmount total amount of asset user needs to repay at provided timestamp\\n    function getBorrowAmount(address _asset, address _user, uint256 _timestamp) public view returns (uint256) {\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRate(address(this), _asset, _timestamp);\\n        uint256 totalBorrowAmountCached = state[_asset].totalBorrowAmount;\\n        totalBorrowAmountCached += totalBorrowAmountCached * rcomp / PRECISION_DECIMALS;\\n\\n        return state[_asset].debtToken.balanceOf(_user).toAmount(\\n            totalBorrowAmountCached,\\n            state[_asset].debtToken.totalSupply()\\n        );\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\\n        return state[_asset].debtToken.balanceOf(_depositor) == 0;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\\n        return state[_asset].collateralToken.balanceOf(_borrower) == 0\\n            && state[_asset].collateralOnlyToken.balanceOf(_borrower) == 0;\\n    }\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool useMaximumLTV) public view override returns (uint256) {\\n        uint256 totalCollateralValue;\\n        uint256 totalAvailableToBorrow;\\n        ISiloOracleRepository oracle = ISiloOracleRepository(repository.oracle());\\n\\n        address[] memory assets = getAssets();\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 assetPrice = oracle.getPrice(assets[i]);\\n            uint256 decimals = ERC20(assets[i]).decimals();\\n\\n            uint256 deposit = state[assets[i]].collateralToken.balanceOf(_user) +\\n            state[assets[i]].collateralOnlyToken.balanceOf(_user);\\n\\n            // do math only if user has collateral deposited for given asset\\n            if (deposit != 0) {\\n                uint256 collateralValue = calculateCollateralValue(_user, assets[i], assetPrice, decimals);\\n                uint256 assetLTV = useMaximumLTV ?\\n                repository.getMaximumLTV(address(this), assets[i]) :\\n                repository.getLiquidationThreshold(address(this), assets[i]);\\n                // value that can be borrowed against the deposit\\n                // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\\n                uint256 availableToBorrow = collateralValue * assetLTV / PRECISION_DECIMALS;\\n\\n                totalCollateralValue += collateralValue;\\n                totalAvailableToBorrow += availableToBorrow;\\n            }\\n        }\\n\\n        if (totalAvailableToBorrow == 0) return 0;\\n        if (totalCollateralValue == 0) return INFINITY;\\n\\n        return totalAvailableToBorrow * PRECISION_DECIMALS / totalCollateralValue;\\n    }\\n\\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\\n        // Naming convention in UNI example:\\n        // - for siloAsset: SiloUNI, Debt-SiloUNI, SiloUNI-collateral-ONLY\\n        // - for bridgeAsset: SiloUNI-ETH, Debt-SiloUNI-ETH, SiloUNI-ETH-collateral-ONLY\\n        string memory collateralName;\\n        string memory debtName;\\n        string memory assetSymbol = ERC20(_asset).symbol();\\n\\n        if (_isBridgeAsset) {\\n            string memory baseSymbol = state[siloAsset].collateralToken.symbol();\\n            collateralName = string(abi.encodePacked(baseSymbol, string(\\\"-\\\"), assetSymbol));\\n        } else {\\n            string memory baseSymbol = \\\"Silo\\\";\\n            collateralName = string(abi.encodePacked(baseSymbol, assetSymbol));\\n        }\\n        string memory collateralOnlyName = string(abi.encodePacked(collateralName, string(\\\"-collateral-ONLY\\\")));\\n\\n        debtName = string(abi.encodePacked(string(\\\"Debt-\\\"), collateralName));\\n\\n        state[_asset].collateralToken = _tokensFactory.createShareCollateralToken(\\n            collateralName, collateralName, _asset\\n        );\\n\\n        state[_asset].collateralOnlyToken = _tokensFactory.createShareCollateralToken(\\n            collateralOnlyName, collateralOnlyName, _asset\\n        );\\n\\n        state[_asset].debtToken = _tokensFactory.createShareDebtToken(debtName, debtName, _asset);\\n    }\\n\\n    function _deposit(\\n        address _asset,\\n        address _from,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant\\n        onlyExistingAsset(_asset)\\n        onlyWhenAssetActive(_asset)\\n        applyInterestsBefore(_asset)\\n        validateMaxDepositsAfter(_asset)\\n    {\\n        if (!depositPossible(_asset, _depositor)) {\\n            revert DepositNotPossible(_asset, _depositor);\\n        }\\n\\n        AssetStorage storage _state = state[_asset];\\n\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\\n\\n        if (_collateralOnly) {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\\n            _state.collateralOnlyToken.mint(_depositor, share);\\n        } else {\\n            uint256 share = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\\n            _state.totalDeposits = totalDepositsCached + _amount;\\n            _state.collateralToken.mint(_depositor, share);\\n        }\\n\\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        internal\\n        nonReentrant\\n        onlyExistingAsset(_asset)\\n        onlyWhenAssetActive(_asset)\\n        validateBorrow(_borrower)\\n        applyInterestsBefore(_asset)\\n    {\\n        if (!borrowPossible(_asset, _borrower)) {\\n            revert(\\\"BorrowNotPossible\\\");\\n        }\\n\\n        AssetStorage storage _state = state[_asset];\\n        require(liquidity(_asset) >= _amount, \\\"BaseSilo: deposit shortage\\\");\\n\\n        uint256 fee = calcFee(_amount);\\n        uint256 borrowerShare = (_amount + fee).toShare(_state.totalBorrowAmount, _state.debtToken.totalSupply());\\n\\n        _state.debtToken.mint(_borrower, borrowerShare);\\n        _state.totalBorrowAmount += _amount + fee;\\n        _state.protocolFees += fee;\\n\\n        emit Borrow(_asset, _borrower, _amount);\\n\\n        ERC20(_asset).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function _flashUserLiquidation(address[] memory _allSiloAssets, address _borrower, address _liquidator)\\n        internal\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepaid)\\n    {\\n        uint256 blockTimestamp = block.timestamp;\\n        uint256 assetsLength = _allSiloAssets.length;\\n        receivedCollaterals = new uint256[](assetsLength);\\n        amountsToRepaid = new uint256[](assetsLength);\\n\\n        for (uint256 i = 0; i < assetsLength; i++) {\\n            AssetStorage storage _state = state[_allSiloAssets[i]];\\n\\n            _accrueInterest(_allSiloAssets[i], blockTimestamp);\\n            // we do not allow for partial repayment on liquidation, that's why max\\n            (amountsToRepaid[i],) = _calculateAmountAndShare(_state, _borrower, type(uint256).max);\\n\\n\\n            (, uint256 withdrawnOnlyAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.collateralOnlyDeposits,\\n                type(uint256).max,\\n                _state.collateralOnlyToken,\\n                _borrower,\\n                _liquidator\\n            );\\n\\n            (,uint256 withdrawnAmount) = _withdrawAsset(\\n                _allSiloAssets[i],\\n                _state.totalDeposits,\\n                type(uint256).max,\\n                _state.collateralToken,\\n                _borrower,\\n                _liquidator\\n            );\\n\\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from particular asset\\n    /// @param _asset asset we want to harvest fees from\\n    /// @param _receiver address of fees receiver\\n    function _harvestProtocolFees(address _asset, address _receiver) internal {\\n        AssetStorage storage _state = state[_asset];\\n        uint256 protocolFeesCached = _state.protocolFees;\\n        uint256 availableFees = protocolFeesCached - _state.harvestedProtocolFees;\\n        if (availableFees == 0) return;\\n\\n        _state.harvestedProtocolFees = protocolFeesCached;\\n        ERC20(_asset).safeTransfer(_receiver, availableFees);\\n    }\\n\\n    /// @param _asset address\\n    /// @param _blockTimestamp current timestamp\\n    function _accrueInterest(address _asset, uint256 _blockTimestamp) internal {\\n        AssetStorage storage _state = state[_asset];\\n\\n        if (_blockTimestamp == _state.interestRateTimestamp) {\\n            return;\\n        }\\n\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, _blockTimestamp);\\n        uint256 protocolShareFee = repository.protocolShareFee();\\n\\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\\n\\n        uint256 totalInterest = totalBorrowAmountCached * rcomp / PRECISION_DECIMALS;\\n        uint256 protocolShare = totalInterest * protocolShareFee / PRECISION_DECIMALS;\\n        uint256 depositorsShare = totalInterest - protocolShare;\\n\\n        // update contract state\\n        _state.totalBorrowAmount = totalBorrowAmountCached + totalInterest;\\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\\n        _state.protocolFees = _state.protocolFees + protocolShare;\\n        _state.interestRateTimestamp = _blockTimestamp;\\n    }\\n\\n    function _withdraw(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant // because we transfering tokens\\n        onlyExistingAsset(_asset)\\n        siloPositionSolvent(_depositor)\\n        applyInterestsBefore(_asset)\\n        returns (uint256 amount)\\n    {\\n        AssetStorage storage _state = state[_asset];\\n        uint256 burnedShare;\\n\\n        if (_collateralOnly) {\\n            uint256 collateralOnlyDepositsCached = _state.collateralOnlyDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                collateralOnlyDepositsCached,\\n                _amount,\\n                _state.collateralOnlyToken,\\n                _depositor,\\n                _receiver\\n            );\\n\\n            _state.collateralOnlyDeposits = collateralOnlyDepositsCached - _amount;\\n        } else {\\n            uint256 totalDepositsCached = _state.totalDeposits;\\n\\n            (burnedShare, _amount) = _withdrawAsset(\\n                _asset,\\n                totalDepositsCached,\\n                _amount,\\n                _state.collateralToken,\\n                _depositor,\\n                _receiver\\n            );\\n\\n            _state.totalDeposits = totalDepositsCached - _amount;\\n        }\\n\\n        emit Withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n\\n        return _amount;\\n    }\\n\\n    function _withdrawAsset(\\n        address _asset,\\n        uint256 _assetTotalDeposits,\\n        uint256 _assetAmount,\\n        IShareToken _shareToken,\\n        address _depositor,\\n        address _receiver\\n    )\\n        internal\\n        returns (uint256 burnedShare, uint256 withdrawnAmount)\\n    {\\n        if (_assetAmount == type(uint256).max) {\\n            burnedShare = _shareToken.balanceOf(_depositor);\\n            withdrawnAmount = burnedShare.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\\n        } else {\\n            burnedShare = _assetAmount.toShare(_assetTotalDeposits, _shareToken.totalSupply());\\n            withdrawnAmount = _assetAmount;\\n        }\\n\\n        if (withdrawnAmount == 0) return (0, 0);\\n\\n        _shareToken.burn(_depositor, burnedShare);\\n\\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\\n        ERC20(_asset).safeTransfer(_receiver, withdrawnAmount);\\n    }\\n\\n    /// @dev gets interest rates model object\\n    /// @param _asset asset for which to calculate interest rate\\n    /// @return IInterestRateModel interest rates model object\\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\\n        return IInterestRateModel(repository.getInterestRateModel(address(this), _asset));\\n    }\\n\\n    /// @dev calculates amount to repay based on user shares,\\n    ///         we do not apply virtual balances here, if needed, thay need to be apply beforehand\\n    /// @param _assetStorage asset storage\\n    /// @param _borrower borrower address\\n    /// @param _amount proposed amount to repay, based on that\\n    /// @return amount amount to repay\\n    /// @return repayShare amount to repay as share\\n    function _calculateAmountAndShare(AssetStorage storage _assetStorage, address _borrower, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 amount, uint256 repayShare)\\n    {\\n        uint256 borrowerDebtShare = _assetStorage.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\\n\\n        if (_amount == type(uint256).max) {\\n            repayShare = borrowerDebtShare;\\n            amount = repayShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n        } else {\\n            uint256 maxAmount = borrowerDebtShare.toAmount(totalBorrowed, debtTokenTotalSupply);\\n\\n            if (_amount <= maxAmount) {\\n                repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\\n                amount = _amount;\\n            } else {\\n                repayShare = borrowerDebtShare;\\n                amount = maxAmount;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5dfd580e740aab27545eb6f7b609ccb768e1026e27418e84be5bc2c0f67da694\",\"license\":\"BUSL-1.1\"},\"contracts/Error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nerror AccessDenied();\\n\\nerror BridgeSiloExists(address bridgeSilo);\\n\\nerror BorrowNotPossible();\\n\\nerror DepositNotPossible(address asset, address depositor);\\n\\nerror ShareTransferNotAllowed();\\n\",\"keccak256\":\"0x3efd4befa380d62701a17a908dab22cb6aa3e5b2f9dadaf555640a7be75c1f4d\",\"license\":\"BUSL-1.1\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./Silo.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\n\\ncontract Factory is IFactory {\\n    event NewSiloCreated(address indexed silo, address indexed asset);\\n\\n    /// @inheritdoc IFactory\\n    function createSilo(address _siloAsset, bytes memory) external override returns (address silo) {\\n        silo = address(new Silo(msg.sender, _siloAsset));\\n        emit NewSiloCreated(silo, _siloAsset);\\n    }\\n}\\n\",\"keccak256\":\"0x9dea7005265b333a39a2dc1292c0c411668868b94058d54a2d8e81330d8c2116\",\"license\":\"BUSL-1.1\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\n\\nimport \\\"./lib/EasyMath.sol\\\";\\nimport \\\"./BaseSilo.sol\\\";\\n\\ncontract Silo is ISilo, BaseSilo {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    constructor (address _repository, address _siloAsset) BaseSilo(_repository, _siloAsset) {}\\n\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external override onlyRouter {\\n        _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly) external override {\\n        _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address of the collateral tokens source account\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    function borrow(address _asset, uint256 _amount) external override {\\n        _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address of the debt tokens receiver\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        override\\n        onlyRouter\\n    {\\n        _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repay(address _asset, uint256 _amount) external override {\\n        _repay(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    function repayFor(address _asset, address _borrower, uint256 _amount) external override {\\n        require(!isSolvent(_borrower), \\\"Silo.repayFor: borrower is solvent\\\");\\n\\n        _repay(_asset, _borrower, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        override\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepay\\n        )\\n    {\\n        assets = getAssets();\\n        uint256 usersLength = _users.length;\\n        receivedCollaterals = new uint256[][](usersLength);\\n        shareAmountsToRepay = new uint256[][](usersLength);\\n\\n        for (uint256 i = 0; i < usersLength; i++) {\\n            (\\n                receivedCollaterals[i],\\n                shareAmountsToRepay[i]\\n            ) = _userLiquidation(assets, _users[i], _liquidator, _flashReceiver, _flashReceiverData);\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @param _assets array of assets we want to harvest fees from\\n    function harvestProtocolFees(address[] calldata _assets) external {\\n        address repositoryOwner = repository.owner();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            _harvestProtocolFees(_assets[i], repositoryOwner);\\n        }\\n    }\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    function accrueInterest(address _asset) public {\\n        _accrueInterest(_asset, block.timestamp);\\n    }\\n\\n    /// @param _assets all currant assets, this is optimisation, so we don't have to read it from storage few times\\n    /// @param _user user to liquidate\\n    /// @param _liquidator address which will get all collaterals\\n    /// @param _flashReceiver address which will be notified once collaterals will be send\\n    /// @param _flashReceiverData custom data to forward to receiver\\n    /// @return receivedCollaterals amounts of collaterals transfered to liquidator\\n    /// @return shareAmountsToRepay expected amounts to repay\\n    function _userLiquidation(\\n        address[] memory _assets,\\n        address _user,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        internal\\n        nonReentrant // because of _flashReceiver.siloLiquidationCallback\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\\n    {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) {\\n            uint256[] memory empty = new uint256[](_assets.length);\\n            return (empty, empty);\\n        }\\n\\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, _liquidator);\\n\\n        // _flashReceiver needs to repayFor user\\n        _flashReceiver.siloLiquidationCallback(\\n            _user,\\n            _assets,\\n            receivedCollaterals,\\n            shareAmountsToRepay,\\n            _flashReceiverData\\n        );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\\n            }\\n        }\\n\\n        require(isSolvent(_user), \\\"Silo: user not solvent\\\");\\n    }\\n\\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\\n        internal\\n        onlyExistingAsset(_asset)\\n        applyInterestsBefore(_asset)\\n        returns (uint256)\\n    {\\n        AssetStorage storage _assetStorage = state[_asset];\\n        uint256 repayShare;\\n\\n        (_amount, repayShare) = _calculateAmountAndShare(_assetStorage, _borrower, _amount);\\n\\n        if (repayShare == 0) {\\n            return 0;\\n        }\\n\\n        emit Repay(_asset, _borrower, _amount);\\n\\n        // we checking balances in case of fee on transfer tokens or any other weird stuff\\n        uint256 balanceBefore = ERC20(_asset).balanceOf(address(this));\\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), _amount);\\n        uint256 balanceAfter = ERC20(_asset).balanceOf(address(this));\\n        require(balanceAfter - balanceBefore >= _amount, \\\"Silo: transferred amount is lower that required amount\\\");\\n\\n        // we do not using reentrancy, so just in case change status about debt after token transfer\\n        _assetStorage.debtToken.burn(_borrower, repayShare);\\n        _assetStorage.totalBorrowAmount -= _amount;\\n\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e72fa261ba24efafdb8b9bf2bd7635580c86930851e9d79f7ad478eb88df526\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5402c01c6593e7e95275080bcb24fe3c9b19103fb7e454419739845a34753fa1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IFactory {\\n    /// @param _siloAsset silo asset\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n}\\n\",\"keccak256\":\"0x9a643f4989007ea17ff7565a83604b1cbed5ea33db01cb21ded8b75f64038ce3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IGuardedLaunch {\\n    function getMaxSiloDeposits(address silo) external view returns (uint256);\\n    function getMaxSiloBridgeDeposits(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8f9ba8ec2528d4ba94e792cb75458e0105a0eb90633d866286a657a05fcd21b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _u asset untilization\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        int256 _u,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (int256); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x5909b480d87f4147e8c83c6b60a0c5b7c3b8af53de402823b44396acc8fe4f6d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\n\\ninterface IRepository {\\n    /// @dev use this method only when off-chain verification is OFF\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    ///      Only owner (DAO) can replace.\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    ///        for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method only when off-chain verification is ON\\n    /// @param _v v portion of off-chain verifier signature\\n    /// @param _r r portion of off-chain verifier signature\\n    /// @param _s s portion of off-chain verifier signature\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSiloVerified(\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address asset) external view returns (address);\\n    function siloFactory(uint256 siloVersion) external view returns (IFactory);\\n    function tokensFactory() external view returns (ITokensFactory);\\n    function router() external view returns (address);\\n    function getBridgeAssets() external view returns (address[] memory);\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n    function oracle() external view returns (address);\\n    function owner() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getInterestRateModel(address silo, address asset) external view returns (address);\\n    function getMaximumLTV(address silo, address asset) external view returns (uint256);\\n    function getLiquidationThreshold(address silo, address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f23ac7b110640a72fe29ecaa2787c1c26701944abd41b30f7e5533293d47590\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbe8f1c72072eb237aff8757d30b2ddbf01512ae560d2a015a040547ef11a82e6\",\"license\":\"MIT\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n\\n    /// @param _asset asset address\\n    /// @param _rawSearch boolean\\n    ///         - if FALSE, it performs search with all requirements, for example, TWAP readiness\\n    ///         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)\\n    ///           that needs to be done for guarded silo creations\\n    function findBestOracle(address _asset, bool _rawSearch) external view returns (address);\\n\\n    /// @return price TWAP price of a token\\n    function getPrice(address token) external view returns (uint256 price);\\n\\n    /// @param _asset address\\n    /// @return oracle address assigned for asset\\n    function assetsOracles(address _asset) external view returns (address oracle);\\n\\n    function quoteToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6734db1e43519390a7b4247bfe0bae80b5c23cfc88bb0b041604a6bd85f5c8dd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n}\\n\",\"keccak256\":\"0xcdb6f1a6c67d6f9ab29276e9577701ae6efbf8076ab31c1ac5963aff1385292b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0x3e8ad243cffb83a53d96126ef7578244f78f8493bc4e8fac888aa30622f82cf6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a25806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063130a1df914610030575b600080fd5b61004361003e3660046100f8565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000338360405161006f906100eb565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156100a2573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167fc9acd774c7fdaab3cff18a2b74905d6ffa85f25e7723ed9363b9c532c78bc4d360405160405180910390a392915050565b615811806101df83390190565b6000806040838503121561010b57600080fd5b82356001600160a01b038116811461012257600080fd5b9150602083013567ffffffffffffffff8082111561013f57600080fd5b818501915085601f83011261015357600080fd5b813581811115610165576101656101c8565b604051601f8201601f19908116603f0116810190838211818310171561018d5761018d6101c8565b816040528281528860208487010111156101a657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfe60e06040523480156200001157600080fd5b50604051620058113803806200581183398101604081905262000034916200010b565b60016000556001600160601b0319606083811b821660a05282901b1660c0526040805163313ce56760e01b81529051839183916001600160a01b0383169163313ce567916004808301926020929190829003018186803b1580156200009857600080fd5b505afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d3919062000143565b620000e090600a620001b8565b608052506200028f92505050565b80516001600160a01b03811681146200010657600080fd5b919050565b600080604083850312156200011f57600080fd5b6200012a83620000ee565b91506200013a60208401620000ee565b90509250929050565b6000602082840312156200015657600080fd5b815160ff811681146200016857600080fd5b9392505050565b600181815b80851115620001b057816000190482111562000194576200019462000279565b80851615620001a257918102915b93841c939080029062000174565b509250929050565b60006200016860ff841683600082620001d45750600162000273565b81620001e35750600062000273565b8160018114620001fc5760028114620002075762000227565b600191505062000273565b60ff8411156200021b576200021b62000279565b50506001821b62000273565b5060208310610133831016604e8410600b84101617156200024c575081810a62000273565b6200025883836200016f565b80600019048211156200026f576200026f62000279565b0290505b92915050565b634e487b7160e01b600052601160045260246000fd5b60805160a05160601c60c05160601c61549d62000374600039600081816103c301528181610e860152818161185101528181611918015281816119e301526139f90152600081816105620152818161070401528181610c2301528181610cbc01528181610eec01528181610fb70152818161134001528181611411015281816117ae0152818161195201528181611a0d01528181611b5c01528181611cba01528181611dac015281816121f4015281816122f3015281816124a10152818161266d01528181613108015281816131af015261383b015260006104f5015261549d6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80639198e5151161011a578063bf273041116100ad578063ead5d3591161007c578063ead5d35914610584578063f364181c14610597578063f3d470c2146105aa578063fbf178db146105bd578063fdce8643146105d057600080fd5b8063bf27304114610517578063dbc5b48114610537578063e5498ed11461054a578063e9176c601461055d57600080fd5b8063a7400918116100e9578063a7400918146104b7578063aca25f9a146104ca578063b8c876b1146104dd578063be8be47d146104f057600080fd5b80639198e51514610476578063976ce49514610489578063a388991b1461049c578063a6e08aa1146104a457600080fd5b80633edd11281161019d57806360ebfee61161016c57806360ebfee61461041957806367e4ac2c1461042857806375dc7d8c1461043d5780637f291539146104505780638a3cf3a11461046357600080fd5b80633edd1128146103ab5780634521c019146103be5780634b8a3529146103fd5780635f48f44b1461041057600080fd5b806322867d78116101d957806322867d78146102925780632f2615bf146102a757806331e658a5146102ba57806338b51ce11461038857600080fd5b8063021de35d1461020b57806306b39a771461023157806309e6d0cf1461024457806311d3b99014610266575b600080fd5b61021e610219366004614875565b6105e3565b6040519081526020015b60405180910390f35b61021e61023f366004614875565b610673565b610257610252366004614c2b565b61080f565b6040516102289392919061500e565b61021e610274366004614875565b6001600160a01b031660009081526001602052604090206006015490565b6102a56102a0366004614aa9565b610947565b005b61021e6102b5366004614a35565b610958565b61032d6102c8366004614875565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006860154600787015460088801546009909801546001600160a01b03998a16999788169897909616969495939492939192909160ff168a565b604080516001600160a01b039b8c168152998b1660208b015297909916968801969096526060870194909452608086019290925260a085015260c084015260e083015261010082015290151561012082015261014001610228565b61039b610396366004614875565b610b7d565b6040519015158152602001610228565b6102a56103b9366004614ad5565b610c00565b6103e57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610228565b6102a561040b366004614aa9565b610c0d565b61021e60001981565b61021e670de0b6b3a764000081565b610430610c1d565b6040516102289190614ffb565b61021e61044b366004614dba565b610ee7565b61021e61045e366004614a7b565b610faf565b61021e6104713660046149a1565b61157e565b6102a5610484366004614875565b61172a565b6102a56104973660046149a1565b611737565b6102a56117aa565b61039b6104b23660046148af565b611c1e565b6102a56104c5366004614b17565b611cb6565b61021e6104d8366004614875565b611d98565b61021e6104eb366004614875565b61204b565b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b61052a610525366004614875565b6120e5565b6040516102289190615134565b6102a56105453660046148e8565b6121f2565b61021e610558366004614a35565b6122bf565b6103e57f000000000000000000000000000000000000000000000000000000000000000081565b6102a5610592366004614ad5565b6122e4565b6102a56105a5366004614939565b6122f1565b61039b6105b83660046148af565b6123c7565b6102a56105cb3660046149e2565b61249f565b61021e6105de366004614875565b61256d565b60006105ee82612645565b6001600160a01b031663071962ff3084426040518463ffffffff1660e01b815260040161061d93929190614f79565b60206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190614d34565b92915050565b60008061067f83612645565b6001600160a01b031663b1e017653085426040518463ffffffff1660e01b81526004016106ae93929190614f79565b60206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190614d34565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561075b57600080fd5b505afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190614d34565b905060006107a982670de0b6b3a76400006153a4565b6001600160a01b038616600090815260016020526040902060030154909150670de0b6b3a764000080836107dd8785615385565b6107e79190615385565b6107f19190615268565b6107fb9190615268565b6108059082615250565b9695505050505050565b606080606061081c610c1d565b8751909350806001600160401b038111156108395761083961542e565b60405190808252806020026020018201604052801561086c57816020015b60608152602001906001900390816108575790505b509250806001600160401b038111156108875761088761542e565b6040519080825280602002602001820160405280156108ba57816020015b60608152602001906001900390816108a55790505b50915060005b8181101561093b576108ee858a83815181106108de576108de615418565b60200260200101518a8a8a6126e9565b85838151811061090057610900615418565b6020026020010185848151811061091957610919615418565b6020026020010182905282905250508080610933906153e7565b9150506108c0565b50509450945094915050565b61095382333384612951565b505050565b6001600160a01b038316600090815260016020526040812081610a7d61097d87610673565b8354604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156109c157600080fd5b505afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190614d34565b84546040516370a0823160e01b81526001600160a01b038c81166004830152909116906370a08231906024015b60206040518083038186803b158015610a3e57600080fd5b505afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190614d34565b9190612c35565b90506000610b4583600401548460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190614d34565b60018601546040516370a0823160e01b81526001600160a01b038d81166004830152909116906370a0823190602401610a26565b9050610b5285600a6152cd565b86610b5d8385615250565b610b679190615385565b610b719190615268565b98975050505050505050565b60006001600160a01b038216610bda5760405162461bcd60e51b815260206004820152601c60248201527f4261736553696c6f3a207573657220213d20616464726573732830290000000060448201526064015b60405180910390fd5b6000610be7836000610faf565b90506000610bf484611d98565b91909111159392505050565b6109538333338585612c6c565b610c19823333846133c8565b5050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb69190810190614b8b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4f9190810190614b8b565b9050600081518351610d619190615250565b610d6c906001615250565b9050806001600160401b03811115610d8657610d8661542e565b604051908082528060200260200182016040528015610daf578160200160208202803683370190505b50935060005b8351811015610e1457838181518110610dd057610dd0615418565b6020026020010151858281518110610dea57610dea615418565b6001600160a01b039092166020928302919091019091015280610e0c816153e7565b915050610db5565b5082515b82518451610e269190615250565b811015610e8357838181518110610e3f57610e3f615418565b6020026020010151858281518110610e5957610e59615418565b6001600160a01b039092166020928302919091019091015280610e7b816153e7565b915050610e18565b507f000000000000000000000000000000000000000000000000000000000000000084610eb16001846153a4565b81518110610ec157610ec1615418565b60200260200101906001600160a01b031690816001600160a01b03168152505050505090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190614d34565b905080610f8b5750600092915050565b670de0b6b3a7640000610f9e8285615385565b610fa89190615268565b9392505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190614892565b90506000611052610c1d565b905060005b8151811015611530576000836001600160a01b03166341976e0984848151811061108357611083615418565b60200260200101516040518263ffffffff1660e01b81526004016110b691906001600160a01b0391909116815260200190565b60206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190614d34565b9050600083838151811061111c5761111c615418565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190614dd3565b60ff1690506000600160008686815181106111b1576111b1615418565b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000206001015490516370a0823160e01b81528d831660048201529116906370a082319060240160206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190614d34565b6001600087878151811061126357611263615418565b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000205490516370a0823160e01b81528e831660048201529116906370a082319060240160206040518083038186803b1580156112c457600080fd5b505afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190614d34565b6113069190615250565b9050801561151a5760006113358c87878151811061132657611326615418565b60200260200101518686610958565b905060008b61140f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332936c443089898151811061138057611380615418565b60200260200101516040518363ffffffff1660e01b81526004016113ba9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614d34565b6114db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2fa74943089898151811061145157611451615418565b60200260200101516040518363ffffffff1660e01b815260040161148b9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b1580156114a357600080fd5b505afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190614d34565b90506000670de0b6b3a76400006114f28385615385565b6114fc9190615268565b9050611508838c615250565b9a50611514818b615250565b99505050505b5050508080611528906153e7565b915050611057565b508261154357600094505050505061066d565b836115565760001994505050505061066d565b83611569670de0b6b3a764000085615385565b6115739190615268565b979650505050505050565b60008061158a85612645565b6001600160a01b031663b1e017653087866040518463ffffffff1660e01b81526004016115b993929190614f79565b60206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190614d34565b6001600160a01b038616600090815260016020526040902060050154909150670de0b6b3a764000061163b8383615385565b6116459190615268565b61164f9082615250565b6001600160a01b038088166000908152600160209081526040918290206002015482516318160ddd60e01b8152925194955061080594869491909116926318160ddd926004808301939192829003018186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e69190614d34565b6001600160a01b03898116600090815260016020526040908190206002015490516370a0823160e01b81528a831660048201529116906370a0823190602401610a26565b611734814261377e565b50565b61174082610b7d565b156117985760405162461bcd60e51b815260206004820152602260248201527f53696c6f2e7265706179466f723a20626f72726f77657220697320736f6c76656044820152611b9d60f21b6064820152608401610bd1565b6117a483833384612951565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118419190810190614b8b565b905060005b815181101561190d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682828151811061188b5761188b615418565b60200260200101516001600160a01b0316146118fb5760018060008484815181106118b8576118b8615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060090160006101000a81548160ff0219169083151502179055505b80611905816153e7565b915050611846565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660009081526001602052604090205416611a0957611a097f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a957600080fd5b505afa1580156119bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e19190614892565b7f0000000000000000000000000000000000000000000000000000000000000000600061396d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b158015611a6457600080fd5b505afa158015611a78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa09190810190614b8b565b905060005b815181101561095357600060016000848481518110611ac657611ac6615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060090160006101000a81548160ff02191690831515021790555060006001600160a01b031660016000848481518110611b2957611b29615418565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054161415611c0c57611c0c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb357600080fd5b505afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190614892565b838381518110611bfd57611bfd615418565b6020026020010151600161396d565b80611c16816153e7565b915050611aa5565b6001600160a01b038281166000908152600160205260408082206002015490516370a0823160e01b81528484166004820152919216906370a08231906024015b60206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190614d34565b159392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190614892565b905060005b828110156117a457611d86848483818110611d6b57611d6b615418565b9050602002016020810190611d809190614875565b83613dc5565b80611d90816153e7565b915050611d4e565b600080611da3610c1d565b905060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0357600080fd5b505afa158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b9190614892565b905060005b845181101561200a576000826001600160a01b03166341976e09878481518110611e6c57611e6c615418565b60200260200101516040518263ffffffff1660e01b8152600401611e9f91906001600160a01b0391909116815260200190565b60206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190614d34565b90506000868381518110611f0557611f05615418565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d9190614dd3565b60ff1690506000611fa98a898681518110611f9a57611f9a615418565b602002602001015185856122bf565b90508015611fc257611fbb8187615250565b9550611ff4565b611fe78a898681518110611fd857611fd8615418565b60200260200101518585610958565b611ff19088615250565b96505b5050508080612002906153e7565b915050611e40565b508161201c5750600095945050505050565b8261202e575060001995945050505050565b82612041670de0b6b3a764000084615385565b6108059190615268565b6001600160a01b03811660008181526001602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a082319060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190614d34565b61066d91906153a4565b61215860405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03908116600090815260016020818152604092839020835161014081018552815486168152928101548516918301919091526002810154909316918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260099091015460ff16151561012082015290565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561224b57600080fd5b505afa15801561225f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122839190614892565b6001600160a01b0316336001600160a01b0316146122b35760405162461bcd60e51b8152600401610bd1906150cf565b6117a4848484846133c8565b6000806122cd85874261157e565b90506122da83600a6152cd565b6120418583615385565b6117a48333338585613e25565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561234a57600080fd5b505afa15801561235e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123829190614892565b6001600160a01b0316336001600160a01b0316146123b25760405162461bcd60e51b8152600401610bd1906150cf565b6123bf8585858585613e25565b505050505050565b6001600160a01b038281166000908152600160205260408082205490516370a0823160e01b81528484166004820152919216906370a082319060240160206040518083038186803b15801561241b57600080fd5b505afa15801561242f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124539190614d34565b158015610fa857506001600160a01b03838116600090815260016020819052604091829020015490516370a0823160e01b815284831660048201529116906370a0823190602401611c5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f857600080fd5b505afa15801561250c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125309190614892565b6001600160a01b0316336001600160a01b0316146125605760405162461bcd60e51b8152600401610bd1906150cf565b6117a48433858585612c6c565b6001600160a01b0381166000908152600160205260408120600581015460039091015480158061259b575081155b156125aa575060009392505050565b60006125b585612645565b6001600160a01b0316636bcc82166040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ed57600080fd5b505afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126259190614d34565b9050816126328285615385565b61263c9190615268565b95945050505050565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc9060440160206040518083038186803b1580156126b157600080fd5b505afa1580156126c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190614892565b6060806002600054141561270f5760405162461bcd60e51b8152600401610bd1906150fd565b600260005561271d86610b7d565b1561277357600087516001600160401b0381111561273d5761273d61542e565b604051908082528060200260200182016040528015612766578160200160208202803683370190505b5092508291506129409050565b61277e878787614002565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da5906127b79089908b90879087908a90600401614f9d565b600060405180830381600087803b1580156127d157600080fd5b505af11580156127e5573d6000803e3d6000fd5b5050505060005b87518110156128f15782818151811061280757612807615418565b60200260200101516000141580612838575081818151811061282b5761282b615418565b6020026020010151600014155b156128df57866001600160a01b031688828151811061285957612859615418565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef97284848151811061289d5761289d615418565b60200260200101518685815181106128b7576128b7615418565b60200260200101516040516128d6929190918252602082015260400190565b60405180910390a35b806128e9816153e7565b9150506127ec565b506128fb86610b7d565b6129405760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b6044820152606401610bd1565b600160005590969095509350505050565b6001600160a01b03808516600090815260016020526040812054909186911661298c5760405162461bcd60e51b8152600401610bd190615098565b85612997814261377e565b6001600160a01b0387166000908152600160205260408120906129bb8289886141fc565b9096509050806129d057600094505050612c2b565b876001600160a01b0316896001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468488604051612a1591815260200190565b60405180910390a36040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a082319060240160206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190614d34565b9050612aae6001600160a01b038b1689308a614375565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a082319060240160206040518083038186803b158015612af057600080fd5b505afa158015612b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b289190614d34565b905087612b3583836153a4565b1015612ba25760405162461bcd60e51b815260206004820152603660248201527f53696c6f3a207472616e7366657272656420616d6f756e74206973206c6f77656044820152751c881d1a185d081c995c5d5a5c995908185b5bdd5b9d60521b6064820152608401610bd1565b6002840154604051632770a7eb60e21b81526001600160a01b038c811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b158015612bf257600080fd5b505af1158015612c06573d6000803e3d6000fd5b5050505087846005016000828254612c1e91906153a4565b9091555088975050505050505b5050949350505050565b6000811580612c42575082155b15612c4f57506000610fa8565b81612c5a8486615385565b612c649190615268565b949350505050565b60026000541415612c8f5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b0380871682526001602052604090912054869116612ccd5760405162461bcd60e51b8152600401610bd190615098565b6001600160a01b038616600090815260016020526040902060090154869060ff1615612d355760405162461bcd60e51b815260206004820152601760248201527610985cd954da5b1bce88185cdcd95d081c995b5bdd9959604a1b6044820152606401610bd1565b86612d40814261377e565b87612d4b8988611c1e565b612d7b576040516369c2c9e960e01b81526001600160a01b03808b16600483015288166024820152604401610bd1565b6001600160a01b03891660008181526001602052604080822090516370a0823160e01b81523060048201529092906370a082319060240160206040518083038186803b158015612dca57600080fd5b505afa158015612dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e029190614d34565b9050612e196001600160a01b038c168b308b614375565b6040516370a0823160e01b81523060048201526000906001600160a01b038d16906370a082319060240160206040518083038186803b158015612e5b57600080fd5b505afa158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e939190614d34565b9050612e9f82826153a4565b9850600088612eb2578360030154612eb8565b83600401545b90508815612fda576000612f56828660010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1657600080fd5b505afa158015612f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4e9190614d34565b8d91906143cd565b9050612f628b83615250565b60048087019190915560018601546040516340c10f1960e01b81526001600160a01b038f811693820193909352602481018490529116906340c10f1990604401600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b50505050506130a8565b6000613030828660000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1657600080fd5b905061303c8b83615250565b600386015584546040516340c10f1960e01b81526001600160a01b038e8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561308e57600080fd5b505af11580156130a2573d6000803e3d6000fd5b50505050505b8a6001600160a01b03168d6001600160a01b03167fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb58c8c6040516130f89291909182521515602082015260400190565b60405180910390a35050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561315f57600080fd5b505afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190614892565b604051635c8610b960e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635c8610b99060240160206040518083038186803b1580156131f957600080fd5b505afa15801561320d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132319190614d34565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561326a57600080fd5b505afa15801561327e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a29190614dd3565b6132ad90600a6152d9565b6001600160a01b03848116600081815260016020526040908190206003015490516341976e0960e01b81526004810192909252918516906341976e099060240160206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333d9190614d34565b6133479190615385565b6133519190615268565b11156133b75760405162461bcd60e51b815260206004820152602f60248201527f4261736553696c6f3a20746f74616c206465706f73697473206578636565642060448201526e1b1a5c5d5a591a5d1e481b1a5b5a5d608a1b6064820152608401610bd1565b505060016000555050505050505050565b600260005414156133eb5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b03808616825260016020526040909120548591166134295760405162461bcd60e51b8152600401610bd190615098565b6001600160a01b038516600090815260016020526040902060090154859060ff16156134915760405162461bcd60e51b815260206004820152601760248201527610985cd954da5b1bce88185cdcd95d081c995b5bdd9959604a1b6044820152606401610bd1565b848661349d814261377e565b6134a788886123c7565b6134e75760405162461bcd60e51b8152602060048201526011602482015270426f72726f774e6f74506f737369626c6560781b6044820152606401610bd1565b6001600160a01b0388166000908152600160205260409020856135098a61204b565b10156135575760405162461bcd60e51b815260206004820152601a60248201527f4261736553696c6f3a206465706f7369742073686f72746167650000000000006044820152606401610bd1565b600061356287610ee7565b9050600061360783600501548460020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135be57600080fd5b505afa1580156135d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f69190614d34565b613600858c615250565b91906143cd565b60028401546040516340c10f1960e01b81526001600160a01b038d81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561365957600080fd5b505af115801561366d573d6000803e3d6000fd5b50505050818861367d9190615250565b8360050160008282546136909190615250565b92505081905550818360070160008282546136ab9190615250565b92505081905550896001600160a01b03168b6001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b528a6040516136f791815260200190565b60405180910390a36137136001600160a01b038c168a8a6143f1565b50505050613722816001610faf565b61372b82611d98565b11156137705760405162461bcd60e51b81526020600482015260146024820152732130b9b2a9b4b6379d1036b0bc34b6bab6a62a2b60611b6044820152606401610bd1565b505060016000555050505050565b6001600160a01b038216600090815260016020526040902060068101548214156137a757505050565b60006137b284612645565b60405162f704bf60e21b81526001600160a01b0386811660048301526024820186905291909116906303dc12fc90604401602060405180830381600087803b1580156137fd57600080fd5b505af1158015613811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138359190614d34565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561389257600080fd5b505afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ca9190614d34565b60058401549091506000670de0b6b3a76400006138e78584615385565b6138f19190615268565b90506000670de0b6b3a76400006139088584615385565b6139129190615268565b9050600061392082846153a4565b905061392c8385615250565b60058801556003870154613941908290615250565b60038801556007870154613956908390615250565b600788015550505050600690920192909255505050565b6060806000846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156139ab57600080fd5b505afa1580156139bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139e79190810190614d4d565b90508315613ae4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600160205260408082205481516395d89b4160e01b81529151929316916395d89b41916004808201928692909190829003018186803b158015613a6157600080fd5b505afa158015613a75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a9d9190810190614d4d565b905080604051806040016040528060018152602001602d60f81b81525083604051602001613acd93929190614f36565b604051602081830303815290604052935050613b2b565b60006040518060400160405280600481526020016353696c6f60e01b81525090508082604051602001613b18929190614f07565b6040516020818303038152906040529350505b6000836040518060400160405280601081526020016f2d636f6c6c61746572616c2d4f4e4c5960801b815250604051602001613b68929190614f07565b60408051601f1981840301815282820182526005835264446562742d60d81b6020848101919091529151909350613ba29291879101614f07565b60408051601f198184030181529082905263f8f38d1b60e01b825293506001600160a01b0388169063f8f38d1b90613be290879081908b9060040161505a565b602060405180830381600087803b158015613bfc57600080fd5b505af1158015613c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c349190614892565b6001600160a01b038781166000908152600160205260409081902080546001600160a01b03191693831693909317909255905163f8f38d1b60e01b81529088169063f8f38d1b90613c8d90849081908b9060040161505a565b602060405180830381600087803b158015613ca757600080fd5b505af1158015613cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cdf9190614892565b6001600160a01b038781166000908152600160208190526040918290200180546001600160a01b031916938316939093179092559051633b0eb45d60e21b81529088169063ec3ad17490613d3b90869081908b9060040161505a565b602060405180830381600087803b158015613d5557600080fd5b505af1158015613d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d8d9190614892565b6001600160a01b03968716600090815260016020526040902060020180546001600160a01b0319169190971617909555505050505050565b6001600160a01b03821660009081526001602052604081206007810154600882015491929091613df590836153a4565b905080613e03575050505050565b60088301829055613e1e6001600160a01b03861685836143f1565b5050505050565b600060026000541415613e4a5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b0380881682526001602052604090912054879116613e885760405162461bcd60e51b8152600401610bd190615098565b8587613e94814261377e565b6001600160a01b0389166000908152600160205260408120908615613ef05760048201546001830154613ed7908d9083908c906001600160a01b03168f8f614421565b99509150613ee589826153a4565b600484015550613f26565b60038201548254613f11908d9083908c906001600160a01b03168f8f614421565b99509150613f1f89826153a4565b6003840155505b886001600160a01b03168a6001600160a01b03168c6001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f02838b8b604051613f809291909182521515602082015260400190565b60405180910390a4879550505050613f9781610b7d565b613ff25760405162461bcd60e51b815260206004820152602660248201527f4261736553696c6f3a206e6f7420736f6c76656e7420696e2073696c6f20706f60448201526539b4ba34b7b760d11b6064820152608401610bd1565b5050600160005595945050505050565b825160609081904290806001600160401b038111156140235761402361542e565b60405190808252806020026020018201604052801561404c578160200160208202803683370190505b509350806001600160401b038111156140675761406761542e565b604051908082528060200260200182016040528015614090578160200160208202803683370190505b50925060005b818110156141f1576000600160008a84815181106140b6576140b6615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506141038983815181106140f5576140f5615418565b60200260200101518561377e565b61411081896000196141fc565b5085838151811061412357614123615418565b602002602001018181525050600061416f8a848151811061414657614146615418565b602090810291909101015160048401546001850154600019906001600160a01b03168d8d614421565b91505060006141af8b858151811061418957614189615418565b602090810291909101015160038501548554600019906001600160a01b03168e8e614421565b91506141bd90508183615250565b8885815181106141cf576141cf615418565b60200260200101818152505050505080806141e9906153e7565b915050614096565b505050935093915050565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a082319060240160206040518083038186803b15801561424a57600080fd5b505afa15801561425e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142829190614d34565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142d657600080fd5b505afa1580156142ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061430e9190614d34565b6005880154909150600019861415614337579192508291614330838284612c35565b94506141f1565b6000614344848385612c35565b9050808711614362576143588783856143cd565b9450869550614369565b8394508095505b50505050935093915050565b6117a4846323b872dd60e01b85858560405160240161439693929190614f79565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614642565b60008115806143da575082155b156143e6575082610fa8565b82612c5a8386615385565b6040516001600160a01b03831660248201526044810182905261095390849063a9059cbb60e01b90606401614396565b60008060001986141561452d576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b15801561446f57600080fd5b505afa158015614483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a79190614d34565b915061452687866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156144e657600080fd5b505afa1580156144fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451e9190614d34565b849190612c35565b90506145b0565b6145aa87866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561456a57600080fd5b505afa15801561457e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a29190614d34565b8891906143cd565b91508590505b806145c057506000905080614637565b604051632770a7eb60e21b81526001600160a01b03858116600483015260248201849052861690639dc29fac90604401600060405180830381600087803b15801561460a57600080fd5b505af115801561461e573d6000803e3d6000fd5b50614637925050506001600160a01b03891684836143f1565b965096945050505050565b6000614697826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147149092919063ffffffff16565b80519091501561095357808060200190518101906146b59190614d17565b6109535760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bd1565b6060612c64848460008585843b61476d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bd1565b600080866001600160a01b031685876040516147899190614eeb565b60006040518083038185875af1925050503d80600081146147c6576040519150601f19603f3d011682016040523d82523d6000602084013e6147cb565b606091505b5091509150611573828286606083156147e5575081610fa8565b8251156147f55782518084602001fd5b8160405162461bcd60e51b8152600401610bd19190615047565b803561481a81615444565b919050565b600082601f83011261483057600080fd5b813561484361483e82615229565b6151d6565b81815284602083860101111561485857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561488757600080fd5b8135610fa881615444565b6000602082840312156148a457600080fd5b8151610fa881615444565b600080604083850312156148c257600080fd5b82356148cd81615444565b915060208301356148dd81615444565b809150509250929050565b600080600080608085870312156148fe57600080fd5b843561490981615444565b9350602085013561491981615444565b9250604085013561492981615444565b9396929550929360600135925050565b600080600080600060a0868803121561495157600080fd5b853561495c81615444565b9450602086013561496c81615444565b9350604086013561497c81615444565b925060608601359150608086013561499381615459565b809150509295509295909350565b6000806000606084860312156149b657600080fd5b83356149c181615444565b925060208401356149d181615444565b929592945050506040919091013590565b600080600080608085870312156149f857600080fd5b8435614a0381615444565b93506020850135614a1381615444565b9250604085013591506060850135614a2a81615459565b939692955090935050565b60008060008060808587031215614a4b57600080fd5b8435614a5681615444565b93506020850135614a6681615444565b93969395505050506040820135916060013590565b60008060408385031215614a8e57600080fd5b8235614a9981615444565b915060208301356148dd81615459565b60008060408385031215614abc57600080fd5b8235614ac781615444565b946020939093013593505050565b600080600060608486031215614aea57600080fd5b8335614af581615444565b9250602084013591506040840135614b0c81615459565b809150509250925092565b60008060208385031215614b2a57600080fd5b82356001600160401b0380821115614b4157600080fd5b818501915085601f830112614b5557600080fd5b813581811115614b6457600080fd5b8660208260051b8501011115614b7957600080fd5b60209290920196919550909350505050565b60006020808385031215614b9e57600080fd5b82516001600160401b03811115614bb457600080fd5b8301601f81018513614bc557600080fd5b8051614bd361483e82615206565b80828252848201915084840188868560051b8701011115614bf357600080fd5b600094505b83851015614c1f578051614c0b81615444565b835260019490940193918501918501614bf8565b50979650505050505050565b60008060008060808587031215614c4157600080fd5b84356001600160401b0380821115614c5857600080fd5b818701915087601f830112614c6c57600080fd5b81356020614c7c61483e83615206565b8083825282820191508286018c848660051b8901011115614c9c57600080fd5b600096505b84871015614cc8578035614cb481615444565b835260019690960195918301918301614ca1565b509850614cd8905089820161480f565b96505050614ce86040880161480f565b93506060870135915080821115614cfe57600080fd5b50614d0b8782880161481f565b91505092959194509250565b600060208284031215614d2957600080fd5b8151610fa881615459565b600060208284031215614d4657600080fd5b5051919050565b600060208284031215614d5f57600080fd5b81516001600160401b03811115614d7557600080fd5b8201601f81018413614d8657600080fd5b8051614d9461483e82615229565b818152856020838501011115614da957600080fd5b61263c8260208301602086016153bb565b600060208284031215614dcc57600080fd5b5035919050565b600060208284031215614de557600080fd5b815160ff81168114610fa857600080fd5b600081518084526020808501945080840160005b83811015614e2f5781516001600160a01b031687529582019590820190600101614e0a565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614e82578284038952614e70848351614e8f565b98850198935090840190600101614e58565b5091979650505050505050565b600081518084526020808501945080840160005b83811015614e2f57815187529582019590820190600101614ea3565b60008151808452614ed78160208601602086016153bb565b601f01601f19169290920160200192915050565b60008251614efd8184602087016153bb565b9190910192915050565b60008351614f198184602088016153bb565b835190830190614f2d8183602088016153bb565b01949350505050565b60008451614f488184602089016153bb565b845190830190614f5c8183602089016153bb565b8451910190614f6f8183602088016153bb565b0195945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038616815260a060208201819052600090614fc190830187614df6565b8281036040840152614fd38187614e8f565b90508281036060840152614fe78186614e8f565b90508281036080840152610b718185614ebf565b602081526000610fa86020830184614df6565b6060815260006150216060830186614df6565b82810360208401526150338186614e3a565b905082810360408401526108058185614e3a565b602081526000610fa86020830184614ebf565b60608152600061506d6060830186614ebf565b828103602084015261507f8186614ebf565b91505060018060a01b0383166040830152949350505050565b6020808252601e908201527f4261736553696c6f3a20617373657420646f6573206e6f742065786973740000604082015260600190565b6020808252601490820152732130b9b2a9b4b6379d1037b7363ca937baba32b960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b031681526101408101602083015161516060208401826001600160a01b03169052565b50604083015161517b60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516151ce8285018215159052565b505092915050565b604051601f8201601f191681016001600160401b03811182821017156151fe576151fe61542e565b604052919050565b60006001600160401b0382111561521f5761521f61542e565b5060051b60200190565b60006001600160401b038211156152425761524261542e565b50601f01601f191660200190565b6000821982111561526357615263615402565b500190565b60008261528557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156152c55781600019048211156152ab576152ab615402565b808516156152b857918102915b93841c939080029061528f565b509250929050565b6000610fa883836152e4565b6000610fa860ff8416835b6000826152f35750600161066d565b816153005750600061066d565b816001811461531657600281146153205761533c565b600191505061066d565b60ff84111561533157615331615402565b50506001821b61066d565b5060208310610133831016604e8410600b841016171561535f575081810a61066d565b615369838361528a565b806000190482111561537d5761537d615402565b029392505050565b600081600019048311821515161561539f5761539f615402565b500290565b6000828210156153b6576153b6615402565b500390565b60005b838110156153d65781810151838201526020016153be565b838111156117a45750506000910152565b60006000198214156153fb576153fb615402565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461173457600080fd5b801515811461173457600080fdfea2646970667358221220909498a8471d05265e8bcd833fe717af450201ec5b0e4aedabfe7e7b2ee8557f64736f6c63430008070033a2646970667358221220ca4abe9eaf1e9e20a6fe51213cf9335193e93bb5bcf6088312c16f6f2b02b88864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063130a1df914610030575b600080fd5b61004361003e3660046100f8565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000338360405161006f906100eb565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156100a2573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167fc9acd774c7fdaab3cff18a2b74905d6ffa85f25e7723ed9363b9c532c78bc4d360405160405180910390a392915050565b615811806101df83390190565b6000806040838503121561010b57600080fd5b82356001600160a01b038116811461012257600080fd5b9150602083013567ffffffffffffffff8082111561013f57600080fd5b818501915085601f83011261015357600080fd5b813581811115610165576101656101c8565b604051601f8201601f19908116603f0116810190838211818310171561018d5761018d6101c8565b816040528281528860208487010111156101a657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfe60e06040523480156200001157600080fd5b50604051620058113803806200581183398101604081905262000034916200010b565b60016000556001600160601b0319606083811b821660a05282901b1660c0526040805163313ce56760e01b81529051839183916001600160a01b0383169163313ce567916004808301926020929190829003018186803b1580156200009857600080fd5b505afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d3919062000143565b620000e090600a620001b8565b608052506200028f92505050565b80516001600160a01b03811681146200010657600080fd5b919050565b600080604083850312156200011f57600080fd5b6200012a83620000ee565b91506200013a60208401620000ee565b90509250929050565b6000602082840312156200015657600080fd5b815160ff811681146200016857600080fd5b9392505050565b600181815b80851115620001b057816000190482111562000194576200019462000279565b80851615620001a257918102915b93841c939080029062000174565b509250929050565b60006200016860ff841683600082620001d45750600162000273565b81620001e35750600062000273565b8160018114620001fc5760028114620002075762000227565b600191505062000273565b60ff8411156200021b576200021b62000279565b50506001821b62000273565b5060208310610133831016604e8410600b84101617156200024c575081810a62000273565b6200025883836200016f565b80600019048211156200026f576200026f62000279565b0290505b92915050565b634e487b7160e01b600052601160045260246000fd5b60805160a05160601c60c05160601c61549d62000374600039600081816103c301528181610e860152818161185101528181611918015281816119e301526139f90152600081816105620152818161070401528181610c2301528181610cbc01528181610eec01528181610fb70152818161134001528181611411015281816117ae0152818161195201528181611a0d01528181611b5c01528181611cba01528181611dac015281816121f4015281816122f3015281816124a10152818161266d01528181613108015281816131af015261383b015260006104f5015261549d6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80639198e5151161011a578063bf273041116100ad578063ead5d3591161007c578063ead5d35914610584578063f364181c14610597578063f3d470c2146105aa578063fbf178db146105bd578063fdce8643146105d057600080fd5b8063bf27304114610517578063dbc5b48114610537578063e5498ed11461054a578063e9176c601461055d57600080fd5b8063a7400918116100e9578063a7400918146104b7578063aca25f9a146104ca578063b8c876b1146104dd578063be8be47d146104f057600080fd5b80639198e51514610476578063976ce49514610489578063a388991b1461049c578063a6e08aa1146104a457600080fd5b80633edd11281161019d57806360ebfee61161016c57806360ebfee61461041957806367e4ac2c1461042857806375dc7d8c1461043d5780637f291539146104505780638a3cf3a11461046357600080fd5b80633edd1128146103ab5780634521c019146103be5780634b8a3529146103fd5780635f48f44b1461041057600080fd5b806322867d78116101d957806322867d78146102925780632f2615bf146102a757806331e658a5146102ba57806338b51ce11461038857600080fd5b8063021de35d1461020b57806306b39a771461023157806309e6d0cf1461024457806311d3b99014610266575b600080fd5b61021e610219366004614875565b6105e3565b6040519081526020015b60405180910390f35b61021e61023f366004614875565b610673565b610257610252366004614c2b565b61080f565b6040516102289392919061500e565b61021e610274366004614875565b6001600160a01b031660009081526001602052604090206006015490565b6102a56102a0366004614aa9565b610947565b005b61021e6102b5366004614a35565b610958565b61032d6102c8366004614875565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006860154600787015460088801546009909801546001600160a01b03998a16999788169897909616969495939492939192909160ff168a565b604080516001600160a01b039b8c168152998b1660208b015297909916968801969096526060870194909452608086019290925260a085015260c084015260e083015261010082015290151561012082015261014001610228565b61039b610396366004614875565b610b7d565b6040519015158152602001610228565b6102a56103b9366004614ad5565b610c00565b6103e57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610228565b6102a561040b366004614aa9565b610c0d565b61021e60001981565b61021e670de0b6b3a764000081565b610430610c1d565b6040516102289190614ffb565b61021e61044b366004614dba565b610ee7565b61021e61045e366004614a7b565b610faf565b61021e6104713660046149a1565b61157e565b6102a5610484366004614875565b61172a565b6102a56104973660046149a1565b611737565b6102a56117aa565b61039b6104b23660046148af565b611c1e565b6102a56104c5366004614b17565b611cb6565b61021e6104d8366004614875565b611d98565b61021e6104eb366004614875565b61204b565b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b61052a610525366004614875565b6120e5565b6040516102289190615134565b6102a56105453660046148e8565b6121f2565b61021e610558366004614a35565b6122bf565b6103e57f000000000000000000000000000000000000000000000000000000000000000081565b6102a5610592366004614ad5565b6122e4565b6102a56105a5366004614939565b6122f1565b61039b6105b83660046148af565b6123c7565b6102a56105cb3660046149e2565b61249f565b61021e6105de366004614875565b61256d565b60006105ee82612645565b6001600160a01b031663071962ff3084426040518463ffffffff1660e01b815260040161061d93929190614f79565b60206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190614d34565b92915050565b60008061067f83612645565b6001600160a01b031663b1e017653085426040518463ffffffff1660e01b81526004016106ae93929190614f79565b60206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190614d34565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561075b57600080fd5b505afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190614d34565b905060006107a982670de0b6b3a76400006153a4565b6001600160a01b038616600090815260016020526040902060030154909150670de0b6b3a764000080836107dd8785615385565b6107e79190615385565b6107f19190615268565b6107fb9190615268565b6108059082615250565b9695505050505050565b606080606061081c610c1d565b8751909350806001600160401b038111156108395761083961542e565b60405190808252806020026020018201604052801561086c57816020015b60608152602001906001900390816108575790505b509250806001600160401b038111156108875761088761542e565b6040519080825280602002602001820160405280156108ba57816020015b60608152602001906001900390816108a55790505b50915060005b8181101561093b576108ee858a83815181106108de576108de615418565b60200260200101518a8a8a6126e9565b85838151811061090057610900615418565b6020026020010185848151811061091957610919615418565b6020026020010182905282905250508080610933906153e7565b9150506108c0565b50509450945094915050565b61095382333384612951565b505050565b6001600160a01b038316600090815260016020526040812081610a7d61097d87610673565b8354604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156109c157600080fd5b505afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190614d34565b84546040516370a0823160e01b81526001600160a01b038c81166004830152909116906370a08231906024015b60206040518083038186803b158015610a3e57600080fd5b505afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190614d34565b9190612c35565b90506000610b4583600401548460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190614d34565b60018601546040516370a0823160e01b81526001600160a01b038d81166004830152909116906370a0823190602401610a26565b9050610b5285600a6152cd565b86610b5d8385615250565b610b679190615385565b610b719190615268565b98975050505050505050565b60006001600160a01b038216610bda5760405162461bcd60e51b815260206004820152601c60248201527f4261736553696c6f3a207573657220213d20616464726573732830290000000060448201526064015b60405180910390fd5b6000610be7836000610faf565b90506000610bf484611d98565b91909111159392505050565b6109538333338585612c6c565b610c19823333846133c8565b5050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b158015610c7a57600080fd5b505afa158015610c8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb69190810190614b8b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4f9190810190614b8b565b9050600081518351610d619190615250565b610d6c906001615250565b9050806001600160401b03811115610d8657610d8661542e565b604051908082528060200260200182016040528015610daf578160200160208202803683370190505b50935060005b8351811015610e1457838181518110610dd057610dd0615418565b6020026020010151858281518110610dea57610dea615418565b6001600160a01b039092166020928302919091019091015280610e0c816153e7565b915050610db5565b5082515b82518451610e269190615250565b811015610e8357838181518110610e3f57610e3f615418565b6020026020010151858281518110610e5957610e59615418565b6001600160a01b039092166020928302919091019091015280610e7b816153e7565b915050610e18565b507f000000000000000000000000000000000000000000000000000000000000000084610eb16001846153a4565b81518110610ec157610ec1615418565b60200260200101906001600160a01b031690816001600160a01b03168152505050505090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190614d34565b905080610f8b5750600092915050565b670de0b6b3a7640000610f9e8285615385565b610fa89190615268565b9392505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190614892565b90506000611052610c1d565b905060005b8151811015611530576000836001600160a01b03166341976e0984848151811061108357611083615418565b60200260200101516040518263ffffffff1660e01b81526004016110b691906001600160a01b0391909116815260200190565b60206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190614d34565b9050600083838151811061111c5761111c615418565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190614dd3565b60ff1690506000600160008686815181106111b1576111b1615418565b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000206001015490516370a0823160e01b81528d831660048201529116906370a082319060240160206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190614d34565b6001600087878151811061126357611263615418565b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000205490516370a0823160e01b81528e831660048201529116906370a082319060240160206040518083038186803b1580156112c457600080fd5b505afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190614d34565b6113069190615250565b9050801561151a5760006113358c87878151811061132657611326615418565b60200260200101518686610958565b905060008b61140f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332936c443089898151811061138057611380615418565b60200260200101516040518363ffffffff1660e01b81526004016113ba9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190614d34565b6114db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2fa74943089898151811061145157611451615418565b60200260200101516040518363ffffffff1660e01b815260040161148b9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b1580156114a357600080fd5b505afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190614d34565b90506000670de0b6b3a76400006114f28385615385565b6114fc9190615268565b9050611508838c615250565b9a50611514818b615250565b99505050505b5050508080611528906153e7565b915050611057565b508261154357600094505050505061066d565b836115565760001994505050505061066d565b83611569670de0b6b3a764000085615385565b6115739190615268565b979650505050505050565b60008061158a85612645565b6001600160a01b031663b1e017653087866040518463ffffffff1660e01b81526004016115b993929190614f79565b60206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190614d34565b6001600160a01b038616600090815260016020526040902060050154909150670de0b6b3a764000061163b8383615385565b6116459190615268565b61164f9082615250565b6001600160a01b038088166000908152600160209081526040918290206002015482516318160ddd60e01b8152925194955061080594869491909116926318160ddd926004808301939192829003018186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e69190614d34565b6001600160a01b03898116600090815260016020526040908190206002015490516370a0823160e01b81528a831660048201529116906370a0823190602401610a26565b611734814261377e565b50565b61174082610b7d565b156117985760405162461bcd60e51b815260206004820152602260248201527f53696c6f2e7265706179466f723a20626f72726f77657220697320736f6c76656044820152611b9d60f21b6064820152608401610bd1565b6117a483833384612951565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b815260040160006040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118419190810190614b8b565b905060005b815181101561190d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682828151811061188b5761188b615418565b60200260200101516001600160a01b0316146118fb5760018060008484815181106118b8576118b8615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060090160006101000a81548160ff0219169083151502179055505b80611905816153e7565b915050611846565b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660009081526001602052604090205416611a0957611a097f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a957600080fd5b505afa1580156119bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e19190614892565b7f0000000000000000000000000000000000000000000000000000000000000000600061396d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b815260040160006040518083038186803b158015611a6457600080fd5b505afa158015611a78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa09190810190614b8b565b905060005b815181101561095357600060016000848481518110611ac657611ac6615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060090160006101000a81548160ff02191690831515021790555060006001600160a01b031660016000848481518110611b2957611b29615418565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054161415611c0c57611c0c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb357600080fd5b505afa158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190614892565b838381518110611bfd57611bfd615418565b6020026020010151600161396d565b80611c16816153e7565b915050611aa5565b6001600160a01b038281166000908152600160205260408082206002015490516370a0823160e01b81528484166004820152919216906370a08231906024015b60206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190614d34565b159392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190614892565b905060005b828110156117a457611d86848483818110611d6b57611d6b615418565b9050602002016020810190611d809190614875565b83613dc5565b80611d90816153e7565b915050611d4e565b600080611da3610c1d565b905060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0357600080fd5b505afa158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b9190614892565b905060005b845181101561200a576000826001600160a01b03166341976e09878481518110611e6c57611e6c615418565b60200260200101516040518263ffffffff1660e01b8152600401611e9f91906001600160a01b0391909116815260200190565b60206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef9190614d34565b90506000868381518110611f0557611f05615418565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d9190614dd3565b60ff1690506000611fa98a898681518110611f9a57611f9a615418565b602002602001015185856122bf565b90508015611fc257611fbb8187615250565b9550611ff4565b611fe78a898681518110611fd857611fd8615418565b60200260200101518585610958565b611ff19088615250565b96505b5050508080612002906153e7565b915050611e40565b508161201c5750600095945050505050565b8261202e575060001995945050505050565b82612041670de0b6b3a764000084615385565b6108059190615268565b6001600160a01b03811660008181526001602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a082319060240160206040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190614d34565b61066d91906153a4565b61215860405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03908116600090815260016020818152604092839020835161014081018552815486168152928101548516918301919091526002810154909316918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260099091015460ff16151561012082015290565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561224b57600080fd5b505afa15801561225f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122839190614892565b6001600160a01b0316336001600160a01b0316146122b35760405162461bcd60e51b8152600401610bd1906150cf565b6117a4848484846133c8565b6000806122cd85874261157e565b90506122da83600a6152cd565b6120418583615385565b6117a48333338585613e25565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561234a57600080fd5b505afa15801561235e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123829190614892565b6001600160a01b0316336001600160a01b0316146123b25760405162461bcd60e51b8152600401610bd1906150cf565b6123bf8585858585613e25565b505050505050565b6001600160a01b038281166000908152600160205260408082205490516370a0823160e01b81528484166004820152919216906370a082319060240160206040518083038186803b15801561241b57600080fd5b505afa15801561242f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124539190614d34565b158015610fa857506001600160a01b03838116600090815260016020819052604091829020015490516370a0823160e01b815284831660048201529116906370a0823190602401611c5e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f857600080fd5b505afa15801561250c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125309190614892565b6001600160a01b0316336001600160a01b0316146125605760405162461bcd60e51b8152600401610bd1906150cf565b6117a48433858585612c6c565b6001600160a01b0381166000908152600160205260408120600581015460039091015480158061259b575081155b156125aa575060009392505050565b60006125b585612645565b6001600160a01b0316636bcc82166040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ed57600080fd5b505afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126259190614d34565b9050816126328285615385565b61263c9190615268565b95945050505050565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc9060440160206040518083038186803b1580156126b157600080fd5b505afa1580156126c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190614892565b6060806002600054141561270f5760405162461bcd60e51b8152600401610bd1906150fd565b600260005561271d86610b7d565b1561277357600087516001600160401b0381111561273d5761273d61542e565b604051908082528060200260200182016040528015612766578160200160208202803683370190505b5092508291506129409050565b61277e878787614002565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da5906127b79089908b90879087908a90600401614f9d565b600060405180830381600087803b1580156127d157600080fd5b505af11580156127e5573d6000803e3d6000fd5b5050505060005b87518110156128f15782818151811061280757612807615418565b60200260200101516000141580612838575081818151811061282b5761282b615418565b6020026020010151600014155b156128df57866001600160a01b031688828151811061285957612859615418565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef97284848151811061289d5761289d615418565b60200260200101518685815181106128b7576128b7615418565b60200260200101516040516128d6929190918252602082015260400190565b60405180910390a35b806128e9816153e7565b9150506127ec565b506128fb86610b7d565b6129405760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b6044820152606401610bd1565b600160005590969095509350505050565b6001600160a01b03808516600090815260016020526040812054909186911661298c5760405162461bcd60e51b8152600401610bd190615098565b85612997814261377e565b6001600160a01b0387166000908152600160205260408120906129bb8289886141fc565b9096509050806129d057600094505050612c2b565b876001600160a01b0316896001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468488604051612a1591815260200190565b60405180910390a36040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a082319060240160206040518083038186803b158015612a5f57600080fd5b505afa158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190614d34565b9050612aae6001600160a01b038b1689308a614375565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a082319060240160206040518083038186803b158015612af057600080fd5b505afa158015612b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b289190614d34565b905087612b3583836153a4565b1015612ba25760405162461bcd60e51b815260206004820152603660248201527f53696c6f3a207472616e7366657272656420616d6f756e74206973206c6f77656044820152751c881d1a185d081c995c5d5a5c995908185b5bdd5b9d60521b6064820152608401610bd1565b6002840154604051632770a7eb60e21b81526001600160a01b038c811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b158015612bf257600080fd5b505af1158015612c06573d6000803e3d6000fd5b5050505087846005016000828254612c1e91906153a4565b9091555088975050505050505b5050949350505050565b6000811580612c42575082155b15612c4f57506000610fa8565b81612c5a8486615385565b612c649190615268565b949350505050565b60026000541415612c8f5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b0380871682526001602052604090912054869116612ccd5760405162461bcd60e51b8152600401610bd190615098565b6001600160a01b038616600090815260016020526040902060090154869060ff1615612d355760405162461bcd60e51b815260206004820152601760248201527610985cd954da5b1bce88185cdcd95d081c995b5bdd9959604a1b6044820152606401610bd1565b86612d40814261377e565b87612d4b8988611c1e565b612d7b576040516369c2c9e960e01b81526001600160a01b03808b16600483015288166024820152604401610bd1565b6001600160a01b03891660008181526001602052604080822090516370a0823160e01b81523060048201529092906370a082319060240160206040518083038186803b158015612dca57600080fd5b505afa158015612dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e029190614d34565b9050612e196001600160a01b038c168b308b614375565b6040516370a0823160e01b81523060048201526000906001600160a01b038d16906370a082319060240160206040518083038186803b158015612e5b57600080fd5b505afa158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e939190614d34565b9050612e9f82826153a4565b9850600088612eb2578360030154612eb8565b83600401545b90508815612fda576000612f56828660010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1657600080fd5b505afa158015612f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4e9190614d34565b8d91906143cd565b9050612f628b83615250565b60048087019190915560018601546040516340c10f1960e01b81526001600160a01b038f811693820193909352602481018490529116906340c10f1990604401600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b50505050506130a8565b6000613030828660000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1657600080fd5b905061303c8b83615250565b600386015584546040516340c10f1960e01b81526001600160a01b038e8116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561308e57600080fd5b505af11580156130a2573d6000803e3d6000fd5b50505050505b8a6001600160a01b03168d6001600160a01b03167fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb58c8c6040516130f89291909182521515602082015260400190565b60405180910390a35050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561315f57600080fd5b505afa158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190614892565b604051635c8610b960e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635c8610b99060240160206040518083038186803b1580156131f957600080fd5b505afa15801561320d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132319190614d34565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561326a57600080fd5b505afa15801561327e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a29190614dd3565b6132ad90600a6152d9565b6001600160a01b03848116600081815260016020526040908190206003015490516341976e0960e01b81526004810192909252918516906341976e099060240160206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333d9190614d34565b6133479190615385565b6133519190615268565b11156133b75760405162461bcd60e51b815260206004820152602f60248201527f4261736553696c6f3a20746f74616c206465706f73697473206578636565642060448201526e1b1a5c5d5a591a5d1e481b1a5b5a5d608a1b6064820152608401610bd1565b505060016000555050505050505050565b600260005414156133eb5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b03808616825260016020526040909120548591166134295760405162461bcd60e51b8152600401610bd190615098565b6001600160a01b038516600090815260016020526040902060090154859060ff16156134915760405162461bcd60e51b815260206004820152601760248201527610985cd954da5b1bce88185cdcd95d081c995b5bdd9959604a1b6044820152606401610bd1565b848661349d814261377e565b6134a788886123c7565b6134e75760405162461bcd60e51b8152602060048201526011602482015270426f72726f774e6f74506f737369626c6560781b6044820152606401610bd1565b6001600160a01b0388166000908152600160205260409020856135098a61204b565b10156135575760405162461bcd60e51b815260206004820152601a60248201527f4261736553696c6f3a206465706f7369742073686f72746167650000000000006044820152606401610bd1565b600061356287610ee7565b9050600061360783600501548460020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135be57600080fd5b505afa1580156135d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f69190614d34565b613600858c615250565b91906143cd565b60028401546040516340c10f1960e01b81526001600160a01b038d81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561365957600080fd5b505af115801561366d573d6000803e3d6000fd5b50505050818861367d9190615250565b8360050160008282546136909190615250565b92505081905550818360070160008282546136ab9190615250565b92505081905550896001600160a01b03168b6001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b528a6040516136f791815260200190565b60405180910390a36137136001600160a01b038c168a8a6143f1565b50505050613722816001610faf565b61372b82611d98565b11156137705760405162461bcd60e51b81526020600482015260146024820152732130b9b2a9b4b6379d1036b0bc34b6bab6a62a2b60611b6044820152606401610bd1565b505060016000555050505050565b6001600160a01b038216600090815260016020526040902060068101548214156137a757505050565b60006137b284612645565b60405162f704bf60e21b81526001600160a01b0386811660048301526024820186905291909116906303dc12fc90604401602060405180830381600087803b1580156137fd57600080fd5b505af1158015613811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138359190614d34565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561389257600080fd5b505afa1580156138a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ca9190614d34565b60058401549091506000670de0b6b3a76400006138e78584615385565b6138f19190615268565b90506000670de0b6b3a76400006139088584615385565b6139129190615268565b9050600061392082846153a4565b905061392c8385615250565b60058801556003870154613941908290615250565b60038801556007870154613956908390615250565b600788015550505050600690920192909255505050565b6060806000846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156139ab57600080fd5b505afa1580156139bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139e79190810190614d4d565b90508315613ae4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600160205260408082205481516395d89b4160e01b81529151929316916395d89b41916004808201928692909190829003018186803b158015613a6157600080fd5b505afa158015613a75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a9d9190810190614d4d565b905080604051806040016040528060018152602001602d60f81b81525083604051602001613acd93929190614f36565b604051602081830303815290604052935050613b2b565b60006040518060400160405280600481526020016353696c6f60e01b81525090508082604051602001613b18929190614f07565b6040516020818303038152906040529350505b6000836040518060400160405280601081526020016f2d636f6c6c61746572616c2d4f4e4c5960801b815250604051602001613b68929190614f07565b60408051601f1981840301815282820182526005835264446562742d60d81b6020848101919091529151909350613ba29291879101614f07565b60408051601f198184030181529082905263f8f38d1b60e01b825293506001600160a01b0388169063f8f38d1b90613be290879081908b9060040161505a565b602060405180830381600087803b158015613bfc57600080fd5b505af1158015613c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c349190614892565b6001600160a01b038781166000908152600160205260409081902080546001600160a01b03191693831693909317909255905163f8f38d1b60e01b81529088169063f8f38d1b90613c8d90849081908b9060040161505a565b602060405180830381600087803b158015613ca757600080fd5b505af1158015613cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cdf9190614892565b6001600160a01b038781166000908152600160208190526040918290200180546001600160a01b031916938316939093179092559051633b0eb45d60e21b81529088169063ec3ad17490613d3b90869081908b9060040161505a565b602060405180830381600087803b158015613d5557600080fd5b505af1158015613d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d8d9190614892565b6001600160a01b03968716600090815260016020526040902060020180546001600160a01b0319169190971617909555505050505050565b6001600160a01b03821660009081526001602052604081206007810154600882015491929091613df590836153a4565b905080613e03575050505050565b60088301829055613e1e6001600160a01b03861685836143f1565b5050505050565b600060026000541415613e4a5760405162461bcd60e51b8152600401610bd1906150fd565b600260009081556001600160a01b0380881682526001602052604090912054879116613e885760405162461bcd60e51b8152600401610bd190615098565b8587613e94814261377e565b6001600160a01b0389166000908152600160205260408120908615613ef05760048201546001830154613ed7908d9083908c906001600160a01b03168f8f614421565b99509150613ee589826153a4565b600484015550613f26565b60038201548254613f11908d9083908c906001600160a01b03168f8f614421565b99509150613f1f89826153a4565b6003840155505b886001600160a01b03168a6001600160a01b03168c6001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f02838b8b604051613f809291909182521515602082015260400190565b60405180910390a4879550505050613f9781610b7d565b613ff25760405162461bcd60e51b815260206004820152602660248201527f4261736553696c6f3a206e6f7420736f6c76656e7420696e2073696c6f20706f60448201526539b4ba34b7b760d11b6064820152608401610bd1565b5050600160005595945050505050565b825160609081904290806001600160401b038111156140235761402361542e565b60405190808252806020026020018201604052801561404c578160200160208202803683370190505b509350806001600160401b038111156140675761406761542e565b604051908082528060200260200182016040528015614090578160200160208202803683370190505b50925060005b818110156141f1576000600160008a84815181106140b6576140b6615418565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506141038983815181106140f5576140f5615418565b60200260200101518561377e565b61411081896000196141fc565b5085838151811061412357614123615418565b602002602001018181525050600061416f8a848151811061414657614146615418565b602090810291909101015160048401546001850154600019906001600160a01b03168d8d614421565b91505060006141af8b858151811061418957614189615418565b602090810291909101015160038501548554600019906001600160a01b03168e8e614421565b91506141bd90508183615250565b8885815181106141cf576141cf615418565b60200260200101818152505050505080806141e9906153e7565b915050614096565b505050935093915050565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a082319060240160206040518083038186803b15801561424a57600080fd5b505afa15801561425e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142829190614d34565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142d657600080fd5b505afa1580156142ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061430e9190614d34565b6005880154909150600019861415614337579192508291614330838284612c35565b94506141f1565b6000614344848385612c35565b9050808711614362576143588783856143cd565b9450869550614369565b8394508095505b50505050935093915050565b6117a4846323b872dd60e01b85858560405160240161439693929190614f79565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614642565b60008115806143da575082155b156143e6575082610fa8565b82612c5a8386615385565b6040516001600160a01b03831660248201526044810182905261095390849063a9059cbb60e01b90606401614396565b60008060001986141561452d576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b15801561446f57600080fd5b505afa158015614483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a79190614d34565b915061452687866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156144e657600080fd5b505afa1580156144fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451e9190614d34565b849190612c35565b90506145b0565b6145aa87866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561456a57600080fd5b505afa15801561457e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a29190614d34565b8891906143cd565b91508590505b806145c057506000905080614637565b604051632770a7eb60e21b81526001600160a01b03858116600483015260248201849052861690639dc29fac90604401600060405180830381600087803b15801561460a57600080fd5b505af115801561461e573d6000803e3d6000fd5b50614637925050506001600160a01b03891684836143f1565b965096945050505050565b6000614697826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147149092919063ffffffff16565b80519091501561095357808060200190518101906146b59190614d17565b6109535760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bd1565b6060612c64848460008585843b61476d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bd1565b600080866001600160a01b031685876040516147899190614eeb565b60006040518083038185875af1925050503d80600081146147c6576040519150601f19603f3d011682016040523d82523d6000602084013e6147cb565b606091505b5091509150611573828286606083156147e5575081610fa8565b8251156147f55782518084602001fd5b8160405162461bcd60e51b8152600401610bd19190615047565b803561481a81615444565b919050565b600082601f83011261483057600080fd5b813561484361483e82615229565b6151d6565b81815284602083860101111561485857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561488757600080fd5b8135610fa881615444565b6000602082840312156148a457600080fd5b8151610fa881615444565b600080604083850312156148c257600080fd5b82356148cd81615444565b915060208301356148dd81615444565b809150509250929050565b600080600080608085870312156148fe57600080fd5b843561490981615444565b9350602085013561491981615444565b9250604085013561492981615444565b9396929550929360600135925050565b600080600080600060a0868803121561495157600080fd5b853561495c81615444565b9450602086013561496c81615444565b9350604086013561497c81615444565b925060608601359150608086013561499381615459565b809150509295509295909350565b6000806000606084860312156149b657600080fd5b83356149c181615444565b925060208401356149d181615444565b929592945050506040919091013590565b600080600080608085870312156149f857600080fd5b8435614a0381615444565b93506020850135614a1381615444565b9250604085013591506060850135614a2a81615459565b939692955090935050565b60008060008060808587031215614a4b57600080fd5b8435614a5681615444565b93506020850135614a6681615444565b93969395505050506040820135916060013590565b60008060408385031215614a8e57600080fd5b8235614a9981615444565b915060208301356148dd81615459565b60008060408385031215614abc57600080fd5b8235614ac781615444565b946020939093013593505050565b600080600060608486031215614aea57600080fd5b8335614af581615444565b9250602084013591506040840135614b0c81615459565b809150509250925092565b60008060208385031215614b2a57600080fd5b82356001600160401b0380821115614b4157600080fd5b818501915085601f830112614b5557600080fd5b813581811115614b6457600080fd5b8660208260051b8501011115614b7957600080fd5b60209290920196919550909350505050565b60006020808385031215614b9e57600080fd5b82516001600160401b03811115614bb457600080fd5b8301601f81018513614bc557600080fd5b8051614bd361483e82615206565b80828252848201915084840188868560051b8701011115614bf357600080fd5b600094505b83851015614c1f578051614c0b81615444565b835260019490940193918501918501614bf8565b50979650505050505050565b60008060008060808587031215614c4157600080fd5b84356001600160401b0380821115614c5857600080fd5b818701915087601f830112614c6c57600080fd5b81356020614c7c61483e83615206565b8083825282820191508286018c848660051b8901011115614c9c57600080fd5b600096505b84871015614cc8578035614cb481615444565b835260019690960195918301918301614ca1565b509850614cd8905089820161480f565b96505050614ce86040880161480f565b93506060870135915080821115614cfe57600080fd5b50614d0b8782880161481f565b91505092959194509250565b600060208284031215614d2957600080fd5b8151610fa881615459565b600060208284031215614d4657600080fd5b5051919050565b600060208284031215614d5f57600080fd5b81516001600160401b03811115614d7557600080fd5b8201601f81018413614d8657600080fd5b8051614d9461483e82615229565b818152856020838501011115614da957600080fd5b61263c8260208301602086016153bb565b600060208284031215614dcc57600080fd5b5035919050565b600060208284031215614de557600080fd5b815160ff81168114610fa857600080fd5b600081518084526020808501945080840160005b83811015614e2f5781516001600160a01b031687529582019590820190600101614e0a565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614e82578284038952614e70848351614e8f565b98850198935090840190600101614e58565b5091979650505050505050565b600081518084526020808501945080840160005b83811015614e2f57815187529582019590820190600101614ea3565b60008151808452614ed78160208601602086016153bb565b601f01601f19169290920160200192915050565b60008251614efd8184602087016153bb565b9190910192915050565b60008351614f198184602088016153bb565b835190830190614f2d8183602088016153bb565b01949350505050565b60008451614f488184602089016153bb565b845190830190614f5c8183602089016153bb565b8451910190614f6f8183602088016153bb565b0195945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038616815260a060208201819052600090614fc190830187614df6565b8281036040840152614fd38187614e8f565b90508281036060840152614fe78186614e8f565b90508281036080840152610b718185614ebf565b602081526000610fa86020830184614df6565b6060815260006150216060830186614df6565b82810360208401526150338186614e3a565b905082810360408401526108058185614e3a565b602081526000610fa86020830184614ebf565b60608152600061506d6060830186614ebf565b828103602084015261507f8186614ebf565b91505060018060a01b0383166040830152949350505050565b6020808252601e908201527f4261736553696c6f3a20617373657420646f6573206e6f742065786973740000604082015260600190565b6020808252601490820152732130b9b2a9b4b6379d1037b7363ca937baba32b960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b031681526101408101602083015161516060208401826001600160a01b03169052565b50604083015161517b60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516151ce8285018215159052565b505092915050565b604051601f8201601f191681016001600160401b03811182821017156151fe576151fe61542e565b604052919050565b60006001600160401b0382111561521f5761521f61542e565b5060051b60200190565b60006001600160401b038211156152425761524261542e565b50601f01601f191660200190565b6000821982111561526357615263615402565b500190565b60008261528557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156152c55781600019048211156152ab576152ab615402565b808516156152b857918102915b93841c939080029061528f565b509250929050565b6000610fa883836152e4565b6000610fa860ff8416835b6000826152f35750600161066d565b816153005750600061066d565b816001811461531657600281146153205761533c565b600191505061066d565b60ff84111561533157615331615402565b50506001821b61066d565b5060208310610133831016604e8410600b841016171561535f575081810a61066d565b615369838361528a565b806000190482111561537d5761537d615402565b029392505050565b600081600019048311821515161561539f5761539f615402565b500290565b6000828210156153b6576153b6615402565b500390565b60005b838110156153d65781810151838201526020016153be565b838111156117a45750506000910152565b60006000198214156153fb576153fb615402565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461173457600080fd5b801515811461173457600080fdfea2646970667358221220909498a8471d05265e8bcd833fe717af450201ec5b0e4aedabfe7e7b2ee8557f64736f6c63430008070033a2646970667358221220ca4abe9eaf1e9e20a6fe51213cf9335193e93bb5bcf6088312c16f6f2b02b88864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSilo(address,bytes)": {
        "params": {
          "_data": "(optional) data that may be needed during silo creation",
          "_siloAsset": "silo asset"
        },
        "returns": {
          "silo": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}