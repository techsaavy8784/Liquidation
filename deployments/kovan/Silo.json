{
  "address": "0xF859F98ae7ab398a9d5Feb54E99FA0cdb8713bA5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedCollateral",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFINITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrowFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ISiloFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "flashBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDebtValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        }
      ],
      "name": "seizeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26d1d8ed9514651944557b3c8f0f358649bb4f582fb49157c5754040b5d0f28e",
  "receipt": {
    "to": null,
    "from": "0x48872D69A9591153c5220381C953752f5894ff05",
    "contractAddress": "0xF859F98ae7ab398a9d5Feb54E99FA0cdb8713bA5",
    "transactionIndex": 3,
    "gasUsed": "2801094",
    "logsBloom": "0x
    "blockHash": "0x8bfddc555f304edf4b0f6685e83a1abcdbe3221576f40f72ddde6d2ab90291af",
    "transactionHash": "0x26d1d8ed9514651944557b3c8f0f358649bb4f582fb49157c5754040b5d0f28e",
    "logs": [],
    "blockNumber": 27605160,
    "cumulativeGasUsed": "3002453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "",
    ""
  ],
  "solcInputHash": "6d92413c800e1feb51432e172a193baa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedCollateral\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFINITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ISiloFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"seizeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getCollateralValue(address)\":{\"details\":\"value of collateral (asset) provided by user\"},\"getCollateralization(address)\":{\"details\":\"ratio between value borrowed by user in this silo to collateral value provided in bridge pool for this silo\"},\"getDebtValue(address)\":{\"details\":\"value of asset borrowed by user\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Silo.sol\":\"Silo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Silo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './interfaces/ISilo.sol';\\nimport './interfaces/ISiloFactory.sol';\\nimport './interfaces/ISiloBridgePool.sol';\\nimport './interfaces/IInterestRateModel.sol';\\nimport './interfaces/ISiloCallee.sol';\\nimport './interfaces/ISiloOracle.sol';\\n\\nimport './lib/EasyMath.sol';\\n\\ncontract Silo is ISilo, ERC20, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMath for uint256;\\n\\n    uint256 public constant SECONDS_PER_YEAR = 31536000;\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant INFINITY = type(uint256).max;\\n\\n    uint256 public immutable DECIMAL_POINTS;\\n    ISiloFactory immutable public factory;\\n\\n    address public override asset;\\n    uint256 public lastUpdateTimestamp;\\n    uint256 public totalDeposits;\\n    uint256 public totalBorrowShare;\\n    uint256 public totalBorrowAmount;\\n    uint256 public interestRate;\\n    uint256 public protocolFees;\\n\\n    mapping(address => uint256) public borrowShare;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Borrow(address indexed user, uint256 amount);\\n    event Repay(address indexed user, uint256 amount);\\n    event Liquidate(address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == factory.router(), \\\"Silo: onlyRouter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBridge() {\\n        require(msg.sender == factory.bridgePool(), \\\"Silo: onlyBridge\\\");\\n        _;\\n    }\\n\\n    modifier interest() {\\n        accrueInterest();\\n        _;\\n    }\\n\\n    /// @dev check if user has enough collateral deposited to silo to support withstanding borrow positon on bridgePool\\n    modifier bridgePositionSolvent(address _user) {\\n        _;\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        require(bridgePool.isSolvent(address(this), _user), \\\"Silo: not solvent in brigde position\\\");\\n    }\\n\\n    modifier validateBorrow(address _user) {\\n        _;\\n        require(\\n            getCollateralization(_user) >= factory.getBorrowCollateralization(address(this)),\\n            \\\"Silo: !borrowCollateralization\\\"\\n        );\\n    }\\n\\n    constructor (\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        factory = ISiloFactory(msg.sender);\\n        asset = _asset;\\n        DECIMAL_POINTS = 10**ERC20(_asset).decimals();\\n    }\\n\\n    function liquidity() public view returns (uint256) {\\n        return ERC20(asset).balanceOf(address(this));\\n    }\\n\\n    function balanceOfUnderlying(address _user) public view returns (uint256) {\\n        uint256 share = balanceOf(_user);\\n        return share.toAmount(totalDeposits, totalSupply());\\n    }\\n\\n    function calcFee(uint256 _amount) public view returns (uint256) {\\n        uint256 entryFee = factory.entryFee();\\n        if (entryFee == 0) return 0; // no fee\\n        return _amount * entryFee / BASIS_POINTS;\\n    }\\n\\n    function isSolvent(address _user) public override returns (bool) {\\n        require(_user != address(0), \\\"Silo: user != address(0)\\\");\\n        uint256 minimumCollateralization = factory.getMinCollateralization(address(this));\\n        return getCollateralization(_user) >= minimumCollateralization;\\n    }\\n\\n    /// @dev ratio between value borrowed by user in this silo to collateral value provided in bridge pool for this silo\\n    function getCollateralization(address _user) public returns (uint256) {\\n        uint256 debtValue = getDebtValue(_user);\\n        if (debtValue == 0) return INFINITY;\\n\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        uint256 collateralValue = bridgePool.getCollateralValue(address(this), _user);\\n        return collateralValue * BASIS_POINTS / debtValue;\\n    }\\n\\n    /// @dev value of collateral (asset) provided by user\\n    function getCollateralValue(address _user) public override returns (uint256) {\\n        ISiloOracle oracle = ISiloOracle(factory.oracle());\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        uint256 assetAmount = balanceOf(_user).toAmount(totalDeposits, totalSupply());\\n        // TODO: price must have 1e18 decimals\\n        return assetAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    /// @dev value of asset borrowed by user\\n    function getDebtValue(address _user) public returns (uint256) {\\n        ISiloOracle oracle = ISiloOracle(factory.oracle());\\n        uint256 assetDebtAmount = borrowShare[_user].toAmount(totalBorrowAmount, totalBorrowShare);\\n        uint256 assetPrice = oracle.getPrice(asset);\\n        // TODO: price must have 1e18 decimals\\n        return assetDebtAmount * assetPrice / DECIMAL_POINTS;\\n    }\\n\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _user, uint256 _amount) external override onlyRouter {\\n        _deposit(_user, msg.sender, _amount);\\n    }\\n\\n    function _deposit(address _user, address _from, uint256 _amount) internal nonReentrant interest {\\n        require(borrowShare[_user] == 0, \\\"Silo: cannot deposit & borrow the same asset\\\");\\n\\n        uint256 balanceBefore = liquidity();\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n        uint256 balanceAfter = liquidity();\\n\\n        _amount = balanceAfter - balanceBefore;\\n        uint256 share = _amount.toShare(totalDeposits, totalSupply());\\n        totalDeposits += _amount;\\n        emit Deposit(_user, _amount);\\n        _mint(_user, share);\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        _withdraw(msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(address _user, uint256 _amount) external override onlyRouter {\\n        _withdraw(_user, _amount);\\n    }\\n\\n    function _withdraw(address _user, uint256 _amount) internal nonReentrant bridgePositionSolvent(_user) interest {\\n        uint256 share;\\n        if (_amount == type(uint256).max) {\\n            share = balanceOf(_user);\\n            _amount = share.toAmount(totalDeposits, totalSupply());\\n        } else {\\n            share = _amount.toShare(totalDeposits, totalSupply());\\n        }\\n        totalDeposits -= _amount;\\n        _burn(_user, share);\\n        emit Withdraw(_user, _amount);\\n\\n        ERC20(asset).safeTransfer(_user, _amount);\\n    }\\n\\n    function borrow(uint256 _amount) external override validateBorrow(msg.sender) interest  {\\n        _borrow(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function borrowFor(address _user, address _to, uint256 _amount) external override onlyRouter validateBorrow(_user) interest {\\n        _borrow(_user, _to, _amount);\\n    }\\n\\n    function flashBorrow(uint256 _amount, address _to, bytes memory _data)\\n        external\\n        validateBorrow(msg.sender)\\n        interest\\n    {\\n        _borrow(msg.sender, msg.sender, _amount);\\n\\n        ISiloCallee(_to).siloCall(msg.sender, _amount, _data);\\n    }\\n\\n    function _borrow(address _user, address _to, uint256 _amount) internal nonReentrant {\\n        require(balanceOf(_user) == 0, \\\"Silo: cannot borrow & deposit the same asset\\\");\\n        require(liquidity() >= _amount, \\\"Silo: liquidity shortage\\\");\\n\\n        uint256 fee = calcFee(_amount);\\n        uint256 borrowerShare = (_amount + fee).toShare(totalBorrowAmount, totalBorrowShare);\\n        borrowShare[_user] += borrowerShare;\\n        totalBorrowShare += borrowerShare;\\n        totalBorrowAmount += _amount + fee;\\n        protocolFees += fee;\\n\\n        emit Borrow(_user, _amount);\\n\\n        ERC20(asset).safeTransfer(_to, _amount);\\n    }\\n\\n    function repay(uint256 _amount) external override nonReentrant {\\n        _repay(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function repayFor(address _user, uint256 _amount) external override nonReentrant onlyRouter {\\n        _repay(_user, msg.sender, _amount);\\n    }\\n\\n    function _repay(address _user, address _from, uint256 _amount) internal interest returns (uint256) {\\n        uint256 repayShare;\\n        if (_amount == type(uint256).max) {\\n            repayShare = borrowShare[_user];\\n            _amount = repayShare.toAmount(totalBorrowAmount, totalBorrowShare);\\n        } else {\\n            repayShare = _amount.toShare(totalBorrowAmount, totalBorrowShare);\\n        }\\n\\n        borrowShare[_user] -= repayShare;\\n        totalBorrowShare -= repayShare;\\n        totalBorrowAmount -= _amount;\\n\\n        emit Repay(_user, _amount);\\n\\n        ERC20(asset).safeTransferFrom(_from, address(this), _amount);\\n        return _amount;\\n    }\\n\\n    function seizeCollateral(address _user, address _liquidator) external override onlyBridge returns (uint256) {\\n        uint256 collateral = balanceOf(_user);\\n        _transfer(_user, _liquidator, collateral);\\n        return collateral.toAmount(totalDeposits, totalSupply());\\n    }\\n\\n    function liquidate(address[] memory _users) external override nonReentrant interest returns (uint256[] memory) {\\n        uint256[] memory liquidated = new uint256[](_users.length);\\n        uint256 n = _users.length;\\n        for (uint256 i = 0; i < n; i++) {\\n            liquidated[i] = _liquidate(_users[i]);\\n        }\\n        return liquidated;\\n    }\\n\\n    function _liquidate(address _user) internal returns (uint256 seizedCollateral) {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) return 0;\\n\\n        uint256 amountRepaid = _repay(_user, msg.sender, type(uint256).max);\\n\\n        ISiloBridgePool bridgePool = ISiloBridgePool(factory.bridgePool());\\n        seizedCollateral = bridgePool.seizeCollateral(_user, msg.sender);\\n\\n        emit Liquidate(_user, amountRepaid, seizedCollateral);\\n\\n        require(isSolvent(_user), \\\"Silo: user not solvent\\\");\\n    }\\n\\n    function accrueInterest() public {\\n        uint256 timeDelta = block.timestamp - lastUpdateTimestamp;\\n        if (timeDelta == 0) return;\\n\\n        // accrue interest\\n        uint256 totalInterest = totalBorrowAmount * interestRate * timeDelta / BASIS_POINTS / SECONDS_PER_YEAR;\\n        uint256 protocolInterestShare = totalInterest * factory.protocolShareFee() / BASIS_POINTS;\\n        uint256 siloInterestShare = totalInterest - protocolInterestShare;\\n        totalBorrowAmount += totalInterest;\\n        protocolFees += protocolInterestShare;\\n        totalDeposits += siloInterestShare;\\n\\n        // update interest rate\\n        address model = factory.getInterestRateModel(address(this));\\n        (interestRate, lastUpdateTimestamp) = IInterestRateModel(model).getInterestRate(\\n            totalBorrowAmount,\\n            totalDeposits,\\n            interestRate,\\n            lastUpdateTimestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf1e2f0d3ca8aa2b2cefea45a9f01c53660b85c3c65684a857b5837196bc3c684\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IInterestRateModel {\\n    function getInterestRate(\\n        uint256 debt,\\n        uint256 liquidity,\\n        uint256 previousInterestRate,\\n        uint256 lastUpdateTimestamp\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2480dd069f8169aa4807b125744c10a8d2ca01af9fa85be4553f26c20779b6c1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISilo {\\n    function asset() external view returns (address);\\n    function isSolvent(address user) external returns (bool);\\n    function getCollateralValue(address user) external returns (uint256);\\n    function deposit(uint256 amount) external;\\n    function borrow(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function withdrawFor(address user, uint256 amount) external;\\n    function repay(uint256 amount) external;\\n    function repayFor(address user, uint256 amount) external;\\n    function liquidate(address[] memory user) external returns (uint256[] memory);\\n    function depositFor(address user, uint256 amount) external;\\n    function borrowFor(address user, address to, uint256 amount) external;\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xc12b49a1fafbb2cc65c966e7589d07d8113220ed8e99292928dcfd4bf3dd1704\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloBridgePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloBridgePool {\\n    function asset() external view returns (address);\\n    function depositFor(address silo, address user, uint256 amount) external;\\n    function borrowFor(address silo, address user, address to, uint256 amount) external;\\n    function getCollateralValue(address silo, address user) external returns (uint256);\\n    function getCollateralization(address silo, address user) external returns (uint256);\\n    function isSolvent(address silo, address user) external returns (bool);\\n    function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function addSilo(address silo, string memory name, string memory symbol) external;\\n}\\n\",\"keccak256\":\"0x98b8befc39c95739a0f3e4c8eeaa8049dbb9cd8bb41c2d416cbc00a4e162e8fc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloCallee.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloCallee {\\n    function siloCall(address caller, uint256 amount, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0x0a99700afcea1f5eb63ac4f3158fb905999b8e6e6b9eea819ae706f51b471d1d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloFactory {\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address silo) external view returns (address);\\n    function router() external view returns (address);\\n    function bridgePool() external view returns (address);\\n    function bridgeAsset() external view returns (address);\\n    function oracle() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getInterestRateModel(address silo) external view returns (address);\\n    function getBorrowCollateralization(address silo) external view returns (uint256);\\n    function getMinCollateralization(address silo) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x663b8bceeee7b56e8694537649ee1d4b798d0913cea14e95fd93f6168c7b7988\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracle {\\n    function getPrice(address token) external returns (uint256);\\n    function registerToken(address token, address oracle, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0x8691b23456f1ace3b58bcff36443b214c13207b1ea250851b5962bafa7b3c859\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary EasyMath {\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return x <= 0 ? uint256(-x) : uint256(x);\\n    }\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n        return amount * totalShares / totalAmount;\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) internal pure returns (uint256) {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n        return share * totalAmount / totalShares;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(uint256 amount) internal pure returns (uint256) {\\n        return amount * 1e14;\\n    }\\n\\n    /// from 18 decimals to basis points (4 decimals)\\n    function toBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount / 1e14;\\n    }\\n\\n    /// from basis points (4 decimals) ot 18 decimals\\n    function fromBasisPoint(int256 amount) internal pure returns (int256) {\\n        return amount * 1e14;\\n    }\\n}\\n\",\"keccak256\":\"0x6fad7557ec8708b17bfe6919acf2fb2ad59635591a12d82a8ba662786dd6e019\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620035c3380380620035c3833981016040819052620000349162000279565b8151829082906200004d9060039060208501906200011c565b508051620000639060049060208401906200011c565b50506001600555503360601b60a052600680546001600160a01b0319166001600160a01b0385169081179091556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b158015620000c757600080fd5b505afa158015620000dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000102919062000303565b6200010f90600a62000378565b60805250620004a2915050565b8280546200012a9062000439565b90600052602060002090601f0160209004810192826200014e576000855562000199565b82601f106200016957805160ff191683800117855562000199565b8280016001018555821562000199579182015b82811115620001995782518255916020019190600101906200017c565b50620001a7929150620001ab565b5090565b5b80821115620001a75760008155600101620001ac565b600082601f830112620001d457600080fd5b81516001600160401b0380821115620001f157620001f16200048c565b604051601f8301601f19908116603f011681019082821181831017156200021c576200021c6200048c565b816040528381526020925086838588010111156200023957600080fd5b600091505b838210156200025d57858201830151818301840152908201906200023e565b838211156200026f5760008385830101525b9695505050505050565b6000806000606084860312156200028f57600080fd5b83516001600160a01b0381168114620002a757600080fd5b60208501519093506001600160401b0380821115620002c557600080fd5b620002d387838801620001c2565b93506040860151915080821115620002ea57600080fd5b50620002f986828701620001c2565b9150509250925092565b6000602082840312156200031657600080fd5b815160ff811681146200032857600080fd5b9392505050565b600181815b808511156200037057816000190482111562000354576200035462000476565b808516156200036257918102915b93841c939080029062000334565b509250929050565b60006200032860ff841683600082620003945750600162000433565b81620003a35750600062000433565b8160018114620003bc5760028114620003c757620003e7565b600191505062000433565b60ff841115620003db57620003db62000476565b50506001821b62000433565b5060208310610133831016604e8410600b84101617156200040c575081810a62000433565b6200041883836200032f565b80600019048211156200042f576200042f62000476565b0290505b92915050565b600181811c908216806200044e57607f821691505b602082108114156200047057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160a05160601c61307362000550600039600081816104f6015281816107050152818161085c015281816109eb01528181610abb01528181610ba301528181610d2f01528181610e4b01528181610f8801528181611052015281816112bb015281816113cf0152818161162001528181611782015281816117bd0152818161188b01528181611f3e015261245c0152600081816105300152818161119d01526119d101526130736000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636912959911610151578063a985994b116100c3578063d429913411610087578063d429913414610552578063db518db214610565578063dd62ed3e14610578578063e1f1c4a7146105b1578063e6a69ab8146105ba578063ebf5a908146105c557600080fd5b8063a985994b146104be578063b6b55f25146104de578063c45a0155146104f1578063c5ebeaec14610518578063ce47696f1461052b57600080fd5b806395d89b411161011557806395d89b411461046c57806397904e4214610474578063a457c2d714610487578063a6afed951461049a578063a79660f2146104a2578063a9059cbb146104ab57600080fd5b8063691295991461040b57806370a082311461041e57806375dc7d8c146104475780637c3a00fd1461045a5780637d8820971461046357600080fd5b80632e1a7d4d116101ea57806338b51ce1116101ae57806338b51ce11461039557806338d52e0f146103a857806339509351146103d35780633af9e669146103e65780634550079d146103f95780635f48f44b1461040257600080fd5b80632e1a7d4d1461033a5780632f4f21e21461034d5780633088044114610360578063313ce56714610373578063371fd8e61461038257600080fd5b80631ad8b03b116102315780631ad8b03b146102d65780631d5f143e146102df57806323a27622146102f257806323b872dd146103075780632c9cbca21461031a57600080fd5b806306fdde031461026e578063095ea7b31461028c57806314bcec9f146102af57806318160ddd146102c65780631a686502146102ce575b600080fd5b6102766105d8565b6040516102839190612e4f565b60405180910390f35b61029f61029a366004612b8e565b61066a565b6040519015158152602001610283565b6102b860075481565b604051908152602001610283565b6002546102b8565b6102b8610680565b6102b8600c5481565b6102b86102ed366004612b14565b610701565b610305610300366004612b8e565b61082f565b005b61029f610315366004612b4d565b610930565b6102b8610328366004612ada565b600d6020526000908152604090205481565b610305610348366004612c95565b6109dc565b61030561035b366004612b8e565b6109e9565b61030561036e366004612b4d565b610ab9565b60405160128152602001610283565b610305610390366004612c95565b610c83565b61029f6103a3366004612ada565b610cbf565b6006546103bb906001600160a01b031681565b6040516001600160a01b039091168152602001610283565b61029f6103e1366004612b8e565b610dc6565b6102b86103f4366004612ada565b610e02565b6102b8600a5481565b6102b860001981565b6102b8610419366004612ada565b610e2a565b6102b861042c366004612ada565b6001600160a01b031660009081526020819052604090205490565b6102b8610455366004612c95565b610f83565b6102b8600b5481565b6102b860085481565b61027661103e565b6102b8610482366004612ada565b61104d565b61029f610495366004612b8e565b6111c6565b61030561125f565b6102b860095481565b61029f6104b9366004612b8e565b6114f9565b6104d16104cc366004612bba565b611506565b6040516102839190612e0b565b6103056104ec366004612c95565b6115ec565b6103bb7f000000000000000000000000000000000000000000000000000000000000000081565b610305610526366004612c95565b6115f7565b6102b87f000000000000000000000000000000000000000000000000000000000000000081565b610305610560366004612cc7565b6116f9565b610305610573366004612b8e565b6117bb565b6102b8610586366004612b14565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102b861271081565b6102b86301e1338081565b6102b86105d3366004612ada565b611886565b6060600380546105e790612f90565b80601f016020809104026020016040519081016040528092919081815260200182805461061390612f90565b80156106605780601f1061063557610100808354040283529160200191610660565b820191906000526020600020905b81548152906001019060200180831161064357829003601f168201915b5050505050905090565b60006106773384846119fa565b50600192915050565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190612cae565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190612af7565b6001600160a01b0316336001600160a01b0316146107ec5760405162461bcd60e51b815260206004820152601060248201526f53696c6f3a206f6e6c7942726964676560801b60448201526064015b60405180910390fd5b6001600160a01b038316600090815260208190526040902054610810848483611b1e565b61082760085461081f60025490565b839190611cec565b949350505050565b600260055414156108525760405162461bcd60e51b81526004016107e390612e8c565b60026005819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190612af7565b6001600160a01b0316336001600160a01b03161461091b5760405162461bcd60e51b81526004016107e390612e62565b610926823383611d1b565b5050600160055550565b600061093d848484611b1e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156109c25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016107e3565b6109cf85338584036119fa565b60019150505b9392505050565b6109e63382611e35565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4257600080fd5b505afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190612af7565b6001600160a01b0316336001600160a01b031614610aaa5760405162461bcd60e51b81526004016107e390612e62565b610ab58233836120b5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1257600080fd5b505afa158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a9190612af7565b6001600160a01b0316336001600160a01b031614610b7a5760405162461bcd60e51b81526004016107e390612e62565b82610b8361125f565b610b8e848484612224565b604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063252bbc3e906024015b60206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612cae565b610c2f82610e2a565b1015610c7d5760405162461bcd60e51b815260206004820152601e60248201527f53696c6f3a2021626f72726f77436f6c6c61746572616c697a6174696f6e000060448201526064016107e3565b50505050565b60026005541415610ca65760405162461bcd60e51b81526004016107e390612e8c565b6002600555610cb6338083611d1b565b50506001600555565b60006001600160a01b038216610d175760405162461bcd60e51b815260206004820152601860248201527f53696c6f3a207573657220213d2061646472657373283029000000000000000060448201526064016107e3565b60405163041f3f0560e51b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906383e7e0a09060240160206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190612cae565b905080610dbd84610e2a565b10159392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610677918590610dfd908690612ef4565b6119fa565b6001600160a01b0381166000908152602081905260408120546109d560085461081f60025490565b600080610e3683611886565b905080610e47575060001992915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda9190612af7565b604051631eee3aa360e01b81523060048201526001600160a01b038681166024830152919250600091831690631eee3aa390604401602060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190612cae565b905082610f7061271083612f2e565b610f7a9190612f0c565b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fdf57600080fd5b505afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110179190612cae565b9050806110275750600092915050565b6127106110348285612f2e565b6109d59190612f0c565b6060600480546105e790612f90565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612af7565b6006546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908316906341976e0990602401602060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612cae565b9050600061119960085461117960025490565b6001600160a01b0388166000908152602081905260409020549190611cec565b90507f0000000000000000000000000000000000000000000000000000000000000000610f708383612f2e565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156112485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107e3565b61125533858584036119fa565b5060019392505050565b60006007544261126f9190612f4d565b9050806112795750565b60006301e1338061271083600b54600a546112949190612f2e565b61129e9190612f2e565b6112a89190612f0c565b6112b29190612f0c565b905060006127107f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190612cae565b6113549084612f2e565b61135e9190612f0c565b9050600061136c8284612f4d565b905082600a60008282546113809190612ef4565b9250508190555081600c60008282546113999190612ef4565b9250508190555080600860008282546113b29190612ef4565b90915550506040516354a0577160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354a057719060240160206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190612af7565b600a54600854600b546007546040516370ebc61760e11b815260048101949094526024840192909252604483015260648201529091506001600160a01b0382169063e1d78c2e906084016040805180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ec9190612d78565b600755600b555050505050565b6000610677338484611b1e565b60606002600554141561152b5760405162461bcd60e51b81526004016107e390612e8c565b600260055561153861125f565b6000825167ffffffffffffffff81111561155457611554613012565b60405190808252806020026020018201604052801561157d578160200160208202803683370190505b50835190915060005b818110156115df576115b08582815181106115a3576115a3612ffc565b602002602001015161242f565b8382815181106115c2576115c2612ffc565b6020908102919091010152806115d781612fcb565b915050611586565b5050600160055592915050565b6109e63333836120b5565b3361160061125f565b61160b333384612224565b604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063252bbc3e9060240160206040518083038186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190612cae565b6116ab82610e2a565b1015610ab55760405162461bcd60e51b815260206004820152601e60248201527f53696c6f3a2021626f72726f77436f6c6c61746572616c697a6174696f6e000060448201526064016107e3565b3361170261125f565b61170d333386612224565b604051633a04425160e11b81526001600160a01b0384169063740884a29061173d90339088908790600401612de4565b600060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b5050604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063252bbc3e9150602401610bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561181457600080fd5b505afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c9190612af7565b6001600160a01b0316336001600160a01b03161461187c5760405162461bcd60e51b81526004016107e390612e62565b610ab58282611e35565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191a9190612af7565b600a546009546001600160a01b0386166000908152600d602052604081205493945092611948929091611cec565b6006546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908416906341976e0990602401602060405180830381600087803b15801561199557600080fd5b505af11580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190612cae565b90507f0000000000000000000000000000000000000000000000000000000000000000610f708284612f2e565b6001600160a01b038316611a5c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107e3565b6001600160a01b038216611abd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107e3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611b825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107e3565b6001600160a01b038216611be45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107e3565b6001600160a01b03831660009081526020819052604090205481811015611c5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107e3565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611c93908490612ef4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cdf91815260200190565b60405180910390a3610c7d565b6000811580611cf9575082155b15611d06575060006109d5565b81611d118486612f2e565b6108279190612f0c565b6000611d2561125f565b6000600019831415611d6357506001600160a01b0384166000908152600d6020526040902054600a54600954611d5c918391611cec565b9250611d77565b600a54600954611d74918591612611565b90505b6001600160a01b0385166000908152600d602052604081208054839290611d9f908490612f4d565b925050819055508060096000828254611db89190612f4d565b9250508190555082600a6000828254611dd19190612f4d565b90915550506040518381526001600160a01b038616907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942319060200160405180910390a2600654611e2c906001600160a01b0316853086612635565b50909392505050565b60026005541415611e585760405162461bcd60e51b81526004016107e390612e8c565b600260055581611e6661125f565b6000600019831415611ea3576001600160a01b0384166000908152602081905260409020549050611e9c60085461081f60025490565b9250611ebd565b611eba600854611eb260025490565b859190612611565b90505b8260086000828254611ecf9190612f4d565b90915550611edf905084826126a0565b836001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051611f1a91815260200190565b60405180910390a2600654611f39906001600160a01b031685856127ee565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9557600080fd5b505afa158015611fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcd9190612af7565b604051630590630f60e41b81523060048201526001600160a01b0384811660248301529192509082169063590630f090604401602060405180830381600087803b15801561201a57600080fd5b505af115801561202e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120529190612c73565b6120aa5760405162461bcd60e51b8152602060048201526024808201527f53696c6f3a206e6f7420736f6c76656e7420696e2062726967646520706f73696044820152633a34b7b760e11b60648201526084016107e3565b505060016005555050565b600260055414156120d85760405162461bcd60e51b81526004016107e390612e8c565b60026005556120e561125f565b6001600160a01b0383166000908152600d6020526040902054156121605760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f74206465706f736974202620626f72726f7720746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107e3565b600061216a610680565b600654909150612185906001600160a01b0316843085612635565b600061218f610680565b905061219b8282612f4d565b925060006121b66008546121ae60025490565b869190612611565b905083600860008282546121ca9190612ef4565b90915550506040518481526001600160a01b038716907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2612217868261281e565b5050600160055550505050565b600260055414156122475760405162461bcd60e51b81526004016107e390612e8c565b60026005556001600160a01b038316600090815260208190526040902054156122c75760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f7420626f72726f772026206465706f73697420746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107e3565b806122d0610680565b101561231e5760405162461bcd60e51b815260206004820152601860248201527f53696c6f3a206c69717569646974792073686f7274616765000000000000000060448201526064016107e3565b600061232982610f83565b90506000612349600a5460095484866123429190612ef4565b9190612611565b6001600160a01b0386166000908152600d6020526040812080549293508392909190612376908490612ef4565b92505081905550806009600082825461238f9190612ef4565b9091555061239f90508284612ef4565b600a60008282546123b09190612ef4565b9250508190555081600c60008282546123c99190612ef4565b90915550506040518381526001600160a01b038616907fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367509060200160405180910390a2600654612423906001600160a01b031685856127ee565b50506001600555505050565b600061243a82610cbf565b1561244757506000919050565b60006124568333600019611d1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b1580156124b357600080fd5b505afa1580156124c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124eb9190612af7565b604051630eaf8a1f60e11b81526001600160a01b03868116600483015233602483015291925090821690631d5f143e90604401602060405180830381600087803b15801561253857600080fd5b505af115801561254c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125709190612cae565b60408051848152602081018390529194506001600160a01b038616917f3c4b1d42b9c7fa283f6fe657533f6a5a8a7ad1d36f9ef1d9d89ad04485e10d2c910160405180910390a26125c084610cbf565b6126055760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b60448201526064016107e3565b5050919050565b505050565b600081158061261e575082155b1561262a5750826109d5565b82611d118386612f2e565b6040516001600160a01b0380851660248301528316604482015260648101829052610c7d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128fd565b6001600160a01b0382166127005760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107e3565b6001600160a01b038216600090815260208190526040902054818110156127745760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107e3565b6001600160a01b03831660009081526020819052604081208383039055600280548492906127a3908490612f4d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261260c90849063a9059cbb60e01b90606401612669565b6001600160a01b0382166128745760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107e3565b80600260008282546128869190612ef4565b90915550506001600160a01b038216600090815260208190526040812080548392906128b3908490612ef4565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000612952826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129cf9092919063ffffffff16565b80519091501561260c57808060200190518101906129709190612c73565b61260c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107e3565b6060610827848460008585843b612a285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107e3565b600080866001600160a01b03168587604051612a449190612dc8565b60006040518083038185875af1925050503d8060008114612a81576040519150601f19603f3d011682016040523d82523d6000602084013e612a86565b606091505b5091509150612a96828286612aa1565b979650505050505050565b60608315612ab05750816109d5565b825115612ac05782518084602001fd5b8160405162461bcd60e51b81526004016107e39190612e4f565b600060208284031215612aec57600080fd5b81356109d581613028565b600060208284031215612b0957600080fd5b81516109d581613028565b60008060408385031215612b2757600080fd5b8235612b3281613028565b91506020830135612b4281613028565b809150509250929050565b600080600060608486031215612b6257600080fd5b8335612b6d81613028565b92506020840135612b7d81613028565b929592945050506040919091013590565b60008060408385031215612ba157600080fd5b8235612bac81613028565b946020939093013593505050565b60006020808385031215612bcd57600080fd5b823567ffffffffffffffff80821115612be557600080fd5b818501915085601f830112612bf957600080fd5b813581811115612c0b57612c0b613012565b8060051b9150612c1c848301612ec3565b8181528481019084860184860187018a1015612c3757600080fd5b600095505b83861015612c665780359450612c5185613028565b84835260019590950194918601918601612c3c565b5098975050505050505050565b600060208284031215612c8557600080fd5b815180151581146109d557600080fd5b600060208284031215612ca757600080fd5b5035919050565b600060208284031215612cc057600080fd5b5051919050565b600080600060608486031215612cdc57600080fd5b83359250602080850135612cef81613028565b9250604085013567ffffffffffffffff80821115612d0c57600080fd5b818701915087601f830112612d2057600080fd5b813581811115612d3257612d32613012565b612d44601f8201601f19168501612ec3565b91508082528884828501011115612d5a57600080fd5b80848401858401376000848284010152508093505050509250925092565b60008060408385031215612d8b57600080fd5b505080516020909101519092909150565b60008151808452612db4816020860160208601612f64565b601f01601f19169290920160200192915050565b60008251612dda818460208701612f64565b9190910192915050565b60018060a01b0384168152826020820152606060408201526000610f7a6060830184612d9c565b6020808252825182820181905260009190848201906040850190845b81811015612e4357835183529284019291840191600101612e27565b50909695505050505050565b6020815260006109d56020830184612d9c565b60208082526010908201526f29b4b6379d1037b7363ca937baba32b960811b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612eec57612eec613012565b604052919050565b60008219821115612f0757612f07612fe6565b500190565b600082612f2957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f4857612f48612fe6565b500290565b600082821015612f5f57612f5f612fe6565b500390565b60005b83811015612f7f578181015183820152602001612f67565b83811115610c7d5750506000910152565b600181811c90821680612fa457607f821691505b60208210811415612fc557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612fdf57612fdf612fe6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109e657600080fdfea26469706673582212204bd4d1c2c81fa131d9ebed025483882e3c518bfaad0915edee1f0e4bb531ac3164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80636912959911610151578063a985994b116100c3578063d429913411610087578063d429913414610552578063db518db214610565578063dd62ed3e14610578578063e1f1c4a7146105b1578063e6a69ab8146105ba578063ebf5a908146105c557600080fd5b8063a985994b146104be578063b6b55f25146104de578063c45a0155146104f1578063c5ebeaec14610518578063ce47696f1461052b57600080fd5b806395d89b411161011557806395d89b411461046c57806397904e4214610474578063a457c2d714610487578063a6afed951461049a578063a79660f2146104a2578063a9059cbb146104ab57600080fd5b8063691295991461040b57806370a082311461041e57806375dc7d8c146104475780637c3a00fd1461045a5780637d8820971461046357600080fd5b80632e1a7d4d116101ea57806338b51ce1116101ae57806338b51ce11461039557806338d52e0f146103a857806339509351146103d35780633af9e669146103e65780634550079d146103f95780635f48f44b1461040257600080fd5b80632e1a7d4d1461033a5780632f4f21e21461034d5780633088044114610360578063313ce56714610373578063371fd8e61461038257600080fd5b80631ad8b03b116102315780631ad8b03b146102d65780631d5f143e146102df57806323a27622146102f257806323b872dd146103075780632c9cbca21461031a57600080fd5b806306fdde031461026e578063095ea7b31461028c57806314bcec9f146102af57806318160ddd146102c65780631a686502146102ce575b600080fd5b6102766105d8565b6040516102839190612e4f565b60405180910390f35b61029f61029a366004612b8e565b61066a565b6040519015158152602001610283565b6102b860075481565b604051908152602001610283565b6002546102b8565b6102b8610680565b6102b8600c5481565b6102b86102ed366004612b14565b610701565b610305610300366004612b8e565b61082f565b005b61029f610315366004612b4d565b610930565b6102b8610328366004612ada565b600d6020526000908152604090205481565b610305610348366004612c95565b6109dc565b61030561035b366004612b8e565b6109e9565b61030561036e366004612b4d565b610ab9565b60405160128152602001610283565b610305610390366004612c95565b610c83565b61029f6103a3366004612ada565b610cbf565b6006546103bb906001600160a01b031681565b6040516001600160a01b039091168152602001610283565b61029f6103e1366004612b8e565b610dc6565b6102b86103f4366004612ada565b610e02565b6102b8600a5481565b6102b860001981565b6102b8610419366004612ada565b610e2a565b6102b861042c366004612ada565b6001600160a01b031660009081526020819052604090205490565b6102b8610455366004612c95565b610f83565b6102b8600b5481565b6102b860085481565b61027661103e565b6102b8610482366004612ada565b61104d565b61029f610495366004612b8e565b6111c6565b61030561125f565b6102b860095481565b61029f6104b9366004612b8e565b6114f9565b6104d16104cc366004612bba565b611506565b6040516102839190612e0b565b6103056104ec366004612c95565b6115ec565b6103bb7f000000000000000000000000000000000000000000000000000000000000000081565b610305610526366004612c95565b6115f7565b6102b87f000000000000000000000000000000000000000000000000000000000000000081565b610305610560366004612cc7565b6116f9565b610305610573366004612b8e565b6117bb565b6102b8610586366004612b14565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102b861271081565b6102b86301e1338081565b6102b86105d3366004612ada565b611886565b6060600380546105e790612f90565b80601f016020809104026020016040519081016040528092919081815260200182805461061390612f90565b80156106605780601f1061063557610100808354040283529160200191610660565b820191906000526020600020905b81548152906001019060200180831161064357829003601f168201915b5050505050905090565b60006106773384846119fa565b50600192915050565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190612cae565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190612af7565b6001600160a01b0316336001600160a01b0316146107ec5760405162461bcd60e51b815260206004820152601060248201526f53696c6f3a206f6e6c7942726964676560801b60448201526064015b60405180910390fd5b6001600160a01b038316600090815260208190526040902054610810848483611b1e565b61082760085461081f60025490565b839190611cec565b949350505050565b600260055414156108525760405162461bcd60e51b81526004016107e390612e8c565b60026005819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190612af7565b6001600160a01b0316336001600160a01b03161461091b5760405162461bcd60e51b81526004016107e390612e62565b610926823383611d1b565b5050600160055550565b600061093d848484611b1e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156109c25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016107e3565b6109cf85338584036119fa565b60019150505b9392505050565b6109e63382611e35565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4257600080fd5b505afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190612af7565b6001600160a01b0316336001600160a01b031614610aaa5760405162461bcd60e51b81526004016107e390612e62565b610ab58233836120b5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1257600080fd5b505afa158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a9190612af7565b6001600160a01b0316336001600160a01b031614610b7a5760405162461bcd60e51b81526004016107e390612e62565b82610b8361125f565b610b8e848484612224565b604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063252bbc3e906024015b60206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612cae565b610c2f82610e2a565b1015610c7d5760405162461bcd60e51b815260206004820152601e60248201527f53696c6f3a2021626f72726f77436f6c6c61746572616c697a6174696f6e000060448201526064016107e3565b50505050565b60026005541415610ca65760405162461bcd60e51b81526004016107e390612e8c565b6002600555610cb6338083611d1b565b50506001600555565b60006001600160a01b038216610d175760405162461bcd60e51b815260206004820152601860248201527f53696c6f3a207573657220213d2061646472657373283029000000000000000060448201526064016107e3565b60405163041f3f0560e51b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906383e7e0a09060240160206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190612cae565b905080610dbd84610e2a565b10159392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610677918590610dfd908690612ef4565b6119fa565b6001600160a01b0381166000908152602081905260408120546109d560085461081f60025490565b600080610e3683611886565b905080610e47575060001992915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda9190612af7565b604051631eee3aa360e01b81523060048201526001600160a01b038681166024830152919250600091831690631eee3aa390604401602060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190612cae565b905082610f7061271083612f2e565b610f7a9190612f0c565b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fdf57600080fd5b505afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110179190612cae565b9050806110275750600092915050565b6127106110348285612f2e565b6109d59190612f0c565b6060600480546105e790612f90565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612af7565b6006546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908316906341976e0990602401602060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612cae565b9050600061119960085461117960025490565b6001600160a01b0388166000908152602081905260409020549190611cec565b90507f0000000000000000000000000000000000000000000000000000000000000000610f708383612f2e565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156112485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107e3565b61125533858584036119fa565b5060019392505050565b60006007544261126f9190612f4d565b9050806112795750565b60006301e1338061271083600b54600a546112949190612f2e565b61129e9190612f2e565b6112a89190612f0c565b6112b29190612f0c565b905060006127107f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b815260040160206040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190612cae565b6113549084612f2e565b61135e9190612f0c565b9050600061136c8284612f4d565b905082600a60008282546113809190612ef4565b9250508190555081600c60008282546113999190612ef4565b9250508190555080600860008282546113b29190612ef4565b90915550506040516354a0577160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354a057719060240160206040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190612af7565b600a54600854600b546007546040516370ebc61760e11b815260048101949094526024840192909252604483015260648201529091506001600160a01b0382169063e1d78c2e906084016040805180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ec9190612d78565b600755600b555050505050565b6000610677338484611b1e565b60606002600554141561152b5760405162461bcd60e51b81526004016107e390612e8c565b600260055561153861125f565b6000825167ffffffffffffffff81111561155457611554613012565b60405190808252806020026020018201604052801561157d578160200160208202803683370190505b50835190915060005b818110156115df576115b08582815181106115a3576115a3612ffc565b602002602001015161242f565b8382815181106115c2576115c2612ffc565b6020908102919091010152806115d781612fcb565b915050611586565b5050600160055592915050565b6109e63333836120b5565b3361160061125f565b61160b333384612224565b604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063252bbc3e9060240160206040518083038186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190612cae565b6116ab82610e2a565b1015610ab55760405162461bcd60e51b815260206004820152601e60248201527f53696c6f3a2021626f72726f77436f6c6c61746572616c697a6174696f6e000060448201526064016107e3565b3361170261125f565b61170d333386612224565b604051633a04425160e11b81526001600160a01b0384169063740884a29061173d90339088908790600401612de4565b600060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b5050604051631295de1f60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063252bbc3e9150602401610bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561181457600080fd5b505afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c9190612af7565b6001600160a01b0316336001600160a01b03161461187c5760405162461bcd60e51b81526004016107e390612e62565b610ab58282611e35565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191a9190612af7565b600a546009546001600160a01b0386166000908152600d602052604081205493945092611948929091611cec565b6006546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908416906341976e0990602401602060405180830381600087803b15801561199557600080fd5b505af11580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190612cae565b90507f0000000000000000000000000000000000000000000000000000000000000000610f708284612f2e565b6001600160a01b038316611a5c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107e3565b6001600160a01b038216611abd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107e3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611b825760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107e3565b6001600160a01b038216611be45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107e3565b6001600160a01b03831660009081526020819052604090205481811015611c5c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107e3565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611c93908490612ef4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cdf91815260200190565b60405180910390a3610c7d565b6000811580611cf9575082155b15611d06575060006109d5565b81611d118486612f2e565b6108279190612f0c565b6000611d2561125f565b6000600019831415611d6357506001600160a01b0384166000908152600d6020526040902054600a54600954611d5c918391611cec565b9250611d77565b600a54600954611d74918591612611565b90505b6001600160a01b0385166000908152600d602052604081208054839290611d9f908490612f4d565b925050819055508060096000828254611db89190612f4d565b9250508190555082600a6000828254611dd19190612f4d565b90915550506040518381526001600160a01b038616907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942319060200160405180910390a2600654611e2c906001600160a01b0316853086612635565b50909392505050565b60026005541415611e585760405162461bcd60e51b81526004016107e390612e8c565b600260055581611e6661125f565b6000600019831415611ea3576001600160a01b0384166000908152602081905260409020549050611e9c60085461081f60025490565b9250611ebd565b611eba600854611eb260025490565b859190612611565b90505b8260086000828254611ecf9190612f4d565b90915550611edf905084826126a0565b836001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051611f1a91815260200190565b60405180910390a2600654611f39906001600160a01b031685856127ee565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9557600080fd5b505afa158015611fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcd9190612af7565b604051630590630f60e41b81523060048201526001600160a01b0384811660248301529192509082169063590630f090604401602060405180830381600087803b15801561201a57600080fd5b505af115801561202e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120529190612c73565b6120aa5760405162461bcd60e51b8152602060048201526024808201527f53696c6f3a206e6f7420736f6c76656e7420696e2062726967646520706f73696044820152633a34b7b760e11b60648201526084016107e3565b505060016005555050565b600260055414156120d85760405162461bcd60e51b81526004016107e390612e8c565b60026005556120e561125f565b6001600160a01b0383166000908152600d6020526040902054156121605760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f74206465706f736974202620626f72726f7720746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107e3565b600061216a610680565b600654909150612185906001600160a01b0316843085612635565b600061218f610680565b905061219b8282612f4d565b925060006121b66008546121ae60025490565b869190612611565b905083600860008282546121ca9190612ef4565b90915550506040518481526001600160a01b038716907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2612217868261281e565b5050600160055550505050565b600260055414156122475760405162461bcd60e51b81526004016107e390612e8c565b60026005556001600160a01b038316600090815260208190526040902054156122c75760405162461bcd60e51b815260206004820152602c60248201527f53696c6f3a2063616e6e6f7420626f72726f772026206465706f73697420746860448201526b19481cd85b5948185cdcd95d60a21b60648201526084016107e3565b806122d0610680565b101561231e5760405162461bcd60e51b815260206004820152601860248201527f53696c6f3a206c69717569646974792073686f7274616765000000000000000060448201526064016107e3565b600061232982610f83565b90506000612349600a5460095484866123429190612ef4565b9190612611565b6001600160a01b0386166000908152600d6020526040812080549293508392909190612376908490612ef4565b92505081905550806009600082825461238f9190612ef4565b9091555061239f90508284612ef4565b600a60008282546123b09190612ef4565b9250508190555081600c60008282546123c99190612ef4565b90915550506040518381526001600160a01b038616907fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367509060200160405180910390a2600654612423906001600160a01b031685856127ee565b50506001600555505050565b600061243a82610cbf565b1561244757506000919050565b60006124568333600019611d1b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635e46bea56040518163ffffffff1660e01b815260040160206040518083038186803b1580156124b357600080fd5b505afa1580156124c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124eb9190612af7565b604051630eaf8a1f60e11b81526001600160a01b03868116600483015233602483015291925090821690631d5f143e90604401602060405180830381600087803b15801561253857600080fd5b505af115801561254c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125709190612cae565b60408051848152602081018390529194506001600160a01b038616917f3c4b1d42b9c7fa283f6fe657533f6a5a8a7ad1d36f9ef1d9d89ad04485e10d2c910160405180910390a26125c084610cbf565b6126055760405162461bcd60e51b815260206004820152601660248201527514da5b1bce881d5cd95c881b9bdd081cdbdb1d995b9d60521b60448201526064016107e3565b5050919050565b505050565b600081158061261e575082155b1561262a5750826109d5565b82611d118386612f2e565b6040516001600160a01b0380851660248301528316604482015260648101829052610c7d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526128fd565b6001600160a01b0382166127005760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107e3565b6001600160a01b038216600090815260208190526040902054818110156127745760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107e3565b6001600160a01b03831660009081526020819052604081208383039055600280548492906127a3908490612f4d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261260c90849063a9059cbb60e01b90606401612669565b6001600160a01b0382166128745760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107e3565b80600260008282546128869190612ef4565b90915550506001600160a01b038216600090815260208190526040812080548392906128b3908490612ef4565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000612952826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129cf9092919063ffffffff16565b80519091501561260c57808060200190518101906129709190612c73565b61260c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107e3565b6060610827848460008585843b612a285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107e3565b600080866001600160a01b03168587604051612a449190612dc8565b60006040518083038185875af1925050503d8060008114612a81576040519150601f19603f3d011682016040523d82523d6000602084013e612a86565b606091505b5091509150612a96828286612aa1565b979650505050505050565b60608315612ab05750816109d5565b825115612ac05782518084602001fd5b8160405162461bcd60e51b81526004016107e39190612e4f565b600060208284031215612aec57600080fd5b81356109d581613028565b600060208284031215612b0957600080fd5b81516109d581613028565b60008060408385031215612b2757600080fd5b8235612b3281613028565b91506020830135612b4281613028565b809150509250929050565b600080600060608486031215612b6257600080fd5b8335612b6d81613028565b92506020840135612b7d81613028565b929592945050506040919091013590565b60008060408385031215612ba157600080fd5b8235612bac81613028565b946020939093013593505050565b60006020808385031215612bcd57600080fd5b823567ffffffffffffffff80821115612be557600080fd5b818501915085601f830112612bf957600080fd5b813581811115612c0b57612c0b613012565b8060051b9150612c1c848301612ec3565b8181528481019084860184860187018a1015612c3757600080fd5b600095505b83861015612c665780359450612c5185613028565b84835260019590950194918601918601612c3c565b5098975050505050505050565b600060208284031215612c8557600080fd5b815180151581146109d557600080fd5b600060208284031215612ca757600080fd5b5035919050565b600060208284031215612cc057600080fd5b5051919050565b600080600060608486031215612cdc57600080fd5b83359250602080850135612cef81613028565b9250604085013567ffffffffffffffff80821115612d0c57600080fd5b818701915087601f830112612d2057600080fd5b813581811115612d3257612d32613012565b612d44601f8201601f19168501612ec3565b91508082528884828501011115612d5a57600080fd5b80848401858401376000848284010152508093505050509250925092565b60008060408385031215612d8b57600080fd5b505080516020909101519092909150565b60008151808452612db4816020860160208601612f64565b601f01601f19169290920160200192915050565b60008251612dda818460208701612f64565b9190910192915050565b60018060a01b0384168152826020820152606060408201526000610f7a6060830184612d9c565b6020808252825182820181905260009190848201906040850190845b81811015612e4357835183529284019291840191600101612e27565b50909695505050505050565b6020815260006109d56020830184612d9c565b60208082526010908201526f29b4b6379d1037b7363ca937baba32b960811b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612eec57612eec613012565b604052919050565b60008219821115612f0757612f07612fe6565b500190565b600082612f2957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612f4857612f48612fe6565b500290565b600082821015612f5f57612f5f612fe6565b500390565b60005b83811015612f7f578181015183820152602001612f67565b83811115610c7d5750506000910152565b600181811c90821680612fa457607f821691505b60208210811415612fc557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612fdf57612fdf612fe6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109e657600080fdfea26469706673582212204bd4d1c2c81fa131d9ebed025483882e3c518bfaad0915edee1f0e4bb531ac3164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getCollateralValue(address)": {
        "details": "value of collateral (asset) provided by user"
      },
      "getCollateralization(address)": {
        "details": "ratio between value borrowed by user in this silo to collateral value provided in bridge pool for this silo"
      },
      "getDebtValue(address)": {
        "details": "value of asset borrowed by user"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 777,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 783,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 785,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 787,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 789,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 732,
        "contract": "contracts/Silo.sol:Silo",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4184,
        "contract": "contracts/Silo.sol:Silo",
        "label": "asset",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4186,
        "contract": "contracts/Silo.sol:Silo",
        "label": "lastUpdateTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4188,
        "contract": "contracts/Silo.sol:Silo",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4190,
        "contract": "contracts/Silo.sol:Silo",
        "label": "totalBorrowShare",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4192,
        "contract": "contracts/Silo.sol:Silo",
        "label": "totalBorrowAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4194,
        "contract": "contracts/Silo.sol:Silo",
        "label": "interestRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4196,
        "contract": "contracts/Silo.sol:Silo",
        "label": "protocolFees",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4200,
        "contract": "contracts/Silo.sol:Silo",
        "label": "borrowShare",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}