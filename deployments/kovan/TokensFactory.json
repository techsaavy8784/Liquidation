{
  "address": "0xe26952A7a29Ce7631D6c6A50111598E131034599",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewShareCollateralTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewShareDebtTokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "createShareCollateralToken",
      "outputs": [
        {
          "internalType": "contract IShareToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "createShareDebtToken",
      "outputs": [
        {
          "internalType": "contract IShareToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea0f383e595bb091b7bbd75fa3f56ac1adeb4e9650524946e83c3409f045b6af",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0xe26952A7a29Ce7631D6c6A50111598E131034599",
    "transactionIndex": 1,
    "gasUsed": "2443508",
    "logsBloom": "0x
    "blockHash": "0x9e79e9ce1d8d71c338aa1f939915578d158335eabf72e98acfd4c5886a863013",
    "transactionHash": "0xea0f383e595bb091b7bbd75fa3f56ac1adeb4e9650524946e83c3409f045b6af",
    "logs": [],
    "blockNumber": 29330923,
    "cumulativeGasUsed": "2495966",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a3e0f8b475b37a9b222b6e0a76db840e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewShareCollateralTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewShareDebtTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"createShareCollateralToken\",\"outputs\":[{\"internalType\":\"contract IShareToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"createShareDebtToken\",\"outputs\":[{\"internalType\":\"contract IShareToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokensFactory.sol\":\"TokensFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nerror AccessDenied();\\n\\nerror BridgeSiloExists(address bridgeSilo);\\n\\nerror BorrowNotPossible();\\n\\nerror DepositNotPossible(address asset, address depositor);\\n\\nerror ShareTransferNotAllowed();\\n\",\"keccak256\":\"0x3efd4befa380d62701a17a908dab22cb6aa3e5b2f9dadaf555640a7be75c1f4d\",\"license\":\"BUSL-1.1\"},\"contracts/TokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./utils/ShareCollateralToken.sol\\\";\\nimport \\\"./utils/ShareDebtToken.sol\\\";\\nimport \\\"./interfaces/ITokensFactory.sol\\\";\\n\\ncontract TokensFactory is ITokensFactory {\\n    event NewShareCollateralTokenCreated(address indexed token);\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    /// @inheritdoc ITokensFactory\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        override\\n        returns (IShareToken token)\\n    {\\n        token = new ShareCollateralToken(_name, _symbol, msg.sender, _asset);\\n        emit NewShareCollateralTokenCreated(address(token));\\n    }\\n\\n    /// @inheritdoc ITokensFactory\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        override\\n        returns (IShareToken token)\\n    {\\n        token = new ShareDebtToken(_name, _symbol, msg.sender, _asset);\\n        emit NewShareDebtTokenCreated(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xbab2498849b894e814e0abcf4aea18075a7351f4875901fb8b24091798f57e23\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5402c01c6593e7e95275080bcb24fe3c9b19103fb7e454419739845a34753fa1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IERC20R.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20R is IERC20 {\\n    /// @dev Emitted when the allowance of a `_receiver` for an `_owner` is set by\\n    ///         a call to {changeReceiveApproval}. `value` is the new allowance.\\n    event ReceiveApproval(address indexed _owner, address indexed _receiver, uint256 value);\\n\\n    /// @dev Atomically decreases the receive allowance granted to `owner` by the caller.\\n    ///         This is an alternative to {receive approve} that can be used as a mitigation for problems\\n    ///         described in {IERC20-approve}.\\n    ///\\n    ///         Emits an {ReceiveApproval} event indicating the updated receive allowance.\\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) external returns (bool);\\n\\n    /// @dev Atomically increases the receive allowance granted to `owner` by the caller.\\n    ///         This is an alternative to {receive approve} that can be used as a mitigation for problems\\n    ///         described in {IERC20-approve}.\\n    ///\\n    ///         Emits an {ReceiveApproval} event indicating the updated receive allowance.\\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) external returns (bool);\\n\\n    /// @dev Sets `_amount` as the allowance of `spender` over the caller's tokens.\\n    ///         Returns a boolean value indicating whether the operation succeeded.\\n    ///         IMPORTANT: Beware that changing an allowance with this method brings the risk\\n    ///         that someone may use both the old and the new allowance by unfortunate\\n    ///         transaction ordering. One possible solution to mitigate this race\\n    ///         condition is to first reduce the spender's allowance to 0 and set the\\n    ///         desired value afterwards:\\n    ///         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    ///         OR use increase/decrease approval method instead.\\n    ///\\n    ///         Emits an {ReceiveApproval} event.\\n    function setReceiveApproval(address _owner, uint256 _amount) external returns (bool);\\n\\n    /// @dev Returns the remaining number of tokens that `_receiver` will be allowed to receive on behalf of `_owner`\\n    ///         through {transferFrom}. This is zero by default.\\n    ///         This value changes when {approve} or {transferFrom} are called.\\n    function receiveAllowance(address _owner, address _receiver) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xde378ecef08fdc7b68ec2876024decb649f8c6656ef5baeb2e9e032e1ef32cd0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbe8f1c72072eb237aff8757d30b2ddbf01512ae560d2a015a040547ef11a82e6\",\"license\":\"MIT\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n}\\n\",\"keccak256\":\"0xcdb6f1a6c67d6f9ab29276e9577701ae6efbf8076ab31c1ac5963aff1385292b\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ERC20R.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IERC20R.sol\\\";\\n\\ncontract ERC20R is ERC20, IERC20R {\\n    mapping(address => mapping(address => uint256)) private _receiveAllowances;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    // TODO approve and call?\\n\\n    /// @inheritdoc IERC20R\\n    function setReceiveApproval(address owner, uint256 _amount) external virtual override returns (bool) {\\n        _setReceiveApproval(owner, _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20R\\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) public virtual override returns (bool) {\\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\\n\\n        unchecked {\\n            uint256 newAllowance = currentAllowance <= _subtractedValue ? 0 : currentAllowance - _subtractedValue;\\n            _setReceiveApproval(_owner, _msgSender(), newAllowance);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20R\\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) public virtual override returns (bool) {\\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\\n\\n        unchecked {\\n            uint256 newAllowance = type(uint256).max - currentAllowance <= _addedValue\\n                    ? type(uint256).max\\n                    : currentAllowance + _addedValue;\\n\\n            _setReceiveApproval(_owner, _msgSender(), newAllowance);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20R\\n    function receiveAllowance(address owner, address receiver) public view virtual override returns (uint256) {\\n        return _receiveAllowances[owner][receiver];\\n    }\\n\\n    function _setReceiveApproval(\\n        address _owner,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20R: changeReceiveApproval from the zero address\\\");\\n        require(_receiver != address(0), \\\"ERC20R: changeReceiveApproval to the zero address\\\");\\n\\n        _receiveAllowances[_owner][_receiver] = _amount;\\n\\n        emit ReceiveApproval(_owner, _receiver, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1cab14afc35a1fddf3074b7243a5eff1f1de3f24feb0bf8f5bcd664752bf4953\",\"license\":\"MIT\"},\"contracts/utils/ShareCollateralToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ShareToken.sol\\\";\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../Error.sol\\\";\\n\\ncontract ShareCollateralToken is ShareToken {\\n    constructor (\\n        string memory _name,\\n        string memory _symbol,\\n        address _silo,\\n        address _asset\\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {}\\n\\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256) internal view override {\\n        // if we minting or burning, Silo is responsible to check all necessary conditions\\n        if (!_isTransfer(_sender, _recipient)) {\\n            return;\\n        }\\n\\n        if (!silo.depositPossible(asset, _recipient)) {\\n            revert ShareTransferNotAllowed();\\n        }\\n    }\\n\\n    function _afterTokenTransfer(address _sender, address _recipient, uint256) internal view override {\\n        // if we minting or burning, Silo is responsible to check all necessary conditions\\n        if (_isTransfer(_sender, _recipient)) {\\n            require(silo.isSolvent(_sender), \\\"Transfer Collateral: sender not solvent after transfer\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d09f2b263fd8fe0b84f1b892431cbcd71def56297d4707f82eb0928ef4671e9\",\"license\":\"MIT\"},\"contracts/utils/ShareDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ShareToken.sol\\\";\\nimport \\\"./ERC20R.sol\\\";\\n\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../Error.sol\\\";\\n\\ncontract ShareDebtToken is ShareToken, ERC20R {\\n    constructor (\\n        string memory _name,\\n        string memory _symbol,\\n        address _silo,\\n        address _asset\\n    ) ERC20R(_name, _symbol) ShareToken(_silo, _asset) {}\\n\\n    function symbol() public view override(ShareToken, ERC20) returns (string memory) {\\n        return ERC20.symbol();\\n    }\\n\\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\\n        // if we minting or burning, Silo is responsible to check all necessary conditions\\n        if (!_isTransfer(_sender, _recipient)) {\\n            return;\\n        }\\n\\n        if (!silo.borrowPossible(asset, _recipient)) {\\n            revert ShareTransferNotAllowed();\\n        }\\n\\n        uint256 currentAllowance = receiveAllowance(_sender, _recipient);\\n        require(currentAllowance >= _amount, \\\"ERC20: transfer debt amount exceeds allowance\\\");\\n\\n        _setReceiveApproval(_sender, _recipient, currentAllowance - _amount);\\n    }\\n\\n    function _afterTokenTransfer(address _sender, address _recipient, uint256) internal view override {\\n        // if we minting or burning, Silo is responsible to check all necessary conditions\\n        if (_isTransfer(_sender, _recipient)) {\\n            // if we not minting and not burning, means we are transferring\\n            require(silo.isSolvent(_recipient), \\\"Transfer Debt: recipient not solvent after transfer\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x80908bea2f6c2a459d7226a54b08a0168eeaac8ee0e1cd620b93903bc09033f1\",\"license\":\"MIT\"},\"contracts/utils/ShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../interfaces/IShareToken.sol\\\";\\nimport \\\"../Error.sol\\\";\\n\\nabstract contract ShareToken is ERC20, IShareToken {\\n    ISilo public immutable silo;\\n\\n    /// @dev asset for which this tokens is deployed\\n    address public immutable asset;\\n\\n    modifier onlySilo {\\n        if (msg.sender != address(silo)) {\\n            revert AccessDenied();\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(address _silo, address _asset) {\\n        silo = ISilo(_silo);\\n        asset = _asset;\\n    }\\n\\n    function mint(address _account, uint256 _amount) external onlySilo override {\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external onlySilo override {\\n        _burn(_account, _amount);\\n    }\\n\\n    function symbol() public view virtual override(IShareToken, ERC20) returns (string memory) {\\n        return ERC20.symbol();\\n    }\\n\\n    /// @dev checks if operation is \\\"real\\\" transfer\\n    /// @param _sender sender address\\n    /// @param _recipient recipient address\\n    /// @return bool true if operation is real transfer, false if it is mint or burn\\n    function _isTransfer(address _sender, address _recipient) internal pure returns (bool) {\\n        // in order this check to be true, is is required to have:\\n        // require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        // require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        // on transfer. ERC20Upgradeable has them, so we good.\\n        return _sender != address(0) && _recipient != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x3fc41d989ab9f685d3d407e6285821eb7ca20374fdad1699bd8181bb3e248fb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612b5b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ec3ad1741461003b578063f8f38d1b1461006a575b600080fd5b61004e610049366004610218565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610218565b6100f7565b60008383338460405161008f90610171565b61009c94939291906102e9565b604051809103906000f0801580156100b8573d6000803e3d6000fd5b506040519091506001600160a01b038216907f94f128ebf0749edb8bb9d165d016ce008a16bc82cbd40cc81ded2be79140d02090600090a29392505050565b6000838333846040516101099061017e565b61011694939291906102e9565b604051809103906000f080158015610132573d6000803e3d6000fd5b506040519091506001600160a01b038216907fd97e9f840332422474cda9bb0976c87735b44cda62a3fe2a4e13e2e86267181290600090a29392505050565b6115778061034a83390190565b611265806118c183390190565b600082601f83011261019c57600080fd5b813567ffffffffffffffff808211156101b7576101b7610333565b604051601f8301601f19908116603f011681019082821181831017156101df576101df610333565b816040528381528660208588010111156101f857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561022d57600080fd5b833567ffffffffffffffff8082111561024557600080fd5b6102518783880161018b565b9450602086013591508082111561026757600080fd5b506102748682870161018b565b92505060408401356001600160a01b038116811461029157600080fd5b809150509250925092565b6000815180845260005b818110156102c2576020818501810151868301820152016102a6565b818111156102d4576000602083870101525b50601f01601f19169290920160200192915050565b6080815260006102fc608083018761029c565b828103602084015261030e818761029c565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b634e487b7160e01b600052604160045260246000fdfe60c06040523480156200001157600080fd5b50604051620015773803806200157783398101604081905262000034916200020b565b83838383838381600390805190602001906200005292919062000091565b5080516200006890600490602084019062000091565b5050506001600160601b0319606092831b8116608052911b1660a05250620002ed945050505050565b8280546200009f906200029a565b90600052602060002090601f016020900481019282620000c357600085556200010e565b82601f10620000de57805160ff19168380011785556200010e565b828001600101855582156200010e579182015b828111156200010e578251825591602001919060010190620000f1565b506200011c92915062000120565b5090565b5b808211156200011c576000815560010162000121565b80516001600160a01b03811681146200014f57600080fd5b919050565b600082601f8301126200016657600080fd5b81516001600160401b0380821115620001835762000183620002d7565b604051601f8301601f19908116603f01168101908282118183101715620001ae57620001ae620002d7565b81604052838152602092508683858801011115620001cb57600080fd5b600091505b83821015620001ef5785820183015181830184015290820190620001d0565b83821115620002015760008385830101525b9695505050505050565b600080600080608085870312156200022257600080fd5b84516001600160401b03808211156200023a57600080fd5b620002488883890162000154565b955060208701519150808211156200025f57600080fd5b506200026e8782880162000154565b9350506200027f6040860162000137565b91506200028f6060860162000137565b905092959194509250565b600181811c90821680620002af57607f821691505b60208210811415620002d157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c61123b6200033c600039600081816101b30152610d9e01526000818161031c015281816104e9015281816105d901528181610dce0152610f33015261123b6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806362221ca1116100ad5780639dc29fac116100715780639dc29fac146102a5578063a457c2d7146102b8578063a9059cbb146102cb578063dd62ed3e146102de578063eb3beb291461031757600080fd5b806362221ca11461021557806370a082311461024e57806375d680161461027757806380d4336e1461028a57806395d89b411461029d57600080fd5b8063313ce567116100f4578063313ce5671461018c57806334deadf21461019b57806338d52e0f146101ae57806339509351146101ed57806340c10f191461020057600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e61033e565b60405161013b9190611130565b60405180910390f35b6101576101523660046110e4565b6103d0565b604051901515815260200161013b565b6002545b60405190815260200161013b565b6101576101873660046110a8565b6103e6565b6040516012815260200161013b565b6101576101a93660046110e4565b610495565b6101d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013b565b6101576101fb3660046110e4565b6104a2565b61021361020e3660046110e4565b6104de565b005b61016b610223366004611075565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b61016b61025c36600461105a565b6001600160a01b031660009081526020819052604090205490565b6101576102853660046110e4565b610535565b6101576102983660046110e4565b61057d565b61012e6105bf565b6102136102b33660046110e4565b6105ce565b6101576102c63660046110e4565b610621565b6101576102d93660046110e4565b6106ba565b61016b6102ec366004611075565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101d57f000000000000000000000000000000000000000000000000000000000000000081565b60606003805461034d906111b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610379906111b4565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b5050505050905090565b60006103dd3384846106c7565b50600192915050565b60006103f38484846107ec565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561047d5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61048a85338584036106c7565b506001949350505050565b60006103dd8333846109d1565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103dd9185906104d9908690611185565b6106c7565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461052757604051634ca8886760e01b815260040160405180910390fd5b6105318282610b0c565b5050565b6001600160a01b038216600090815260056020908152604080832033845290915281205481811984101561056b5783820161056f565b6000195b905061048a85335b836109d1565b6001600160a01b038216600090815260056020908152604080832033845290915281205481838211156105b25783820361056f565b50600061048a8533610577565b60606105c9610bff565b905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461061757604051634ca8886760e01b815260040160405180910390fd5b6105318282610c0e565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156106a35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610474565b6106b033858584036106c7565b5060019392505050565b60006103dd3384846107ec565b6001600160a01b0383166107295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610474565b6001600160a01b03821661078a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610474565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166108505760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610474565b6001600160a01b0382166108b25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610474565b6108bd838383610d74565b6001600160a01b038316600090815260208190526040902054818110156109355760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610474565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061096c908490611185565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109b891815260200190565b60405180910390a36109cb848484610f05565b50505050565b6001600160a01b038316610a435760405162461bcd60e51b815260206004820152603360248201527f4552433230523a206368616e676552656365697665417070726f76616c2066726044820152726f6d20746865207a65726f206164647265737360681b6064820152608401610474565b6001600160a01b038216610ab35760405162461bcd60e51b815260206004820152603160248201527f4552433230523a206368616e676552656365697665417070726f76616c20746f60448201527020746865207a65726f206164647265737360781b6064820152608401610474565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527fa80d0efa8328d29034668db835056d5d5e5876f77ffc7bc09f1e06b2ba18b12191016107df565b6001600160a01b038216610b625760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610474565b610b6e60008383610d74565b8060026000828254610b809190611185565b90915550506001600160a01b03821660009081526020819052604081208054839290610bad908490611185565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361053160008383610f05565b60606004805461034d906111b4565b6001600160a01b038216610c6e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610474565b610c7a82600083610d74565b6001600160a01b03821660009081526020819052604090205481811015610cee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610474565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610d1d90849061119d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610d6f83600084610f05565b505050565b610d7e8383611015565b610d8757505050565b6040516379ea386160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015283811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063f3d470c29060440160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e48919061110e565b610e65576040516349bb6ced60e11b815260040160405180910390fd5b6001600160a01b0383811660009081526005602090815260408083209386168352929052205481811015610ef15760405162461bcd60e51b815260206004820152602d60248201527f45524332303a207472616e73666572206465627420616d6f756e74206578636560448201526c65647320616c6c6f77616e636560981b6064820152608401610474565b6109cb8484610f00858561119d565b6109d1565b610f0f8383611015565b15610d6f576040516338b51ce160e01b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906338b51ce19060240160206040518083038186803b158015610f7557600080fd5b505afa158015610f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fad919061110e565b610d6f5760405162461bcd60e51b815260206004820152603360248201527f5472616e7366657220446562743a20726563697069656e74206e6f7420736f6c6044820152723b32b73a1030b33a32b9103a3930b739b332b960691b6064820152608401610474565b60006001600160a01b0383161580159061103757506001600160a01b03821615155b9392505050565b80356001600160a01b038116811461105557600080fd5b919050565b60006020828403121561106c57600080fd5b6110378261103e565b6000806040838503121561108857600080fd5b6110918361103e565b915061109f6020840161103e565b90509250929050565b6000806000606084860312156110bd57600080fd5b6110c68461103e565b92506110d46020850161103e565b9150604084013590509250925092565b600080604083850312156110f757600080fd5b6111008361103e565b946020939093013593505050565b60006020828403121561112057600080fd5b8151801515811461103757600080fd5b600060208083528351808285015260005b8181101561115d57858101830151858201604001528201611141565b8181111561116f576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115611198576111986111ef565b500190565b6000828210156111af576111af6111ef565b500390565b600181811c908216806111c857607f821691505b602082108114156111e957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f322abfd051dcc4b3f1db69e87df2678ad6f95f759544b9f970b0eb37d040f4164736f6c6343000807003360c06040523480156200001157600080fd5b506040516200126538038062001265833981016040819052620000349162000207565b818185858160039080519060200190620000509291906200008d565b508051620000669060049060208401906200008d565b5050506001600160601b0319606092831b8116608052911b1660a05250620002e992505050565b8280546200009b9062000296565b90600052602060002090601f016020900481019282620000bf57600085556200010a565b82601f10620000da57805160ff19168380011785556200010a565b828001600101855582156200010a579182015b828111156200010a578251825591602001919060010190620000ed565b50620001189291506200011c565b5090565b5b808211156200011857600081556001016200011d565b80516001600160a01b03811681146200014b57600080fd5b919050565b600082601f8301126200016257600080fd5b81516001600160401b03808211156200017f576200017f620002d3565b604051601f8301601f19908116603f01168101908282118183101715620001aa57620001aa620002d3565b81604052838152602092508683858801011115620001c757600080fd5b600091505b83821015620001eb5785820183015181830184015290820190620001cc565b83821115620001fd5760008385830101525b9695505050505050565b600080600080608085870312156200021e57600080fd5b84516001600160401b03808211156200023657600080fd5b620002448883890162000150565b955060208701519150808211156200025b57600080fd5b506200026a8782880162000150565b9350506200027b6040860162000133565b91506200028b6060860162000133565b905092959194509250565b600181811c90821680620002ab57607f821691505b60208210811415620002cd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c610f2d62000338600039600081816101740152610b2d01526000818161027e0152818161043e015281816104a401528181610b5d0152610c220152610f2d6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f1911610097578063a457c2d711610066578063a457c2d71461021a578063a9059cbb1461022d578063dd62ed3e14610240578063eb3beb291461027957600080fd5b806340c10f19146101c157806370a08231146101d657806395d89b41146101ff5780639dc29fac1461020757600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce5671461016057806338d52e0f1461016f57806339509351146101ae57600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b6101026102a0565b60405161010f9190610e22565b60405180910390f35b61012b610126366004610dd6565b610332565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610d9a565b610348565b6040516012815260200161010f565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b61012b6101bc366004610dd6565b6103f7565b6101d46101cf366004610dd6565b610433565b005b61013f6101e4366004610d4c565b6001600160a01b031660009081526020819052604090205490565b61010261048a565b6101d4610215366004610dd6565b610499565b61012b610228366004610dd6565b6104ec565b61012b61023b366004610dd6565b610585565b61013f61024e366004610d67565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b6060600380546102af90610ea6565b80601f01602080910402602001604051908101604052809291908181526020018280546102db90610ea6565b80156103285780601f106102fd57610100808354040283529160200191610328565b820191906000526020600020905b81548152906001019060200180831161030b57829003601f168201915b5050505050905090565b600061033f338484610592565b50600192915050565b60006103558484846106b6565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103df5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103ec8533858403610592565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161033f91859061042e908690610e77565b610592565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461047c57604051634ca8886760e01b815260040160405180910390fd5b610486828261089b565b5050565b606061049461098e565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e257604051634ca8886760e01b815260040160405180910390fd5b610486828261099d565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561056e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d6565b61057b3385858403610592565b5060019392505050565b600061033f3384846106b6565b6001600160a01b0383166105f45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d6565b6001600160a01b0382166106555760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661071a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d6565b6001600160a01b03821661077c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d6565b610787838383610b03565b6001600160a01b038316600090815260208190526040902054818110156107ff5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d6565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610836908490610e77565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161088291815260200190565b60405180910390a3610895848484610bf4565b50505050565b6001600160a01b0382166108f15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d6565b6108fd60008383610b03565b806002600082825461090f9190610e77565b90915550506001600160a01b0382166000908152602081905260408120805483929061093c908490610e77565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361048660008383610bf4565b6060600480546102af90610ea6565b6001600160a01b0382166109fd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d6565b610a0982600083610b03565b6001600160a01b03821660009081526020819052604090205481811015610a7d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d6565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610aac908490610e8f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610afe83600084610bf4565b505050565b610b0d8383610d07565b610b1657505050565b60405163a6e08aa160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015283811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063a6e08aa19060440160206040518083038186803b158015610b9f57600080fd5b505afa158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190610e00565b610afe576040516349bb6ced60e11b815260040160405180910390fd5b610bfe8383610d07565b15610afe576040516338b51ce160e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016906338b51ce19060240160206040518083038186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c9190610e00565b610afe5760405162461bcd60e51b815260206004820152603660248201527f5472616e7366657220436f6c6c61746572616c3a2073656e646572206e6f742060448201527539b7b63b32b73a1030b33a32b9103a3930b739b332b960511b60648201526084016103d6565b60006001600160a01b03831615801590610d2957506001600160a01b03821615155b9392505050565b80356001600160a01b0381168114610d4757600080fd5b919050565b600060208284031215610d5e57600080fd5b610d2982610d30565b60008060408385031215610d7a57600080fd5b610d8383610d30565b9150610d9160208401610d30565b90509250929050565b600080600060608486031215610daf57600080fd5b610db884610d30565b9250610dc660208501610d30565b9150604084013590509250925092565b60008060408385031215610de957600080fd5b610df283610d30565b946020939093013593505050565b600060208284031215610e1257600080fd5b81518015158114610d2957600080fd5b600060208083528351808285015260005b81811015610e4f57858101830151858201604001528201610e33565b81811115610e61576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610e8a57610e8a610ee1565b500190565b600082821015610ea157610ea1610ee1565b500390565b600181811c90821680610eba57607f821691505b60208210811415610edb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220367a3166783311d744c422ffd4b271ffe599fec83c42ea39e4bbfc8ff4845a3964736f6c63430008070033a2646970667358221220f6187c5d171f6a5fd95531a59cf170349a2e4fdf080da965edfa4184945dc86d64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}