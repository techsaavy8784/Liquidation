{
  "address": "0x4521C2b96E651563828C965E16b202bADeB405bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repository",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NewOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "OracleForAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetsOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "changeBestOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_rawSearch",
          "type": "bool"
        }
      ],
      "name": "findBestOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_base",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredOracles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleId",
          "type": "uint256"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repository",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setBestOracleForAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "bestOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "transferPendingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x407cf0a5494214ac0b3fddf3f1a37cb74d6ba222cdfd611ed5ed17f2357846cc",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0x4521C2b96E651563828C965E16b202bADeB405bF",
    "transactionIndex": 4,
    "gasUsed": "1249782",
    "logsBloom": "0x
    "blockHash": "0x17e5cd52aa89890b6aa3ef70ab6f67bf8b1f219942f42eebac234852df60fd17",
    "transactionHash": "0x407cf0a5494214ac0b3fddf3f1a37cb74d6ba222cdfd611ed5ed17f2357846cc",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 29331022,
        "transactionHash": "0x407cf0a5494214ac0b3fddf3f1a37cb74d6ba222cdfd611ed5ed17f2357846cc",
        "address": "0x4521C2b96E651563828C965E16b202bADeB405bF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e1c4d796e389cb96d644dd9a98cdbee99ec4440"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x17e5cd52aa89890b6aa3ef70ab6f67bf8b1f219942f42eebac234852df60fd17"
      }
    ],
    "blockNumber": 29331022,
    "cumulativeGasUsed": "1612542",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0x3D67cb6C1E98B50B15c870E924cB4b4396EaDF6c"
  ],
  "numDeployments": 1,
  "solcInputHash": "a3e0f8b475b37a9b222b6e0a76db840e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repository\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"OracleForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"changeBestOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_rawSearch\",\"type\":\"bool\"}],\"name\":\"findBestOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleId\",\"type\":\"uint256\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setBestOracleForAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bestOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"transferPendingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Transfers ownership of the contract to a pending owner Can only be called by the pending owner.\"},\"findBestOracle(address,bool)\":{\"params\":{\"_asset\":\"asset address\",\"_rawSearch\":\"boolean         - if FALSE, it performs search with all requirements, for example, TWAP readiness         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)           that needs to be done for guarded silo creations\"}},\"initOracleForAsset(address,address,bytes)\":{\"details\":\"this method does two things:      - init new asset if oracle is provided      - search for best oracle and updates if we found better\",\"params\":{\"_asset\":\"address od token to be initialise\",\"_data\":\"(optional) custom data required for asset initialisation\",\"_oracle\":\"(optional) address of silo oracle that will be initialised with new asset        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPendingOwnership(address)\":{\"details\":\"Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"assetsOracles\":{\"params\":{\"_asset\":\"address\"},\"return\":\"oracle address assigned for asset\",\"returns\":{\"_0\":\"oracle address assigned for asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initOracleForAsset(address,address,bytes)\":{\"notice\":\"initialise oracle for asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloOracleRepository.sol\":\"SiloOracleRepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./interfaces/ISiloOracleRepository.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./utils/TwoStepOwnable.sol\\\";\\n\\ncontract SiloOracleRepository is ISiloOracleRepository, TwoStepOwnable {\\n    uint256 public constant ONE = 10**18;\\n\\n    address public immutable repository;\\n    address public immutable override quoteToken;\\n\\n    mapping(address => bool) public registeredOracles;\\n    mapping(address => address) public override assetsOracles;\\n\\n    address[] public oracles;\\n\\n    event NewOracle(address newOracle, uint256 id);\\n    event OracleRemoved(address oracle);\\n    event OracleForAsset(address oracle, address asset);\\n\\n    modifier onlyRepository() {\\n        require(msg.sender == address(repository), \\\"SiloOracleRepository: onlyRepository\\\");\\n        _;\\n    }\\n\\n    constructor(address _quoteToken, address _repository) {\\n        repository = _repository;\\n        quoteToken = _quoteToken;\\n    }\\n\\n    function addOracle(address _oracle) external override onlyOwner {\\n        require(!registeredOracles[_oracle], \\\"SiloOracleRepository: oracle already exists\\\");\\n        require(IOracle(_oracle).isSiloOracle(), \\\"SiloOracleRepository: not an oracle\\\");\\n        require(IOracle(_oracle).quoteToken() == quoteToken, \\\"SiloOracleRepository: invalid quoteToken in oracle\\\");\\n\\n        emit NewOracle(_oracle, oracles.length);\\n\\n        registeredOracles[_oracle] = true;\\n        oracles.push(_oracle);\\n    }\\n\\n    function removeOracle(uint256 _oracleId) external override onlyOwner {\\n        address oracleToRemove = oracles[_oracleId];\\n        require(registeredOracles[oracleToRemove], \\\"SiloOracleRepository: oracle does not exist\\\");\\n\\n        emit OracleRemoved(oracleToRemove);\\n\\n        registeredOracles[oracleToRemove] = false;\\n        oracles[_oracleId] = oracles[oracles.length - 1];\\n        oracles.pop();\\n    }\\n\\n    /// @notice initialise oracle for asset\\n    /// @dev this method does two things:\\n    ///      - init new asset if oracle is provided\\n    ///      - search for best oracle and updates if we found better\\n    /// @param _asset address od token to be initialise\\n    /// @param _oracle (optional) address of silo oracle that will be initialised with new asset\\n    ///        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway\\n    /// @param _data (optional) custom data required for asset initialisation\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external override {\\n        if (_oracle != address(0)) {\\n            IOracle(_oracle).initAsset(_asset, _data);\\n        }\\n\\n        _findAndSaveBestOracleForAsset(_asset);\\n    }\\n\\n    function setBestOracleForAsset(address _asset) external override returns (address bestOracle) {\\n        return _findAndSaveBestOracleForAsset(_asset);\\n    }\\n\\n    function changeBestOracleForAsset(address _asset, address _oracle) external virtual override {\\n        require(registeredOracles[_oracle], \\\"SiloOracleRepository: oracle not registered\\\");\\n\\n        address assetOracles = assetsOracles[_asset];\\n        require(assetOracles != address(0), \\\"SiloOracleRepository: use setBestOracleForAsset to init asset\\\");\\n\\n        uint256 currentLiquidity = IOracle(assetOracles).getQuoteLiquidity(_asset);\\n        uint256 suggestedLiquidity = IOracle(_oracle).getQuoteLiquidity(_asset);\\n        require(suggestedLiquidity >= currentLiquidity, \\\"SiloOracleRepository: chosen oracle is worse\\\");\\n\\n        _setOracleForAsset(_asset, _oracle);\\n    }\\n\\n    /// @inheritdoc ISiloOracleRepository\\n    function findBestOracle(address _asset, bool _rawSearch) external view override returns (address) {\\n        return _findBestOracle(_asset, _rawSearch);\\n    }\\n\\n    function oraclesCount() external view returns (uint256) {\\n        return oracles.length;\\n    }\\n\\n    function oracleList() external view returns (address[] memory) {\\n        return oracles;\\n    }\\n\\n    function getPrice(address _base) public view override virtual returns (uint256) {\\n        if (_base == quoteToken) return ONE;\\n\\n        return IOracle(assetsOracles[_base]).getPrice(_base);\\n    }\\n\\n    /// @notice search for best oracle for asset and saves it\\n    function _findAndSaveBestOracleForAsset(address _asset) internal returns (address bestOracle) {\\n        bestOracle = _findBestOracle(_asset, false);\\n        require(bestOracle != address(0), \\\"SiloOracleRepository: can not find oracle for asset\\\");\\n\\n        _setOracleForAsset(_asset, bestOracle);\\n    }\\n\\n    function _setOracleForAsset(address _asset, address _oracle) internal {\\n        emit OracleForAsset(_asset, _oracle);\\n        IOracle(_oracle).notifyAboutChoice(_asset);\\n        assetsOracles[_asset] = _oracle;\\n    }\\n\\n    /// @param _asset asset address for which we want to find best oracle\\n    /// @param _rawLiquidity if TRUE: it will return original, raw liquidity\\n    ///         if FALSE: it will return \\\"processed\\\" liquidity that we using internally\\n    ///         eg. when FALSE, liquidity will return 1 when pool not ready for TWAP\\n    function _findBestOracle(address _asset, bool _rawLiquidity) internal view returns (address bestOracle) {\\n        uint256 maxLiquidity;\\n\\n        for (uint256 i = 0; i < oracles.length; i++) {\\n            address oracle = oracles[i];\\n            uint256 quoteLiquidity = _rawLiquidity\\n                ? IOracle(oracle).getQuoteLiquidityRaw(_asset)\\n                : IOracle(oracle).getQuoteLiquidity(_asset);\\n\\n            if (quoteLiquidity > maxLiquidity) {\\n                bestOracle = oracle;\\n                maxLiquidity = quoteLiquidity;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x290452e52b2d0df57278c24158a3b71c71469d446700c3c70802d1bb54367324\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title Common interface for Silo oracles\\ninterface IOracle {\\n    /// @notice initAsset can be used to do custom setup for new asset\\n    /// @dev Should be used for initialisation of asset for oracle (if initialisation is needed).\\n    ///      It sets all necessary data that are require to call `getPrice` for the asset.\\n    ///      Throws if initialisation fail.\\n    ///      When called multiple times it does not override better settings and it might throws.\\n    ///      e.g.: if with current settings we getting higher liquidity pool, initialisation should have no effect\\n    /// @param _asset token address (base token) for which we initialising oracle\\n    /// @param _data additional data (optional) that is required for initialisation process\\n    function initAsset(address _asset, bytes calldata _data) external;\\n\\n    /// @notice when changing oracle, notify that we start using it for asset.\\n    /// @dev It is used when we discover, that this oracle is better for asset.\\n    ///      If we need to setup anything in additional, in order to use this oracle for asset, it should be done\\n    ///      inside this method. At this point asset should be initialised (so we have all necessary data for it).\\n    ///      Throws if this oracle can not be use for provided asset.\\n    /// @param _asset token address (base token) for which this oracle will be used from now on.\\n    function notifyAboutChoice(address _asset) external;\\n\\n    /// @dev calculates TWAP price for asset/quote\\n    ///         It unifies all tokens decimal to 18, examples:\\n    ///         - if asses == quote it returns 1e18\\n    ///         - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18\\n    /// @return price of asses with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Informs if oracle has all required settings for asset and can provide data for it\\n    /// @dev It is not always a case, that asset must be initialized before it can be use by oracle.\\n    ///      Some oracles implementations can work out of the box for any assets.\\n    ///      If asset is not supported, it does not mean it can not be used,\\n    ///      it might need initialization to become supported.\\n    /// @param _asset token address\\n    /// @return true is oracle is able to provide price for asset\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    // TODO should we have minimalRequiredLiquidity?\\n\\n    /// @notice Search for highest possible liquidity for quote token.\\n    ///         This method is used to establish, if pool is better (not less liquidity) or worse (less liquidity)\\n    /// @dev For some oracles, asset must be initialized in order to be able to run this method\\n    ///      or there might be some additional (dedicated to oracle) settings, that must be set up in order search works\\n    ///      Implementation of this method must be dome in a way, that when asset is initialized and we have\\n    ///      any additional required settings in place, it will highest existing liquidity pool for asset.\\n    ///      It is possible, that it will throw on invalid data or uninitialized asset.\\n    /// @return liquidity of quote token for specified asset\\n    function getQuoteLiquidity(address _asset) external view returns (uint256 liquidity);\\n\\n    /// @dev protocol should NOT use this method\\n    ///         this is only for off-chain checks for raw liquidity\\n    ///         NOTICE: sometimes it might be required to setup oracle, so it can find required pool\\n    ///         eg. for UniswapV3, if new pool will be created with new fee that is not present in oracle contract\\n    ///         you have to add this new fee, then the pool can be found and `getQuoteLiquidityRaw` can be used\\n    function getQuoteLiquidityRaw(address _asset) external view returns (uint256 liquidity);\\n\\n    /// @return address of quote token that must be a copy of SiloBridgePool.asset\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is SiloOracle\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    ///      but this should NOT be treated as security check\\n    /// @return always true\\n    function isSiloOracle() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x575f292f66e6c82c42fc0a3ab7bf9b2d032401a3635f1ebaf6848ed860a20732\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloOracleRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISiloOracleRepository {\\n    function addOracle(address oracle) external;\\n    function removeOracle(uint256 oracleId) external;\\n    function initOracleForAsset(address _asset, address _oracle, bytes calldata _data) external;\\n    function setBestOracleForAsset(address _asset) external returns (address bestOracle);\\n    function changeBestOracleForAsset(address asset, address oracle) external;\\n\\n    /// @param _asset asset address\\n    /// @param _rawSearch boolean\\n    ///         - if FALSE, it performs search with all requirements, for example, TWAP readiness\\n    ///         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)\\n    ///           that needs to be done for guarded silo creations\\n    function findBestOracle(address _asset, bool _rawSearch) external view returns (address);\\n\\n    /// @return price TWAP price of a token\\n    function getPrice(address token) external view returns (uint256 price);\\n\\n    /// @param _asset address\\n    /// @return oracle address assigned for asset\\n    function assetsOracles(address _asset) external view returns (address oracle);\\n\\n    function quoteToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6734db1e43519390a7b4247bfe0bae80b5c23cfc88bb0b041604a6bd85f5c8dd\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TwoStepOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nabstract contract TwoStepOwnable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\\n        emit OwnershipPending(owner(), newPendingOwner);\\n        _pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a pending owner\\n     * Can only be called by the pending owner.\\n     */\\n    function acceptOwnership() public virtual {\\n        require(msg.sender == pendingOwner(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _setOwner(pendingOwner());\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4138f2880b1dd0e8697c2ed9b96465df675acf70751fb827b0ab97c2068d60c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001663380380620016638339810160408190526200003491620000cc565b6200003f336200005f565b6001600160601b0319606091821b811660805291901b1660a05262000104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000c757600080fd5b919050565b60008060408385031215620000e057600080fd5b620000eb83620000af565b9150620000fb60208401620000af565b90509250929050565b60805160601c60a05160601c6115256200013e60003960008181610187015281816106dd0152610c90015260006102e701526115256000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637bb0e9e8116100b8578063df5dd1a51161007c578063df5dd1a51461028b578063e30c39781461029e578063e4362b23146102af578063e9176c60146102e2578063f138420014610309578063f2fde38b1461031c57600080fd5b80637bb0e9e81461023057806380935dbf146102435780638da5cb5b14610256578063c2ee3a0814610267578063d58bcd041461027657600080fd5b806341976e09116100ff57806341976e09146101e45780635b69a7d814610205578063715018a61461021857806376f709001461022057806379ba50971461022857600080fd5b80630ef0e5e81461013c578063217a4b70146101825780632979f8f1146101a95780633278c694146101be578063332f3c21146101d1575b600080fd5b61016561014a366004611214565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101bc6101b736600461124e565b61032f565b005b6101bc6101cc366004611214565b6105b2565b6101bc6101df366004611287565b61065e565b6101f76101f2366004611214565b6106d9565b604051908152602001610179565b610165610213366004611364565b6107b7565b6101bc6107e1565b6004546101f7565b6101bc610826565b61016561023e366004611214565b6108bc565b6101bc610251366004611364565b6108c7565b6000546001600160a01b0316610165565b6101f7670de0b6b3a764000081565b61027e610aad565b60405161017991906113d6565b6101bc610299366004611214565b610b0f565b6001546001600160a01b0316610165565b6102d26102bd366004611214565b60026020526000908152604090205460ff1681565b6040519015158152602001610179565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b610165610317366004611319565b610e46565b6101bc61032a366004611214565b610e59565b6001600160a01b03811660009081526002602052604090205460ff166103b05760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c65206e6f7460448201526a081c9959da5cdd195c995960aa1b60648201526084015b60405180910390fd5b6001600160a01b03808316600090815260036020526040902054168061043e5760405162461bcd60e51b815260206004820152603d60248201527f53696c6f4f7261636c655265706f7369746f72793a207573652073657442657360448201527f744f7261636c65466f72417373657420746f20696e697420617373657400000060648201526084016103a7565b604051630b8abf1d60e31b81526001600160a01b03848116600483015260009190831690635c55f8e89060240160206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061137d565b604051630b8abf1d60e31b81526001600160a01b038681166004830152919250600091851690635c55f8e89060240160206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a919061137d565b9050818110156105a15760405162461bcd60e51b815260206004820152602c60248201527f53696c6f4f7261636c655265706f7369746f72793a2063686f73656e206f726160448201526b636c6520697320776f72736560a01b60648201526084016103a7565b6105ab8585610f03565b5050505050565b336105c56000546001600160a01b031690565b6001600160a01b0316146105eb5760405162461bcd60e51b81526004016103a790611423565b806001600160a01b03166106076000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316156106d057604051635e3263fb60e01b81526001600160a01b03841690635e3263fb9061069d90879086908690600401611396565b600060405180830381600087803b1580156106b757600080fd5b505af11580156106cb573d6000803e3d6000fd5b505050505b6105ab84610fcf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156107245750670de0b6b3a7640000919050565b6001600160a01b03828116600081815260036020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b1919061137d565b92915050565b600481815481106107c757600080fd5b6000918252602090912001546001600160a01b0316905081565b336107f46000546001600160a01b031690565b6001600160a01b03161461081a5760405162461bcd60e51b81526004016103a790611423565b610824600061105f565b565b6001546001600160a01b031633146108905760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b60648201526084016103a7565b6108aa6108a56001546001600160a01b031690565b61105f565b600180546001600160a01b0319169055565b60006107b182610fcf565b336108da6000546001600160a01b031690565b6001600160a01b0316146109005760405162461bcd60e51b81526004016103a790611423565b600060048281548110610915576109156114b6565b60009182526020808320909101546001600160a01b0316808352600290915260409091205490915060ff166109a05760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016103a7565b6040516001600160a01b03821681527f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7129060200160405180910390a16001600160a01b0381166000908152600260205260409020805460ff1916905560048054610a0c90600190611458565b81548110610a1c57610a1c6114b6565b600091825260209091200154600480546001600160a01b039092169184908110610a4857610a486114b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610a8757610a876114a0565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b60606004805480602002602001604051908101604052809291908181526020018280548015610b0557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae7575b5050505050905090565b33610b226000546001600160a01b031690565b6001600160a01b031614610b485760405162461bcd60e51b81526004016103a790611423565b6001600160a01b03811660009081526002602052604090205460ff1615610bc55760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520616c7260448201526a656164792065786973747360a81b60648201526084016103a7565b806001600160a01b031663ecdcb0ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611347565b610c8e5760405162461bcd60e51b815260206004820152602360248201527f53696c6f4f7261636c655265706f7369746f72793a206e6f7420616e206f7261604482015262636c6560e81b60648201526084016103a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d299190611231565b6001600160a01b031614610d9a5760405162461bcd60e51b815260206004820152603260248201527f53696c6f4f7261636c655265706f7369746f72793a20696e76616c69642071756044820152716f7465546f6b656e20696e206f7261636c6560701b60648201526084016103a7565b600454604080516001600160a01b038416815260208101929092527f45f1932942561e7d7562d1677fd99002dd4106d397ed7b756168542c4c5c0fac910160405180910390a16001600160a01b03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b6000610e5283836110af565b9392505050565b33610e6c6000546001600160a01b031690565b6001600160a01b031614610e925760405162461bcd60e51b81526004016103a790611423565b6001600160a01b038116610ef75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a7565b610f008161105f565b50565b604080516001600160a01b038085168252831660208201527f87987abe74f65c11e5ed91847ea2a5d8f269929df44aab920a9dc3799e29ec70910160405180910390a16040516326b9797f60e01b81526001600160a01b0383811660048301528216906326b9797f90602401600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b505050506001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000610fdc8260006110af565b90506001600160a01b0381166110505760405162461bcd60e51b815260206004820152603360248201527f53696c6f4f7261636c655265706f7369746f72793a2063616e206e6f742066696044820152721b99081bdc9858db1948199bdc88185cdcd95d606a1b60648201526084016103a7565b61105a8282610f03565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060005b60045481101561120c576000600482815481106110d4576110d46114b6565b60009182526020822001546001600160a01b031691508561116d57604051630b8abf1d60e31b81526001600160a01b038881166004830152831690635c55f8e89060240160206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611168919061137d565b6111e6565b604051631befe8b360e21b81526001600160a01b038881166004830152831690636fbfa2cc9060240160206040518083038186803b1580156111ae57600080fd5b505afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e6919061137d565b9050838111156111f7578194508093505b505080806112049061146f565b9150506110b5565b505092915050565b60006020828403121561122657600080fd5b8135610e52816114cc565b60006020828403121561124357600080fd5b8151610e52816114cc565b6000806040838503121561126157600080fd5b823561126c816114cc565b9150602083013561127c816114cc565b809150509250929050565b6000806000806060858703121561129d57600080fd5b84356112a8816114cc565b935060208501356112b8816114cc565b9250604085013567ffffffffffffffff808211156112d557600080fd5b818701915087601f8301126112e957600080fd5b8135818111156112f857600080fd5b88602082850101111561130a57600080fd5b95989497505060200194505050565b6000806040838503121561132c57600080fd5b8235611337816114cc565b9150602083013561127c816114e1565b60006020828403121561135957600080fd5b8151610e52816114e1565b60006020828403121561137657600080fd5b5035919050565b60006020828403121561138f57600080fd5b5051919050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6020808252825182820181905260009190848201906040850190845b818110156114175783516001600160a01b0316835292840192918401916001016113f2565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561146a5761146a61148a565b500390565b60006000198214156114835761148361148a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610f0057600080fd5b8015158114610f0057600080fdfea2646970667358221220439197c0e171d11cd4fe7abdaafe7a1c6cdee38926232a27e8cc905606bb0a4f64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637bb0e9e8116100b8578063df5dd1a51161007c578063df5dd1a51461028b578063e30c39781461029e578063e4362b23146102af578063e9176c60146102e2578063f138420014610309578063f2fde38b1461031c57600080fd5b80637bb0e9e81461023057806380935dbf146102435780638da5cb5b14610256578063c2ee3a0814610267578063d58bcd041461027657600080fd5b806341976e09116100ff57806341976e09146101e45780635b69a7d814610205578063715018a61461021857806376f709001461022057806379ba50971461022857600080fd5b80630ef0e5e81461013c578063217a4b70146101825780632979f8f1146101a95780633278c694146101be578063332f3c21146101d1575b600080fd5b61016561014a366004611214565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101bc6101b736600461124e565b61032f565b005b6101bc6101cc366004611214565b6105b2565b6101bc6101df366004611287565b61065e565b6101f76101f2366004611214565b6106d9565b604051908152602001610179565b610165610213366004611364565b6107b7565b6101bc6107e1565b6004546101f7565b6101bc610826565b61016561023e366004611214565b6108bc565b6101bc610251366004611364565b6108c7565b6000546001600160a01b0316610165565b6101f7670de0b6b3a764000081565b61027e610aad565b60405161017991906113d6565b6101bc610299366004611214565b610b0f565b6001546001600160a01b0316610165565b6102d26102bd366004611214565b60026020526000908152604090205460ff1681565b6040519015158152602001610179565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b610165610317366004611319565b610e46565b6101bc61032a366004611214565b610e59565b6001600160a01b03811660009081526002602052604090205460ff166103b05760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c65206e6f7460448201526a081c9959da5cdd195c995960aa1b60648201526084015b60405180910390fd5b6001600160a01b03808316600090815260036020526040902054168061043e5760405162461bcd60e51b815260206004820152603d60248201527f53696c6f4f7261636c655265706f7369746f72793a207573652073657442657360448201527f744f7261636c65466f72417373657420746f20696e697420617373657400000060648201526084016103a7565b604051630b8abf1d60e31b81526001600160a01b03848116600483015260009190831690635c55f8e89060240160206040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061137d565b604051630b8abf1d60e31b81526001600160a01b038681166004830152919250600091851690635c55f8e89060240160206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a919061137d565b9050818110156105a15760405162461bcd60e51b815260206004820152602c60248201527f53696c6f4f7261636c655265706f7369746f72793a2063686f73656e206f726160448201526b636c6520697320776f72736560a01b60648201526084016103a7565b6105ab8585610f03565b5050505050565b336105c56000546001600160a01b031690565b6001600160a01b0316146105eb5760405162461bcd60e51b81526004016103a790611423565b806001600160a01b03166106076000546001600160a01b031690565b6001600160a01b03167f3c672e6c16e239c29e969deaf4eae15d7002350bf5490175e7481155af04c83a60405160405180910390a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316156106d057604051635e3263fb60e01b81526001600160a01b03841690635e3263fb9061069d90879086908690600401611396565b600060405180830381600087803b1580156106b757600080fd5b505af11580156106cb573d6000803e3d6000fd5b505050505b6105ab84610fcf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156107245750670de0b6b3a7640000919050565b6001600160a01b03828116600081815260036020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b1919061137d565b92915050565b600481815481106107c757600080fd5b6000918252602090912001546001600160a01b0316905081565b336107f46000546001600160a01b031690565b6001600160a01b03161461081a5760405162461bcd60e51b81526004016103a790611423565b610824600061105f565b565b6001546001600160a01b031633146108905760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b60648201526084016103a7565b6108aa6108a56001546001600160a01b031690565b61105f565b600180546001600160a01b0319169055565b60006107b182610fcf565b336108da6000546001600160a01b031690565b6001600160a01b0316146109005760405162461bcd60e51b81526004016103a790611423565b600060048281548110610915576109156114b6565b60009182526020808320909101546001600160a01b0316808352600290915260409091205490915060ff166109a05760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b60648201526084016103a7565b6040516001600160a01b03821681527f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7129060200160405180910390a16001600160a01b0381166000908152600260205260409020805460ff1916905560048054610a0c90600190611458565b81548110610a1c57610a1c6114b6565b600091825260209091200154600480546001600160a01b039092169184908110610a4857610a486114b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610a8757610a876114a0565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b60606004805480602002602001604051908101604052809291908181526020018280548015610b0557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae7575b5050505050905090565b33610b226000546001600160a01b031690565b6001600160a01b031614610b485760405162461bcd60e51b81526004016103a790611423565b6001600160a01b03811660009081526002602052604090205460ff1615610bc55760405162461bcd60e51b815260206004820152602b60248201527f53696c6f4f7261636c655265706f7369746f72793a206f7261636c6520616c7260448201526a656164792065786973747360a81b60648201526084016103a7565b806001600160a01b031663ecdcb0ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611347565b610c8e5760405162461bcd60e51b815260206004820152602360248201527f53696c6f4f7261636c655265706f7369746f72793a206e6f7420616e206f7261604482015262636c6560e81b60648201526084016103a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663217a4b706040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d299190611231565b6001600160a01b031614610d9a5760405162461bcd60e51b815260206004820152603260248201527f53696c6f4f7261636c655265706f7369746f72793a20696e76616c69642071756044820152716f7465546f6b656e20696e206f7261636c6560701b60648201526084016103a7565b600454604080516001600160a01b038416815260208101929092527f45f1932942561e7d7562d1677fd99002dd4106d397ed7b756168542c4c5c0fac910160405180910390a16001600160a01b03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b6000610e5283836110af565b9392505050565b33610e6c6000546001600160a01b031690565b6001600160a01b031614610e925760405162461bcd60e51b81526004016103a790611423565b6001600160a01b038116610ef75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a7565b610f008161105f565b50565b604080516001600160a01b038085168252831660208201527f87987abe74f65c11e5ed91847ea2a5d8f269929df44aab920a9dc3799e29ec70910160405180910390a16040516326b9797f60e01b81526001600160a01b0383811660048301528216906326b9797f90602401600060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b505050506001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b6000610fdc8260006110af565b90506001600160a01b0381166110505760405162461bcd60e51b815260206004820152603360248201527f53696c6f4f7261636c655265706f7369746f72793a2063616e206e6f742066696044820152721b99081bdc9858db1948199bdc88185cdcd95d606a1b60648201526084016103a7565b61105a8282610f03565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060005b60045481101561120c576000600482815481106110d4576110d46114b6565b60009182526020822001546001600160a01b031691508561116d57604051630b8abf1d60e31b81526001600160a01b038881166004830152831690635c55f8e89060240160206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611168919061137d565b6111e6565b604051631befe8b360e21b81526001600160a01b038881166004830152831690636fbfa2cc9060240160206040518083038186803b1580156111ae57600080fd5b505afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e6919061137d565b9050838111156111f7578194508093505b505080806112049061146f565b9150506110b5565b505092915050565b60006020828403121561122657600080fd5b8135610e52816114cc565b60006020828403121561124357600080fd5b8151610e52816114cc565b6000806040838503121561126157600080fd5b823561126c816114cc565b9150602083013561127c816114cc565b809150509250929050565b6000806000806060858703121561129d57600080fd5b84356112a8816114cc565b935060208501356112b8816114cc565b9250604085013567ffffffffffffffff808211156112d557600080fd5b818701915087601f8301126112e957600080fd5b8135818111156112f857600080fd5b88602082850101111561130a57600080fd5b95989497505060200194505050565b6000806040838503121561132c57600080fd5b8235611337816114cc565b9150602083013561127c816114e1565b60006020828403121561135957600080fd5b8151610e52816114e1565b60006020828403121561137657600080fd5b5035919050565b60006020828403121561138f57600080fd5b5051919050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6020808252825182820181905260009190848201906040850190845b818110156114175783516001600160a01b0316835292840192918401916001016113f2565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561146a5761146a61148a565b500390565b60006000198214156114835761148361148a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610f0057600080fd5b8015158114610f0057600080fdfea2646970667358221220439197c0e171d11cd4fe7abdaafe7a1c6cdee38926232a27e8cc905606bb0a4f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Transfers ownership of the contract to a pending owner Can only be called by the pending owner."
      },
      "findBestOracle(address,bool)": {
        "params": {
          "_asset": "asset address",
          "_rawSearch": "boolean         - if FALSE, it performs search with all requirements, for example, TWAP readiness         - if TRUE, it performs a raw search, without any requirements (this is for off-chain checks)           that needs to be done for guarded silo creations"
        }
      },
      "initOracleForAsset(address,address,bytes)": {
        "details": "this method does two things:      - init new asset if oracle is provided      - search for best oracle and updates if we found better",
        "params": {
          "_asset": "address od token to be initialise",
          "_data": "(optional) custom data required for asset initialisation",
          "_oracle": "(optional) address of silo oracle that will be initialised with new asset        we do not check, if this oracle is registered or not, because it can not be used if not registered anyway"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPendingOwnership(address)": {
        "details": "Transfers pending ownership of the contract to a new account (`newPendingOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "assetsOracles": {
        "params": {
          "_asset": "address"
        },
        "return": "oracle address assigned for asset",
        "returns": {
          "_0": "oracle address assigned for asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initOracleForAsset(address,address,bytes)": {
        "notice": "initialise oracle for asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20079,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20081,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13996,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "registeredOracles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14001,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "assetsOracles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14004,
        "contract": "contracts/SiloOracleRepository.sol:SiloOracleRepository",
        "label": "oracles",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}