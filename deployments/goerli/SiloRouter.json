{
  "address": "0x7FA084a45a6b8A1Ab058e5BA5B01f2Cfb9b26636",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWrappedToken",
          "name": "_wrappedToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum SiloRouter.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "silo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "collateralOnly",
              "type": "bool"
            }
          ],
          "internalType": "struct SiloRouter.Action[]",
          "name": "_actions",
          "type": "tuple[]"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "contract IWrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x94a2f52061db2e75cb61802a238cbb230d840349eb32473184b0319b072bd68c",
  "receipt": {
    "to": null,
    "from": "0x9E1c4D796e389Cb96d644Dd9A98CDBeE99EC4440",
    "contractAddress": "0x7FA084a45a6b8A1Ab058e5BA5B01f2Cfb9b26636",
    "transactionIndex": 23,
    "gasUsed": "720444",
    "logsBloom": "0x
    "blockHash": "0x08e93f259df5b5a6dd4ce595aa0564b7f3c2d98b3c63832cd360b8208f5976cd",
    "transactionHash": "0x94a2f52061db2e75cb61802a238cbb230d840349eb32473184b0319b072bd68c",
    "logs": [],
    "blockNumber": 6339044,
    "cumulativeGasUsed": "2680308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1e980cd6eAeB53ed7e1AA3e8B24f25e1d84b65e1"
  ],
  "numDeployments": 1,
  "solcInputHash": "513d71c9d0c126d5b4efd168466082e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWrappedToken\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SiloRouter.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"collateralOnly\",\"type\":\"bool\"}],\"internalType\":\"struct SiloRouter.Action[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IWrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SiloRouter.sol\":\"SiloRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/SiloRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWrappedToken.sol\\\";\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./interfaces/IRepository.sol\\\";\\n\\ncontract SiloRouter {\\n    using SafeERC20 for IERC20;\\n\\n    enum ActionType { Deposit, Withdraw, Borrow, Repay }\\n\\n    struct Action {\\n        // what do you want to do?\\n        ActionType actionType;\\n        // which Silo are you internacting with?\\n        address silo;\\n        // what asset do you want to use?\\n        address asset;\\n        // how much asset do you want to use?\\n        uint256 amount;\\n        // is it an action on collateral only?\\n        bool collateralOnly;\\n    }\\n\\n    IWrappedToken public immutable wrappedToken;\\n\\n    constructor (IWrappedToken _wrappedToken) {\\n        wrappedToken = _wrappedToken;\\n    }\\n\\n    receive() external payable {}\\n\\n    function borrow(Action[] memory _actions) external payable {\\n        uint256 len = _actions.length;\\n\\n        for (uint256 i  = 0; i < len; i++) {\\n            _executeAction(_actions[i], i == 0, i == len - 1);\\n        }\\n    }\\n\\n    /// @param _action action to execute, this can be one of many actions in the whole flow\\n    /// @param _first is this FIRST action in a flow\\n    /// @param _first is this LAST action in a flow\\n    // solhint-disable-next-line code-complexity\\n    function _executeAction(Action memory _action, bool _first, bool _last) internal {\\n        if (_action.actionType == ActionType.Deposit) {\\n            if (_first) {\\n                _pullAsset(_action.asset, _action.amount);\\n            }\\n\\n            ISilo(_action.silo).depositFor(_action.asset, msg.sender, _action.amount, _action.collateralOnly);\\n        } else if (_action.actionType == ActionType.Withdraw) {\\n            ISilo(_action.silo).withdrawFor(\\n                _action.asset,\\n                msg.sender,\\n                address(this),\\n                _action.amount,\\n                _action.collateralOnly\\n            );\\n\\n            if (_last) {\\n                _sendAsset(_action.asset, _action.amount);\\n            }\\n        } else if (_action.actionType == ActionType.Borrow) {\\n            ISilo(_action.silo).borrowFor(_action.asset, msg.sender, address(this), _action.amount);\\n\\n            if (_last) {\\n                _sendAsset(_action.asset, _action.amount);\\n            }\\n        } else if (_action.actionType == ActionType.Repay) {\\n            if (_first) {\\n                _pullAsset(_action.asset, _action.amount);\\n            }\\n\\n            ISilo(_action.silo).repayFor(_action.asset, msg.sender, _action.amount);\\n        } else {\\n            revert(\\\"SiloRouter: unsupported action\\\");\\n        }\\n    }\\n\\n    function _pullAsset(address _asset, uint256 _amount) internal {\\n        if (_asset == address(wrappedToken) && msg.value > 0) {\\n            require(msg.value == _amount, \\\"SiloRouter: incorrect asset value\\\");\\n            wrappedToken.deposit{value: msg.value}();\\n        } else {\\n            IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n    }\\n\\n    function _sendAsset(address _asset, uint256 _amount) internal {\\n        if (_asset == address(wrappedToken)) {\\n            wrappedToken.withdraw(_amount);\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"SiloRouter: asset transfer failed.\\\");\\n        } else {\\n            IERC20(_asset).safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19f341be652f7894be3787d058ab75b4987c4992114522c886f4163fc128f5ba\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\n\\ninterface IBaseSilo {\\n    struct AssetStorage {\\n        // Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        // Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        // Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        // COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        // It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        // COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used as collateral.\\n        // These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        // DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n        // Timestamp of the last time `interestRate` has been updated in storage.\\n        uint256 interestRateTimestamp;\\n        // Total amount (ever growing) of asset token that has been earned by the protocol from generated interest.\\n        uint256 protocolFees;\\n        // Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        // True if asset was removed from the protocol. If so, deposit and borrow functions are disabled for that asset\\n        bool removed;\\n    }\\n\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    event Liquidate(address indexed asset, address indexed _user, uint256 amountRepaid, uint256 seizedCollateral);\\n\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    // function liquidationWithdraw(address _depositor) external returns (uint256 amount);\\n    // function seizeCollateral(address user, address liquidator) external returns (uint256);\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @dev calculate combined Loan-To-Value of user, using either maximumLTV or liquidationThreshold\\n    /// @param _useMaximumLTV bool\\n    ///         when TRUE returns maximum Loan-To-Value of given user,\\n    ///         when FALSE return liquidation threshold of given user\\n    /// @return Loan-To-Value of given user\\n    function calculateUserLTV(address _user, bool _useMaximumLTV) external view returns (uint256);\\n\\n    function calculateCollateralValue(address _user, address _asset, uint256 _assetPrice, uint256 _assetDecimals)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLTV(address _user) external view returns (uint256);\\n\\n    /// @dev we do not allow for deposit when asset is already borrowed by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @dev we do not allow for borrow when asset is also deposited by user\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    function getUtilization(address _asset) external view returns (uint256);\\n    function interestRateTimestamp(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f10a064de5d9f67cb6730af6287410335201becab000dea6588cee0e05f10\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IFactory {\\n    /// @param _siloAsset silo asset\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo address\\n    function createSilo(address _siloAsset, bytes memory _data) external returns (address silo);\\n}\\n\",\"keccak256\":\"0x9a643f4989007ea17ff7565a83604b1cbed5ea33db01cb21ded8b75f64038ce3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4078a3d4b5e40bff017ea246ead7943f1b32e53a4ba632968bd203c7df46308\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\n\\ninterface IRepository {\\n    event NewSilo(address indexed silo, address indexed asset, uint256 siloVersion, address[] bridgeAssets);\\n\\n    event BridgeAssetAdded(address newBridgeAsset);\\n\\n    event BridgeAssetRemoved(address bridgeAssetRemoved);\\n\\n    event InterestRateModel(address oldModel, address newModel);\\n\\n    event BridgePoolUpdate(address oldPool, address newPool);\\n\\n    event OracleUpdate(address oldOracle, address newOracle);\\n\\n    event TokensFactoryUpdate(address oldTokensFactory, address newTokensFactory);\\n\\n    event RouterUpdate(address oldRouter, address newRouter);\\n\\n    event RegisterSiloVersion(address factory, uint256 siloLatestVersion, uint256 siloDefaultVersion);\\n\\n    event UnregisterSiloVersion(address factory, uint256 siloVersion);\\n\\n    event SiloDefaultVersion(uint256 siloDefaultVersion, uint256 defaultVersion);\\n\\n    event FeeUpdate(\\n        uint256 oldEntryFee,\\n        uint256 newEntryFee,\\n        uint256 oldProtocolShareFee,\\n        uint256 newProtocolShareFee,\\n        uint256 oldProtocolLiquidationFee,\\n        uint256 newProtocolLiquidationFee\\n    );\\n\\n    /// @dev use this method only when off-chain verification is OFF\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    ///      Only owner (DAO) can replace.\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    ///        for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if it is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    /// @dev use this method only when off-chain verification is ON\\n    /// @param _v v portion of off-chain verifier signature\\n    /// @param _r r portion of off-chain verifier signature\\n    /// @param _s s portion of off-chain verifier signature\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @param _oracle (optional) if provided, asset will be initialised on that oracle\\n    ///        it does not mean, this oracle will be chosen for asset, it only means, after valid initialization,\\n    ///        it could be chosen, if is is the best one\\n    /// @param _oracleData custom data for oracle initialization\\n    function newSiloVerified(\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        address _siloAsset,\\n        uint256 _siloVersion,\\n        bytes memory _siloData,\\n        address _oracle,\\n        bytes calldata _oracleData\\n    ) external;\\n\\n    function isSilo(address silo) external view returns (bool);\\n    function silo(address asset) external view returns (address);\\n    function siloFactory(uint256 siloVersion) external view returns (IFactory);\\n    function tokensFactory() external view returns (ITokensFactory);\\n    function router() external view returns (address);\\n    function getBridgeAssets() external view returns (address[] memory);\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n    function oracle() external view returns (address);\\n    function owner() external view returns (address);\\n    function entryFee() external view returns (uint256);\\n    function protocolShareFee() external view returns (uint256);\\n    function getInterestRateModel(address silo, address asset) external view returns (address);\\n    function getMaximumLTV(address silo, address asset) external view returns (uint256);\\n    function getLiquidationThreshold(address silo, address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x986e8172608e2a866c1cf43f21305c6ce59610b82c8c986710d55c5cd2480c74\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc1931b12d3f8c39887ce79bc191603ef2e0be0b5836968d68976760d139c9399\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    function borrow(address _asset, uint256 _amount) external;\\n\\n    function borrowFor(address _asset, address _user, address _to, uint256 _amount) external;\\n\\n    function deposit(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function depositFor(address _asset, address _user, uint256 _amount, bool collateralOnly) external;\\n\\n    function repay(address _asset, uint256 _amount) external;\\n\\n    function repayFor(address _asset, address _user, uint256 _amount) external;\\n\\n    function withdraw(address _asset, uint256 _amount, bool collateralOnly) external;\\n\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool collateralOnly\\n    ) external;\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @param _users array of users to liquidate\\n    /// @param _liquidator all collateral will be send to this address\\n    /// @param _flashReceiver this address will be notified once all collateral will be send to _liquidator\\n    /// @param _flashReceiverData this data will be forward to receiver on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals seizedCollaterals[userId][assetId] => amount\\n    ///         amounts of collaterals send to liquidator\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    ///         required amounts of debt to be repaid\\n    function flashLiquidate(\\n        address[] memory _users,\\n        address _liquidator,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0x96e7d309a60c6d8de7e2d09df54bc68b24d4c55f06c5e6916763b4d21d179759\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n}\\n\",\"keccak256\":\"0xcdb6f1a6c67d6f9ab29276e9577701ae6efbf8076ab31c1ac5963aff1385292b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedToken is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc4829958402caf17b9c07fe37278c97738e7a72e89c27430d612d178951acceb\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610cbb380380610cbb83398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c610c0e6100ad60003960008181604b015281816103b101528181610450015281816104c401526105120152610c0e6000f3fe60806040526004361061002d5760003560e01c8063996c6cc314610039578063fc298a151461008957600080fd5b3661003457005b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009c610097366004610936565b61009e565b005b805160005b818110156100f2576100e08382815181106100c0576100c0610b9b565b6020026020010151826000146001856100d99190610b11565b84146100f7565b806100ea81610b54565b9150506100a3565b505050565b60008351600381111561010c5761010c610b85565b14156101b657811561012a5761012a836040015184606001516103af565b602083015160408085015160608601516080870151925163fbf178db60e01b81526001600160a01b039283166004820152336024820152604481019190915291151560648301529091169063fbf178db906084015b600060405180830381600087803b15801561019957600080fd5b505af11580156101ad573d6000803e3d6000fd5b50505050505050565b6001835160038111156101cb576101cb610b85565b1415610276576020830151604080850151606086015160808701519251633cd9060760e21b81526001600160a01b039283166004820152336024820152306044820152606481019190915291151560848301529091169063f364181c9060a4015b600060405180830381600087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b5050505080156100f2576100f2836040015184606001516104c2565b60028351600381111561028b5761028b610b85565b14156102e35760208301516040808501516060860151915163dbc5b48160e01b81526001600160a01b03918216600482015233602482015230604482015260648101929092529091169063dbc5b4819060840161022c565b6003835160038111156102f8576102f8610b85565b141561036257811561031657610316836040015184606001516103af565b60208301516040808501516060860151915163976ce49560e01b81526001600160a01b03918216600482015233602482015260448101929092529091169063976ce4959060640161017f565b60405162461bcd60e51b815260206004820152601e60248201527f53696c6f526f757465723a20756e737570706f7274656420616374696f6e000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480156103f05750600034115b156104a95780341461044e5760405162461bcd60e51b815260206004820152602160248201527f53696c6f526f757465723a20696e636f72726563742061737365742076616c756044820152606560f81b60648201526084016103a6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019957600080fd5b6104be6001600160a01b03831633308461062d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561061957604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d80600081146105b8576040519150601f19603f3d011682016040523d82523d6000602084013e6105bd565b606091505b50509050806100f25760405162461bcd60e51b815260206004820152602260248201527f53696c6f526f757465723a206173736574207472616e73666572206661696c65604482015261321760f11b60648201526084016103a6565b6104be6001600160a01b038316338361069e565b6040516001600160a01b03808516602483015283166044820152606481018290526106989085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106ce565b50505050565b6040516001600160a01b0383166024820152604481018290526100f290849063a9059cbb60e01b90606401610661565b6000610723826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107a09092919063ffffffff16565b8051909150156100f257808060200190518101906107419190610a4b565b6100f25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a6565b60606107af84846000856107b9565b90505b9392505050565b60608247101561081a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a6565b843b6108685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a6565b600080866001600160a01b031685876040516108849190610a68565b60006040518083038185875af1925050503d80600081146108c1576040519150601f19603f3d011682016040523d82523d6000602084013e6108c6565b606091505b50915091506108d68282866108e1565b979650505050505050565b606083156108f05750816107b2565b8251156109005782518084602001fd5b8160405162461bcd60e51b81526004016103a69190610a84565b80356001600160a01b038116811461093157600080fd5b919050565b6000602080838503121561094957600080fd5b823567ffffffffffffffff8082111561096157600080fd5b818501915085601f83011261097557600080fd5b81358181111561098757610987610bb1565b610995848260051b01610ae0565b818152848101925083850160a0808402860187018a10156109b557600080fd5b600095505b83861015610a3d5780828b0312156109d157600080fd5b6109d9610ab7565b8235600481106109e857600080fd5b81526109f583890161091a565b888201526040610a0681850161091a565b9082015260608381013590820152608080840135610a2381610bc7565b9082015285526001959095019493860193908101906109ba565b509098975050505050505050565b600060208284031215610a5d57600080fd5b81516107b281610bc7565b60008251610a7a818460208701610b28565b9190910192915050565b6020815260008251806020840152610aa3816040850160208701610b28565b601f01601f19169190910160400192915050565b60405160a0810167ffffffffffffffff81118282101715610ada57610ada610bb1565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0957610b09610bb1565b604052919050565b600082821015610b2357610b23610b6f565b500390565b60005b83811015610b43578181015183820152602001610b2b565b838111156106985750506000910152565b6000600019821415610b6857610b68610b6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610bd557600080fd5b5056fea26469706673582212202255f63158906d7d61966b8e56e37d4c18793d8f03a4468d67422d87b34fef0964736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c8063996c6cc314610039578063fc298a151461008957600080fd5b3661003457005b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009c610097366004610936565b61009e565b005b805160005b818110156100f2576100e08382815181106100c0576100c0610b9b565b6020026020010151826000146001856100d99190610b11565b84146100f7565b806100ea81610b54565b9150506100a3565b505050565b60008351600381111561010c5761010c610b85565b14156101b657811561012a5761012a836040015184606001516103af565b602083015160408085015160608601516080870151925163fbf178db60e01b81526001600160a01b039283166004820152336024820152604481019190915291151560648301529091169063fbf178db906084015b600060405180830381600087803b15801561019957600080fd5b505af11580156101ad573d6000803e3d6000fd5b50505050505050565b6001835160038111156101cb576101cb610b85565b1415610276576020830151604080850151606086015160808701519251633cd9060760e21b81526001600160a01b039283166004820152336024820152306044820152606481019190915291151560848301529091169063f364181c9060a4015b600060405180830381600087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b5050505080156100f2576100f2836040015184606001516104c2565b60028351600381111561028b5761028b610b85565b14156102e35760208301516040808501516060860151915163dbc5b48160e01b81526001600160a01b03918216600482015233602482015230604482015260648101929092529091169063dbc5b4819060840161022c565b6003835160038111156102f8576102f8610b85565b141561036257811561031657610316836040015184606001516103af565b60208301516040808501516060860151915163976ce49560e01b81526001600160a01b03918216600482015233602482015260448101929092529091169063976ce4959060640161017f565b60405162461bcd60e51b815260206004820152601e60248201527f53696c6f526f757465723a20756e737570706f7274656420616374696f6e000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480156103f05750600034115b156104a95780341461044e5760405162461bcd60e51b815260206004820152602160248201527f53696c6f526f757465723a20696e636f72726563742061737365742076616c756044820152606560f81b60648201526084016103a6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019957600080fd5b6104be6001600160a01b03831633308461062d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561061957604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b50506040516000925033915083908381818185875af1925050503d80600081146105b8576040519150601f19603f3d011682016040523d82523d6000602084013e6105bd565b606091505b50509050806100f25760405162461bcd60e51b815260206004820152602260248201527f53696c6f526f757465723a206173736574207472616e73666572206661696c65604482015261321760f11b60648201526084016103a6565b6104be6001600160a01b038316338361069e565b6040516001600160a01b03808516602483015283166044820152606481018290526106989085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106ce565b50505050565b6040516001600160a01b0383166024820152604481018290526100f290849063a9059cbb60e01b90606401610661565b6000610723826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107a09092919063ffffffff16565b8051909150156100f257808060200190518101906107419190610a4b565b6100f25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a6565b60606107af84846000856107b9565b90505b9392505050565b60608247101561081a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a6565b843b6108685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a6565b600080866001600160a01b031685876040516108849190610a68565b60006040518083038185875af1925050503d80600081146108c1576040519150601f19603f3d011682016040523d82523d6000602084013e6108c6565b606091505b50915091506108d68282866108e1565b979650505050505050565b606083156108f05750816107b2565b8251156109005782518084602001fd5b8160405162461bcd60e51b81526004016103a69190610a84565b80356001600160a01b038116811461093157600080fd5b919050565b6000602080838503121561094957600080fd5b823567ffffffffffffffff8082111561096157600080fd5b818501915085601f83011261097557600080fd5b81358181111561098757610987610bb1565b610995848260051b01610ae0565b818152848101925083850160a0808402860187018a10156109b557600080fd5b600095505b83861015610a3d5780828b0312156109d157600080fd5b6109d9610ab7565b8235600481106109e857600080fd5b81526109f583890161091a565b888201526040610a0681850161091a565b9082015260608381013590820152608080840135610a2381610bc7565b9082015285526001959095019493860193908101906109ba565b509098975050505050505050565b600060208284031215610a5d57600080fd5b81516107b281610bc7565b60008251610a7a818460208701610b28565b9190910192915050565b6020815260008251806020840152610aa3816040850160208701610b28565b601f01601f19169190910160400192915050565b60405160a0810167ffffffffffffffff81118282101715610ada57610ada610bb1565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0957610b09610bb1565b604052919050565b600082821015610b2357610b23610b6f565b500390565b60005b83811015610b43578181015183820152602001610b2b565b838111156106985750506000910152565b6000600019821415610b6857610b68610b6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610bd557600080fd5b5056fea26469706673582212202255f63158906d7d61966b8e56e37d4c18793d8f03a4468d67422d87b34fef0964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}